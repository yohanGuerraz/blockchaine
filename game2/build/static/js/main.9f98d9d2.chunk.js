(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{119:function(e){e.exports={contractName:"MemoryToken",abi:[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{constant:!1,inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"safeTransferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenOfOwnerByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.16+commit.9c3226ce"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.","params":{"to":"address to be approved for the given token ID","tokenId":"uint256 ID of the token to be approved"}},"balanceOf(address)":{"details":"Gets the balance of the specified address.","params":{"owner":"address to query the balance of"},"return":"uint256 representing the amount owned by the passed address"},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.","params":{"tokenId":"uint256 ID of the token to query the approval of"},"return":"address currently approved for the given token ID"},"isApprovedForAll(address,address)":{"details":"Tells whether an operator is approved by a given owner.","params":{"operator":"operator address which you want to query the approval of","owner":"owner address which you want to query the approval of"},"return":"bool whether the given operator is approved by the given owner"},"name()":{"details":"Gets the token name.","return":"string representing the token name"},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID.","params":{"tokenId":"uint256 ID of the token to query the owner of"},"return":"address currently marked as the owner of the given token ID"},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\"onERC721Received(address,address,uint256,bytes)\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\"onERC721Received(address,address,uint256,bytes)\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"_data":"bytes data to send along with a safe transfer check","from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.","params":{"approved":"representing the status of the approval to be set","to":"operator address to set the approval"}},"supportsInterface(bytes4)":{"details":"See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."},"symbol()":{"details":"Gets the token symbol.","return":"string representing the token symbol"},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.","params":{"index":"uint256 representing the index to be accessed of the tokens list"},"return":"uint256 token ID at the given index of the tokens list"},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner.","params":{"index":"uint256 representing the index to be accessed of the requested tokens list","owner":"address owning the tokens list to be accessed"},"return":"uint256 token ID at the given index of the tokens list owned by the requested address"},"tokenURI(uint256)":{"details":"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.","params":{"tokenId":"uint256 ID of the token to query"}},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract.","return":"uint256 representing the total amount of tokens"},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"project:/src/contracts/MemoryToken.sol":"MemoryToken"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"project:/src/contracts/ERC721Full.sol":{"keccak256":"0x2c9428b26856816aabc93836bad491818b513ebb65e79dd96b78f994bbce3c6f","urls":["bzz-raw://df88a09cdb67f443c89908d0b1ec154f6e5a4b0b2177580d9d2eae8d0e3d9cf1","dweb:/ipfs/QmWaaSeg35RuBMD2vDnTggkjfTZbgFzupQoCWHgSpC3T8U"]},"project:/src/contracts/MemoryToken.sol":{"keccak256":"0x50d8edce281842006e595e54409879bf98cb98c7faa4e45d6740c18fe7845cde","urls":["bzz-raw://6763a01874f1b61bf85626e481a54f345308a1afb9860556440e159e05697812","dweb:/ipfs/QmW9mi1VbuzjijqbBStaVRkDHK398BfWkkwf1CexhsHTL3"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'pragma solidity ^0.5.0;\n\nimport "./ERC721Full.sol";\n\ncontract MemoryToken is ERC721Full {\n  // Code goes here...\n\n}\n',sourcePath:"C:\\Users\\Guerraz Yohan\\Desktop\\game2\\src\\contracts\\MemoryToken.sol",ast:{absolutePath:"project:/src/contracts/MemoryToken.sol",exportedSymbols:{MemoryToken:[1460]},id:1461,nodeType:"SourceUnit",nodes:[{id:1456,literals:["solidity","^","0.5",".0"],nodeType:"PragmaDirective",src:"0:23:1"},{absolutePath:"project:/src/contracts/ERC721Full.sol",file:"./ERC721Full.sol",id:1457,nodeType:"ImportDirective",scope:1461,sourceUnit:1455,src:"25:26:1",symbolAliases:[],unitAlias:""},{baseContracts:[{arguments:null,baseName:{contractScope:null,id:1458,name:"ERC721Full",nodeType:"UserDefinedTypeName",referencedDeclaration:1454,src:"77:10:1",typeDescriptions:{typeIdentifier:"t_contract$_ERC721Full_$1454",typeString:"contract ERC721Full"}},id:1459,nodeType:"InheritanceSpecifier",src:"77:10:1"}],contractDependencies:[9,110,372,930,955,1288,1309,1434,1454],contractKind:"contract",documentation:null,fullyImplemented:!1,id:1460,linearizedBaseContracts:[1460,1454,1434,1309,1288,955,930,110,372,9],name:"MemoryToken",nodeType:"ContractDefinition",nodes:[],scope:1461,src:"53:62:1"}],src:"0:116:1"},legacyAST:{attributes:{absolutePath:"project:/src/contracts/MemoryToken.sol",exportedSymbols:{MemoryToken:[1460]}},children:[{attributes:{literals:["solidity","^","0.5",".0"]},id:1456,name:"PragmaDirective",src:"0:23:1"},{attributes:{SourceUnit:1455,absolutePath:"project:/src/contracts/ERC721Full.sol",file:"./ERC721Full.sol",scope:1461,symbolAliases:[null],unitAlias:""},id:1457,name:"ImportDirective",src:"25:26:1"},{attributes:{contractDependencies:[9,110,372,930,955,1288,1309,1434,1454],contractKind:"contract",documentation:null,fullyImplemented:!1,linearizedBaseContracts:[1460,1454,1434,1309,1288,955,930,110,372,9],name:"MemoryToken",nodes:[null],scope:1461},children:[{attributes:{arguments:null},children:[{attributes:{contractScope:null,name:"ERC721Full",referencedDeclaration:1454,type:"contract ERC721Full"},id:1458,name:"UserDefinedTypeName",src:"77:10:1"}],id:1459,name:"InheritanceSpecifier",src:"77:10:1"}],id:1460,name:"ContractDefinition",src:"53:62:1"}],id:1461,name:"SourceUnit",src:"0:116:1"},compiler:{name:"solc",version:"0.5.16+commit.9c3226ce.Emscripten.clang"},networks:{5777:{events:{"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"}},links:{},address:"0x70345d54733d0590c5d628358a5E119F8e2aF46B",transactionHash:"0x1e25e71041a5981a5cd6e946b401ed0670648f0912dce7bd9049e1454bcc49e6"}},schemaVersion:"3.4.7",updatedAt:"2022-06-22T07:32:00.325Z",devdoc:{methods:{"approve(address,uint256)":{details:"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",params:{to:"address to be approved for the given token ID",tokenId:"uint256 ID of the token to be approved"}},"balanceOf(address)":{details:"Gets the balance of the specified address.",params:{owner:"address to query the balance of"},return:"uint256 representing the amount owned by the passed address"},"getApproved(uint256)":{details:"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",params:{tokenId:"uint256 ID of the token to query the approval of"},return:"address currently approved for the given token ID"},"isApprovedForAll(address,address)":{details:"Tells whether an operator is approved by a given owner.",params:{operator:"operator address which you want to query the approval of",owner:"owner address which you want to query the approval of"},return:"bool whether the given operator is approved by the given owner"},"name()":{details:"Gets the token name.",return:"string representing the token name"},"ownerOf(uint256)":{details:"Gets the owner of the specified token ID.",params:{tokenId:"uint256 ID of the token to query the owner of"},return:"address currently marked as the owner of the given token ID"},"safeTransferFrom(address,address,uint256)":{details:'Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator',params:{from:"current owner of the token",to:"address to receive the ownership of the given token ID",tokenId:"uint256 ID of the token to be transferred"}},"safeTransferFrom(address,address,uint256,bytes)":{details:'Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator',params:{_data:"bytes data to send along with a safe transfer check",from:"current owner of the token",to:"address to receive the ownership of the given token ID",tokenId:"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{details:"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",params:{approved:"representing the status of the approval to be set",to:"operator address to set the approval"}},"supportsInterface(bytes4)":{details:"See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."},"symbol()":{details:"Gets the token symbol.",return:"string representing the token symbol"},"tokenByIndex(uint256)":{details:"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",params:{index:"uint256 representing the index to be accessed of the tokens list"},return:"uint256 token ID at the given index of the tokens list"},"tokenOfOwnerByIndex(address,uint256)":{details:"Gets the token ID at a given index of the tokens list of the requested owner.",params:{index:"uint256 representing the index to be accessed of the requested tokens list",owner:"address owning the tokens list to be accessed"},return:"uint256 token ID at the given index of the tokens list owned by the requested address"},"tokenURI(uint256)":{details:"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.",params:{tokenId:"uint256 ID of the token to query"}},"totalSupply()":{details:"Gets the total amount of tokens stored by the contract.",return:"uint256 representing the total amount of tokens"},"transferFrom(address,address,uint256)":{details:"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.",params:{from:"current owner of the token",to:"address to receive the ownership of the given token ID",tokenId:"uint256 ID of the token to be transferred"}}}},userdoc:{methods:{}}}},229:function(e,t,n){e.exports=n.p+"static/media/brain.45a2f0b8.png"},232:function(e,t,n){e.exports=n(545)},252:function(e,t){},254:function(e,t){},350:function(e,t){},390:function(e,t){},396:function(e,t){},398:function(e,t){},429:function(e,t){},431:function(e,t){},432:function(e,t){},437:function(e,t){},439:function(e,t){},446:function(e,t){},448:function(e,t){},466:function(e,t){},468:function(e,t){},480:function(e,t){},483:function(e,t){},493:function(e,t){},501:function(e,t){},530:function(e,t){},538:function(e,t){},542:function(e,t,n){},545:function(e,t,n){"use strict";n.r(t);var a=n(4),r=n.n(a),s=n(226),o=n.n(s),i=(n(237),n(47)),d=n(17),p=n.n(d),l=n(46),u=n(227),c=n(230),y=n(228),m=n(117),f=n(231),h=n(118),b=n.n(h),k=(n(542),n(119)),v=n(229),g=n.n(v),w=[{name:"fries",img:"/images/fries.png"},{name:"cheeseburger",img:"/images/cheeseburger.png"},{name:"ice-cream",img:"/images/ice-cream.png"},{name:"pizza",img:"/images/pizza.png"},{name:"milkshake",img:"/images/milkshake.png"},{name:"hotdog",img:"/images/hotdog.png"},{name:"fries",img:"/images/fries.png"},{name:"cheeseburger",img:"/images/cheeseburger.png"},{name:"ice-cream",img:"/images/ice-cream.png"},{name:"pizza",img:"/images/pizza.png"},{name:"milkshake",img:"/images/milkshake.png"},{name:"hotdog",img:"/images/hotdog.png"}],T=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(c.a)(this,Object(y.a)(t).call(this,e))).chooseImage=function(e){return e=e.toString(),n.state.cardsWon.includes(e)?window.location.origin+"/images/white.png":n.state.cardsChosenId.includes(e)?w[e].img:window.location.origin+"/images/blank.png"},n.flipCard=function(){var e=Object(l.a)(p.a.mark(function e(t){var a;return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:a=n.state.cardsChosen.length,n.setState({cardsChosen:[].concat(Object(i.a)(n.state.cardsChosen),[n.state.cardArray[t].name]),cardsChosenId:[].concat(Object(i.a)(n.state.cardsChosenId),[t])}),1===a&&setTimeout(n.checkForMatch,100);case 3:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),n.checkForMatch=Object(l.a)(p.a.mark(function e(){var t,a;return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t=n.state.cardsChosenId[0],a=n.state.cardsChosenId[1],t==a?alert("tu as clicke sur la meme image!"):n.state.cardsChosen[0]===n.state.cardsChosen[1]?(alert("tu as trouv\xe9 une paire"),n.state.token.methods.mint(n.state.account,window.location.origin+w[t].img.toString()).send({from:n.state.account}).on("transactionHash",function(e){n.setState({cardsWon:[].concat(Object(i.a)(n.state.cardsWon),[t,a]),tokenURIs:[].concat(Object(i.a)(n.state.tokenURIs),[w[t].img])})})):alert("Sorry, essaie encore"),n.setState({cardsChosen:[],cardsChosenId:[]}),n.state.cardsWon.length===w.length&&alert("Congratulations! tu les a tous trouver!");case 5:case"end":return e.stop()}},e)})),n.state={account:"0x0",token:null,totalSupply:0,tokenURIs:[],cardArray:[],cardsChosen:[],cardsChosenId:[],cardsWon:[]},n}return Object(f.a)(t,e),Object(m.a)(t,[{key:"componentWillMount",value:function(){var e=Object(l.a)(p.a.mark(function e(){return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.loadWeb3();case 2:return e.next=4,this.loadBlockchainData();case 4:this.setState({cardArray:w.sort(function(){return.5-Math.random()})});case 5:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"loadWeb3",value:function(){var e=Object(l.a)(p.a.mark(function e(){return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.ethereum){e.next=6;break}return window.web3=new b.a(window.ethereum),e.next=4,window.ethereum.enable();case 4:e.next=7;break;case 6:window.web3?window.web3=new b.a(window.web3.currentProvider):window.alert("Non-Ethereum browser detected. You should consider trying MetaMask!");case 7:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}()},{key:"loadBlockchainData",value:function(){var e=Object(l.a)(p.a.mark(function e(){var t,n,a,r,s,o,d,l,u,c,y,m;return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=window.web3,e.next=3,t.eth.getAccounts();case 3:return n=e.sent,this.setState({account:n[0]}),e.next=7,t.eth.net.getId();case 7:if(a=e.sent,!(r=k.networks[a])){e.next=35;break}return s=k.abi,o=r.address,d=new t.eth.Contract(s,o),this.setState({token:d}),e.next=16,d.methods.totalSupply().call();case 16:return l=e.sent,this.setState({totalSupply:l}),e.next=20,d.methods.balanceOf(n[0]).call();case 20:u=e.sent,c=0;case 22:if(!(c<u)){e.next=33;break}return e.next=25,d.methods.tokenOfOwnerByIndex(n[0],c).call();case 25:return y=e.sent,e.next=28,d.methods.tokenURI(y).call();case 28:m=e.sent,this.setState({tokenURIs:[].concat(Object(i.a)(this.state.tokenURIs),[m])});case 30:c++,e.next=22;break;case 33:e.next=36;break;case 35:alert("Smart contract not deployed to detected network.");case 36:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()}]),Object(m.a)(t,[{key:"render",value:function(){var e=this;return r.a.createElement("div",null,r.a.createElement("nav",{className:"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow"},r.a.createElement("a",{className:"navbar-brand col-sm-3 col-md-2 mr-0",href:"https://lesjoiesducode.fr/meme-combat",target:"_blank",rel:"noopener noreferrer"},r.a.createElement("img",{src:g.a,width:"30",height:"30",className:"d-inline-block align-top",alt:""}),"\xa0 Memory Tokens"),r.a.createElement("ul",{className:"navbar-nav px-3"},r.a.createElement("li",{className:"nav-item text-nowrap d-none d-sm-none d-sm-block"},r.a.createElement("small",{className:"text-muted"},r.a.createElement("span",{id:"account"},this.state.account))))),r.a.createElement("div",{className:"container-fluid mt-5"},r.a.createElement("div",{className:"row"},r.a.createElement("main",{role:"main",className:"col-lg-12 d-flex text-center"},r.a.createElement("div",{className:"content mr-auto ml-auto"},r.a.createElement("h1",{className:"d-4"},"Start matching now!"),r.a.createElement("div",{className:"grid mb-4"},this.state.cardArray.map(function(t,n){return r.a.createElement("img",{key:n,src:e.chooseImage(n),"data-id":n,onClick:function(t){var n=t.target.getAttribute("data-id");e.state.cardsWon.includes(n.toString())||e.flipCard(n)}})})),r.a.createElement("div",null,r.a.createElement("h5",null,"Tokens Collect\xe9:",r.a.createElement("span",{id:"result"},"\xa0",this.state.tokenURIs.length)),r.a.createElement("div",{className:"grid mb-4"},this.state.tokenURIs.map(function(e,t){return r.a.createElement("img",{key:t,src:e})}))))))))}}]),t}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(T,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[232,2,1]]]);
//# sourceMappingURL=main.9f98d9d2.chunk.js.map