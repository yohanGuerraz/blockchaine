{"version":3,"sources":["brain.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CARD_ARRAY","name","img","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","chooseImage","cardId","toString","state","cardsWon","includes","window","location","origin","cardsChosenId","flipCard","_ref","asyncToGenerator","regenerator_default","a","mark","_callee4","alreadyChosen","wrap","_context4","prev","next","cardsChosen","length","setState","concat","toConsumableArray","cardArray","setTimeout","checkForMatch","stop","_x","apply","arguments","_callee5","optionOneId","optionTwoId","_context5","alert","token","methods","mint","account","send","from","on","hash","tokenURIs","totalSupply","loadWeb3","loadBlockchainData","sort","Math","random","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","MemoryToken","networks","abi","address","Contract","balanceOf","i","tokenOfOwnerByIndex","id","tokenURI","_this2","react_default","createElement","className","href","target","rel","src","brain","width","height","alt","role","map","card","key","data-id","onClick","event","getAttribute","Component","Boolean","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f98d9d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.45a2f0b8.png\";","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport MemoryToken from '../abis/MemoryToken.json'\nimport brain from '../brain.png'\n\nconst CARD_ARRAY = [\n  {\n    name: 'fries',\n    img: '/images/fries.png'\n  },\n  {\n    name: 'cheeseburger',\n    img: '/images/cheeseburger.png'\n  },\n  {\n    name: 'ice-cream',\n    img: '/images/ice-cream.png'\n  },\n  {\n    name: 'pizza',\n    img: '/images/pizza.png'\n  },\n  {\n    name: 'milkshake',\n    img: '/images/milkshake.png'\n  },\n  {\n    name: 'hotdog',\n    img: '/images/hotdog.png'\n  },\n  {\n    name: 'fries',\n    img: '/images/fries.png'\n  },\n  {\n    name: 'cheeseburger',\n    img: '/images/cheeseburger.png'\n  },\n  {\n    name: 'ice-cream',\n    img: '/images/ice-cream.png'\n  },\n  {\n    name: 'pizza',\n    img: '/images/pizza.png'\n  },\n  {\n    name: 'milkshake',\n    img: '/images/milkshake.png'\n  },\n  {\n    name: 'hotdog',\n    img: '/images/hotdog.png'\n  }\n]\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    this.setState({ cardArray: CARD_ARRAY.sort(() => 0.5 - Math.random()) })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    // Load smart contract\n    const networkId = await web3.eth.net.getId()\n    const networkData = MemoryToken.networks[networkId]\n    if(networkData) {\n      const abi = MemoryToken.abi\n      const address = networkData.address\n      const token = new web3.eth.Contract(abi, address)\n      this.setState({ token })\n      const totalSupply = await token.methods.totalSupply().call()\n      this.setState({ totalSupply })\n      // Load Tokens\n      let balanceOf = await token.methods.balanceOf(accounts[0]).call()\n      for (let i = 0; i < balanceOf; i++) {\n        let id = await token.methods.tokenOfOwnerByIndex(accounts[0], i).call()\n        let tokenURI = await token.methods.tokenURI(id).call()\n        this.setState({\n          tokenURIs: [...this.state.tokenURIs, tokenURI]\n        })\n      }\n    } else {\n      alert('Smart contract not deployed to detected network.')\n    }\n  }\n  /*choix de l'image*/\n  chooseImage = (cardId) => {\n    cardId = cardId.toString()\n    if(this.state.cardsWon.includes(cardId)) {\n      return window.location.origin + '/images/white.png'\n    }\n    else if(this.state.cardsChosenId.includes(cardId)) {\n      return CARD_ARRAY[cardId].img\n    } else {\n      return window.location.origin + '/images/blank.png'\n    }\n  }\n  /*image retourner*/\n  flipCard = async (cardId) => {\n    let alreadyChosen = this.state.cardsChosen.length\n\n    this.setState({\n      cardsChosen: [...this.state.cardsChosen, this.state.cardArray[cardId].name],\n      cardsChosenId: [...this.state.cardsChosenId, cardId]\n    })\n\n    if (alreadyChosen === 1) {\n      setTimeout(this.checkForMatch, 100)\n    }\n  }\n\n\n  checkForMatch = async () => {\n    const optionOneId = this.state.cardsChosenId[0]\n    const optionTwoId = this.state.cardsChosenId[1]\n\n    if(optionOneId == optionTwoId) {\n      alert('tu as clicke sur la meme image!')\n    } else if (this.state.cardsChosen[0] === this.state.cardsChosen[1]) {\n      alert('tu as trouvÃ© une paire')\n      this.state.token.methods.mint(\n        this.state.account,\n        window.location.origin + CARD_ARRAY[optionOneId].img.toString()\n      )\n      .send({ from: this.state.account })\n      .on('transactionHash', (hash) => {\n        this.setState({\n          cardsWon: [...this.state.cardsWon, optionOneId, optionTwoId],\n          tokenURIs: [...this.state.tokenURIs, CARD_ARRAY[optionOneId].img]\n        })\n      })\n    } else {\n      alert('Sorry, essaie encore')\n    }\n    this.setState({\n      cardsChosen: [],\n      cardsChosenId: []\n    })\n    if (this.state.cardsWon.length === CARD_ARRAY.length) {\n      alert('Congratulations! tu les a tous trouver!')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      token: null,\n      totalSupply: 0,\n      tokenURIs: [],\n      cardArray: [],\n      cardsChosen: [],\n      cardsChosenId: [],\n      cardsWon: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://lesjoiesducode.fr/meme-combat\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          <img src={brain} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\n          &nbsp; Memory Tokens\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-muted\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <h1 className=\"d-4\">Start matching now!</h1>\n\n                <div className=\"grid mb-4\" >\n\n                  { this.state.cardArray.map((card, key) => {\n                    return(\n                      <img\n                        key={key}\n                        src={this.chooseImage(key)}\n                        data-id={key}\n                        onClick={(event) => {\n                          let cardId = event.target.getAttribute('data-id')\n                          if(!this.state.cardsWon.includes(cardId.toString())) {\n                            this.flipCard(cardId)\n                          }\n                        }}\n                      />\n                    )\n                  })}\n\n\n                </div>\n\n                <div>\n                  {/*Sert a afficher les tokens recuperer par le joueur*/}\n                  <h5>Tokens CollectÃ©:<span id=\"result\">&nbsp;{this.state.tokenURIs.length}</span></h5>\n                  <div className=\"grid mb-4\" >\n\n                    { this.state.tokenURIs.map((tokenURI, key) => {\n                      return(\n                        <img\n                          key={key}\n                          src={tokenURI}\n                        />\n                      )\n                    })}\n\n                  </div>\n\n                </div>\n\n              </div>\n\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}