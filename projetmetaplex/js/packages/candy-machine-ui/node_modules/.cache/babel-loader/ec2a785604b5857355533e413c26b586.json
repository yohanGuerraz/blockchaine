{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletDisconnectionError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class BitKeepWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!window.bitkeep;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._publicKey;\n  }\n\n  connect() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && ((_a = window.bitkeep) === null || _a === void 0 ? void 0 : _a.solana);\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isBitKeep) throw new WalletNotInstalledError();\n        let account;\n\n        try {\n          account = yield wallet.getAccount();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          yield wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signTransaction(transaction)) || transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signAllTransactions(transactions)) || transactions;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","pollUntilReady","WalletAccountError","WalletDisconnectionError","WalletNotConnectedError","WalletNotFoundError","WalletNotInstalledError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","BitKeepWalletAdapter","constructor","config","_connecting","_wallet","_publicKey","ready","pollInterval","pollCount","publicKey","window","bitkeep","connecting","connected","connect","wallet","_a","solana","isBitKeep","account","getAccount","error","message","emit","disconnect","signTransaction","transaction","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}