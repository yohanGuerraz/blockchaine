{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletConnectionError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotFoundError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport class SlopeWalletAdapter extends BaseMessageSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!window.Slope;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._publicKey;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        if (!window.Slope) throw new WalletNotFoundError();\n        const wallet = new window.Slope();\n        let account;\n\n        try {\n          const {\n            data\n          } = yield wallet.connect();\n          if (!data.publicKey) throw new WalletConnectionError();\n          account = data.publicKey;\n        } catch (error) {\n          if (error instanceof WalletError) throw error;\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          const {\n            msg\n          } = yield wallet.disconnect();\n          if (msg !== 'ok') throw new WalletDisconnectionError(msg);\n        } catch (error) {\n          if (!(error instanceof WalletError)) {\n            // eslint-disable-next-line no-ex-assign\n            error = new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          }\n\n          this.emit('error', error);\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const message = bs58.encode(transaction.serializeMessage());\n          const {\n            msg,\n            data\n          } = yield wallet.signTransaction(message);\n          if (!data.publicKey || !data.signature) throw new WalletSignTransactionError(msg);\n          const publicKey = new PublicKey(data.publicKey);\n          const signature = bs58.decode(data.signature);\n          transaction.addSignature(publicKey, signature);\n          return transaction;\n        } catch (error) {\n          if (error instanceof WalletError) throw error;\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const messages = transactions.map(transaction => bs58.encode(transaction.serializeMessage()));\n          const {\n            msg,\n            data\n          } = yield wallet.signAllTransactions(messages);\n          const length = transactions.length;\n          if (!data.publicKey || ((_a = data.signatures) === null || _a === void 0 ? void 0 : _a.length) !== length) throw new WalletSignTransactionError(msg);\n          const publicKey = new PublicKey(data.publicKey);\n\n          for (let i = 0; i < length; i++) {\n            transactions[i].addSignature(publicKey, bs58.decode(data.signatures[i]));\n          }\n\n          return transactions;\n        } catch (error) {\n          if (error instanceof WalletError) throw error;\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const response = yield wallet.signMessage(message);\n          return bs58.decode(response.data.signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACIA,8BADJ,EAEIC,cAFJ,EAGIC,qBAHJ,EAIIC,wBAJJ,EAKIC,WALJ,EAMIC,uBANJ,EAOIC,mBAPJ,EAQIC,oBARJ,EASIC,0BATJ,QAUO,6BAVP;AAWA,SAASC,SAAT,QAAuC,iBAAvC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAwCA,OAAM,MAAOC,kBAAP,SAAkCX,8BAAlC,CAAgE;EAKlEY,cAAiD;IAAA,IAArCC,MAAqC,uEAAF,EAAE;IAC7C;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,UAAL,GAAkB,IAAlB;IAEA,IAAI,CAAC,KAAKC,KAAV,EAAiBhB,cAAc,CAAC,IAAD,EAAOY,MAAM,CAACK,YAAP,IAAuB,IAA9B,EAAoCL,MAAM,CAACM,SAAP,IAAoB,CAAxD,CAAd;EACpB;;EAEY,IAATC,SAAS;IACT,OAAO,KAAKJ,UAAZ;EACH;;EAEQ,IAALC,KAAK;IACL,OAAO,OAAOI,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAACA,MAAM,CAACC,KAAjD;EACH;;EAEa,IAAVC,UAAU;IACV,OAAO,KAAKT,WAAZ;EACH;;EAEY,IAATU,SAAS;IACT,OAAO,CAAC,CAAC,KAAKR,UAAd;EACH;;EAEKS,OAAO;;MACT,IAAI;QACA,IAAI,KAAKD,SAAL,IAAkB,KAAKD,UAA3B,EAAuC;QACvC,KAAKT,WAAL,GAAmB,IAAnB;QAEA,IAAI,CAACO,MAAM,CAACC,KAAZ,EAAmB,MAAM,IAAIhB,mBAAJ,EAAN;QAEnB,MAAMoB,MAAM,GAAG,IAAIL,MAAM,CAACC,KAAX,EAAf;QAEA,IAAIK,OAAJ;;QACA,IAAI;UACA,MAAM;YAAEC;UAAF,IAAW,MAAMF,MAAM,CAACD,OAAP,EAAvB;UAEA,IAAI,CAACG,IAAI,CAACR,SAAV,EAAqB,MAAM,IAAIlB,qBAAJ,EAAN;UAErByB,OAAO,GAAGC,IAAI,CAACR,SAAf;QACH,CAND,CAME,OAAOS,KAAP,EAAmB;UACjB,IAAIA,KAAK,YAAYzB,WAArB,EAAkC,MAAMyB,KAAN;UAClC,MAAM,IAAI3B,qBAAJ,CAA0B2B,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAjC,EAA0CD,KAA1C,CAAN;QACH;;QAED,IAAIT,SAAJ;;QACA,IAAI;UACAA,SAAS,GAAG,IAAIX,SAAJ,CAAckB,OAAd,CAAZ;QACH,CAFD,CAEE,OAAOE,KAAP,EAAmB;UACjB,MAAM,IAAItB,oBAAJ,CAAyBsB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAhC,EAAyCD,KAAzC,CAAN;QACH;;QAED,KAAKd,OAAL,GAAeW,MAAf;QACA,KAAKV,UAAL,GAAkBI,SAAlB;QAEA,KAAKW,IAAL,CAAU,SAAV;MACH,CA/BD,CA+BE,OAAOF,KAAP,EAAmB;QACjB,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB;QACA,MAAMA,KAAN;MACH,CAlCD,SAkCU;QACN,KAAKf,WAAL,GAAmB,KAAnB;MACH;IACJ;EAAA;;EAEKkB,UAAU;;MACZ,MAAMN,MAAM,GAAG,KAAKX,OAApB;;MACA,IAAIW,MAAJ,EAAY;QACR,KAAKX,OAAL,GAAe,IAAf;QACA,KAAKC,UAAL,GAAkB,IAAlB;;QAEA,IAAI;UACA,MAAM;YAAEiB;UAAF,IAAU,MAAMP,MAAM,CAACM,UAAP,EAAtB;UACA,IAAIC,GAAG,KAAK,IAAZ,EAAkB,MAAM,IAAI9B,wBAAJ,CAA6B8B,GAA7B,CAAN;QACrB,CAHD,CAGE,OAAOJ,KAAP,EAAmB;UACjB,IAAI,EAAEA,KAAK,YAAYzB,WAAnB,CAAJ,EAAqC;YACjC;YACAyB,KAAK,GAAG,IAAI1B,wBAAJ,CAA6B0B,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAApC,EAA6CD,KAA7C,CAAR;UACH;;UACD,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB;QACH;MACJ;;MAED,KAAKE,IAAL,CAAU,YAAV;IACH;EAAA;;EAEKG,eAAe,CAACC,WAAD,EAAyB;;MAC1C,IAAI;QACA,MAAMT,MAAM,GAAG,KAAKX,OAApB;QACA,IAAI,CAACW,MAAL,EAAa,MAAM,IAAIrB,uBAAJ,EAAN;;QAEb,IAAI;UACA,MAAMyB,OAAO,GAAGpB,IAAI,CAAC0B,MAAL,CAAYD,WAAW,CAACE,gBAAZ,EAAZ,CAAhB;UACA,MAAM;YAAEJ,GAAF;YAAOL;UAAP,IAAgB,MAAMF,MAAM,CAACQ,eAAP,CAAuBJ,OAAvB,CAA5B;UAEA,IAAI,CAACF,IAAI,CAACR,SAAN,IAAmB,CAACQ,IAAI,CAACU,SAA7B,EAAwC,MAAM,IAAI9B,0BAAJ,CAA+ByB,GAA/B,CAAN;UAExC,MAAMb,SAAS,GAAG,IAAIX,SAAJ,CAAcmB,IAAI,CAACR,SAAnB,CAAlB;UACA,MAAMkB,SAAS,GAAG5B,IAAI,CAAC6B,MAAL,CAAYX,IAAI,CAACU,SAAjB,CAAlB;UAEAH,WAAW,CAACK,YAAZ,CAAyBpB,SAAzB,EAAoCkB,SAApC;UACA,OAAOH,WAAP;QACH,CAXD,CAWE,OAAON,KAAP,EAAmB;UACjB,IAAIA,KAAK,YAAYzB,WAArB,EAAkC,MAAMyB,KAAN;UAClC,MAAM,IAAIrB,0BAAJ,CAA+BqB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;QACH;MACJ,CAnBD,CAmBE,OAAOA,KAAP,EAAmB;QACjB,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB;QACA,MAAMA,KAAN;MACH;IACJ;EAAA;;EAEKY,mBAAmB,CAACC,YAAD,EAA4B;;;;MACjD,IAAI;QACA,MAAMhB,MAAM,GAAG,KAAKX,OAApB;QACA,IAAI,CAACW,MAAL,EAAa,MAAM,IAAIrB,uBAAJ,EAAN;;QAEb,IAAI;UACA,MAAMsC,QAAQ,GAAGD,YAAY,CAACE,GAAb,CAAkBT,WAAD,IAAiBzB,IAAI,CAAC0B,MAAL,CAAYD,WAAW,CAACE,gBAAZ,EAAZ,CAAlC,CAAjB;UACA,MAAM;YAAEJ,GAAF;YAAOL;UAAP,IAAgB,MAAMF,MAAM,CAACe,mBAAP,CAA2BE,QAA3B,CAA5B;UAEA,MAAME,MAAM,GAAGH,YAAY,CAACG,MAA5B;UACA,IAAI,CAACjB,IAAI,CAACR,SAAN,IAAmB,WAAI,CAAC0B,UAAL,MAAe,IAAf,IAAeC,aAAf,GAAe,MAAf,GAAeA,GAAEF,MAAjB,MAA4BA,MAAnD,EAA2D,MAAM,IAAIrC,0BAAJ,CAA+ByB,GAA/B,CAAN;UAE3D,MAAMb,SAAS,GAAG,IAAIX,SAAJ,CAAcmB,IAAI,CAACR,SAAnB,CAAlB;;UAEA,KAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;YAC7BN,YAAY,CAACM,CAAD,CAAZ,CAAgBR,YAAhB,CAA6BpB,SAA7B,EAAwCV,IAAI,CAAC6B,MAAL,CAAYX,IAAI,CAACkB,UAAL,CAAgBE,CAAhB,CAAZ,CAAxC;UACH;;UAED,OAAON,YAAP;QACH,CAdD,CAcE,OAAOb,KAAP,EAAmB;UACjB,IAAIA,KAAK,YAAYzB,WAArB,EAAkC,MAAMyB,KAAN;UAClC,MAAM,IAAIrB,0BAAJ,CAA+BqB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;QACH;MACJ,CAtBD,CAsBE,OAAOA,KAAP,EAAmB;QACjB,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB;QACA,MAAMA,KAAN;MACH;;EACJ;;EAEKoB,WAAW,CAACnB,OAAD,EAAoB;;MACjC,IAAI;QACA,MAAMJ,MAAM,GAAG,KAAKX,OAApB;QACA,IAAI,CAACW,MAAL,EAAa,MAAM,IAAIrB,uBAAJ,EAAN;;QAEb,IAAI;UACA,MAAM6C,QAAQ,GAAG,MAAMxB,MAAM,CAACuB,WAAP,CAAmBnB,OAAnB,CAAvB;UACA,OAAOpB,IAAI,CAAC6B,MAAL,CAAYW,QAAQ,CAACtB,IAAT,CAAcU,SAA1B,CAAP;QACH,CAHD,CAGE,OAAOT,KAAP,EAAmB;UACjB,MAAM,IAAIrB,0BAAJ,CAA+BqB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;QACH;MACJ,CAVD,CAUE,OAAOA,KAAP,EAAmB;QACjB,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB;QACA,MAAMA,KAAN;MACH;IACJ;EAAA;;AAjKiE","names":["BaseMessageSignerWalletAdapter","pollUntilReady","WalletConnectionError","WalletDisconnectionError","WalletError","WalletNotConnectedError","WalletNotFoundError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","bs58","SlopeWalletAdapter","constructor","config","_connecting","_wallet","_publicKey","ready","pollInterval","pollCount","publicKey","window","Slope","connecting","connected","connect","wallet","account","data","error","message","emit","disconnect","msg","signTransaction","transaction","encode","serializeMessage","signature","decode","addSignature","signAllTransactions","transactions","messages","map","length","signatures","_a","i","signMessage","response"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}