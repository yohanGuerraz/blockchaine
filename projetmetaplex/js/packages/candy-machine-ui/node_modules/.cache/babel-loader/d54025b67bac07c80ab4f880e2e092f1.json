{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport const WalletProvider = _ref => {\n  let {\n    children,\n    wallets,\n    autoConnect = false,\n    onError: _onError = error => console.error(error),\n    localStorageKey = 'walletName'\n  } = _ref;\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [{\n    wallet,\n    adapter,\n    ready,\n    publicKey,\n    connected\n  }, setState] = useState(initialState);\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false);\n  const isConnecting = useRef(false);\n  const isDisconnecting = useRef(false);\n  const isUnloading = useRef(false); // Map of wallet names to wallets\n\n  const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n    walletsByName[wallet.name] = wallet;\n    return walletsByName;\n  }, {}), [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(() => {\n    const wallet = name && walletsByName[name] || null;\n    const adapter = wallet && wallet.adapter();\n\n    if (adapter) {\n      const {\n        ready,\n        publicKey,\n        connected\n      } = adapter;\n      setState({\n        wallet,\n        adapter,\n        connected,\n        publicKey,\n        ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n\n    (function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        isConnecting.current = true;\n        setConnecting(true);\n\n        try {\n          yield adapter.connect();\n        } catch (error) {\n          // Clear the selected wallet\n          setName(null); // Don't throw error, but onError will still be called\n        } finally {\n          setConnecting(false);\n          isConnecting.current = false;\n        }\n      });\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]); // If the window is closing or reloading, ignore disconnect and error events from the adapter\n\n  useEffect(() => {\n    function listener() {\n      isUnloading.current = true;\n    }\n\n    window.addEventListener('beforeunload', listener);\n    return () => window.removeEventListener('beforeunload', listener);\n  }, [isUnloading]); // Select a wallet by name\n\n  const select = useCallback(newName => __awaiter(void 0, void 0, void 0, function* () {\n    if (name === newName) return;\n    if (adapter) yield adapter.disconnect();\n    setName(newName);\n  }), [name, adapter, setName]); // Handle the adapter's ready event\n\n  const onReady = useCallback(() => setState(state => Object.assign(Object.assign({}, state), {\n    ready: true\n  })), [setState]); // Handle the adapter's connect event\n\n  const onConnect = useCallback(() => {\n    if (!adapter) return;\n    const {\n      connected,\n      publicKey,\n      ready\n    } = adapter;\n    setState(state => Object.assign(Object.assign({}, state), {\n      connected,\n      publicKey,\n      ready\n    }));\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  const onDisconnect = useCallback(() => {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading, setName]); // Handle the adapter's error event, and local errors\n\n  const onError = useCallback(error => {\n    // Call the provided error handler unless the window is unloading\n    if (!isUnloading.current) _onError(error);\n    return error;\n  }, [isUnloading, _onError]); // Connect the adapter to the wallet\n\n  const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isConnecting.current || connecting || disconnecting || connected) return;\n    if (!wallet || !adapter) throw onError(new WalletNotSelectedError());\n\n    if (!ready) {\n      // Clear the selected wallet\n      setName(null);\n\n      if (typeof window !== 'undefined') {\n        window.open(wallet.url, '_blank');\n      }\n\n      throw onError(new WalletNotReadyError());\n    }\n\n    isConnecting.current = true;\n    setConnecting(true);\n\n    try {\n      yield adapter.connect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and onError will also be called\n\n      throw error;\n    } finally {\n      setConnecting(false);\n      isConnecting.current = false;\n    }\n  }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]); // Disconnect the adapter from the wallet\n\n  const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isDisconnecting.current || disconnecting) return;\n    if (!adapter) return setName(null);\n    isDisconnecting.current = true;\n    setDisconnecting(true);\n\n    try {\n      yield adapter.disconnect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and onError will also be called\n\n      throw error;\n    } finally {\n      setDisconnecting(false);\n      isDisconnecting.current = false;\n    }\n  }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]); // Send a transaction using the provided connection\n\n  const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) throw onError(new WalletNotSelectedError());\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.sendTransaction(transaction, connection, options);\n  }), [adapter, onError, connected]); // Sign a transaction if the wallet supports it\n\n  const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter ? transaction => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signTransaction(transaction);\n  }) : undefined, [adapter, onError, connected]); // Sign multiple transactions if the wallet supports it\n\n  const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter ? transactions => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signAllTransactions(transactions);\n  }) : undefined, [adapter, onError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  const signMessage = useMemo(() => adapter && 'signMessage' in adapter ? message => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signMessage(message);\n  }) : undefined, [adapter, onError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return () => {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets,\n      autoConnect,\n      wallet,\n      adapter,\n      publicKey,\n      ready,\n      connected,\n      connecting,\n      disconnecting,\n      select,\n      connect,\n      disconnect,\n      sendTransaction,\n      signTransaction,\n      signAllTransactions,\n      signMessage\n    }\n  }, children);\n};","map":{"version":3,"mappings":"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","names":["WalletNotConnectedError","WalletNotReadyError","React","useCallback","useEffect","useMemo","useRef","useState","WalletNotSelectedError","useLocalStorage","WalletContext","initialState","wallet","adapter","ready","publicKey","connected","WalletProvider","children","wallets","autoConnect","onError","_onError","error","console","localStorageKey","name","setName","setState","connecting","setConnecting","disconnecting","setDisconnecting","isConnecting","isDisconnecting","isUnloading","walletsByName","reduce","current","connect","listener","window","addEventListener","removeEventListener","select","newName","__awaiter","disconnect","onReady","state","Object","onConnect","onDisconnect","open","url","sendTransaction","transaction","connection","options","signTransaction","undefined","signAllTransactions","transactions","signMessage","message","on","off","Provider","value"],"sourceRoot":"","sources":["../src/WalletProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}