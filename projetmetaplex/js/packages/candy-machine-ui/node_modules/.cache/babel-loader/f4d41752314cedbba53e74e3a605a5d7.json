{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectionError, WalletError, WalletKeypairError, WalletNotConnectedError, WalletSignTransactionError, WalletWindowBlockedError, WalletWindowClosedError } from '@solana/wallet-adapter-base';\nimport { Keypair } from '@solana/web3.js';\nimport OpenLogin, { OPENLOGIN_NETWORK } from '@toruslabs/openlogin';\nimport { getED25519Key } from '@toruslabs/openlogin-ed25519';\nexport class TorusWalletAdapter extends BaseSignerWalletAdapter {\n  constructor(config) {\n    super();\n    this._options = Object.assign({\n      uxMode: 'popup',\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, config.options);\n    this._connecting = false;\n    this._openLogin = null;\n    this._keypair = null;\n  }\n\n  get publicKey() {\n    var _a;\n\n    return ((_a = this._keypair) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined';\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._keypair;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let openLogin;\n        let privateKey;\n\n        try {\n          openLogin = new OpenLogin(this._options);\n          yield openLogin.init();\n          privateKey = openLogin.privKey;\n\n          if (!privateKey) {\n            let listener;\n\n            try {\n              privateKey = yield new Promise((resolve, reject) => {\n                listener = _ref => {\n                  let {\n                    reason\n                  } = _ref;\n\n                  switch (reason === null || reason === void 0 ? void 0 : reason.message.toLowerCase()) {\n                    case 'user closed popup':\n                      reason = new WalletWindowClosedError(reason.message, reason);\n                      break;\n\n                    case 'unable to open window':\n                      reason = new WalletWindowBlockedError(reason.message, reason);\n                      break;\n                  }\n\n                  reject(reason);\n                };\n\n                window.addEventListener('unhandledrejection', listener);\n                openLogin.login().then( // HACK: result.privKey is not padded to 64 bytes, use provider.privKey\n                result => resolve(openLogin.privKey), reason => listener({\n                  reason\n                }));\n              });\n            } finally {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              window.removeEventListener('unhandledrejection', listener);\n            }\n          }\n        } catch (error) {\n          if (error instanceof WalletError) throw error;\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let keypair;\n\n        try {\n          keypair = Keypair.fromSecretKey(getED25519Key(privateKey).sk);\n        } catch (error) {\n          throw new WalletKeypairError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._openLogin = openLogin;\n        this._keypair = keypair;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const openLogin = this._openLogin;\n\n      if (openLogin) {\n        this._openLogin = null;\n        this._keypair = null;\n\n        try {\n          yield openLogin.logout();\n          yield openLogin._cleanup();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const keypair = this._keypair;\n        if (!keypair) throw new WalletNotConnectedError();\n\n        try {\n          transaction.partialSign(keypair);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const keypair = this._keypair;\n        if (!keypair) throw new WalletNotConnectedError();\n\n        try {\n          for (const transaction of transactions) {\n            transaction.partialSign(keypair);\n          }\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","WalletConnectionError","WalletDisconnectionError","WalletError","WalletKeypairError","WalletNotConnectedError","WalletSignTransactionError","WalletWindowBlockedError","WalletWindowClosedError","Keypair","OpenLogin","OPENLOGIN_NETWORK","getED25519Key","TorusWalletAdapter","constructor","config","_options","Object","uxMode","network","MAINNET","options","_connecting","_openLogin","_keypair","publicKey","_a","ready","window","connecting","connected","connect","openLogin","privateKey","init","privKey","listener","Promise","resolve","reject","reason","message","toLowerCase","addEventListener","login","then","result","removeEventListener","error","keypair","fromSecretKey","sk","emit","disconnect","logout","_cleanup","signTransaction","transaction","partialSign","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}