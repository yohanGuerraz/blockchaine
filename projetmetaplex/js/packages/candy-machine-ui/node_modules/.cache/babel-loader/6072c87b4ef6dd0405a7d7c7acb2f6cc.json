{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nconst config_1 = require(\"./config\");\n\nconst version_1 = require(\"./version\");\n\nconst createSolanaTransactionFromBase64 = partiallySignedTx => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\n\nconst chainImplementation = _ref => {\n  let {\n    clusterUrl,\n    cluster,\n    publicKey,\n    signTransaction,\n    handleTransaction,\n    gatekeeperNetworkAddress,\n    stage\n  } = _ref;\n  common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n      return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), token => {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: common_gateway_react_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      }));\n    },\n    removeOnGatewayTokenChangeListener: listenerId => {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: async () => {\n      const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n      if (!onChainToken) return undefined;\n      return {\n        issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n        gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n        owner: onChainToken.owner.toBase58(),\n        state: common_gateway_react_1.State[onChainToken.state],\n        identifier: onChainToken.publicKey.toBase58(),\n        expiryTime: onChainToken.expiryTime\n      };\n    },\n    proveWalletOwnership: async () => {\n      const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n      return result.toString('base64');\n    },\n    handleUserSignedTransaction: async partiallySignedTx => {\n      if (handleTransaction) {\n        await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n      } // The user can still request broadcastTransaction to be false and then\n      // useGateway to instead retrieve the GatewayTokenTransaction instead of\n      // using a callback. The callback is optional so ignore it if it has not been supplied\n\n    },\n    chainType: common_gateway_react_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: cluster\n      },\n      headers: {\n        'X-Civic-Client': version_1.VERSION\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nconst useSolanaGateway = () => {\n  const {\n    gatewayToken,\n    gatewayTokenTransaction\n  } = (0, common_gateway_react_1.useGateway)();\n  const solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  const solanaGatewayTokenTransaction = gatewayTokenTransaction ? createSolanaTransactionFromBase64(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"names":["Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","common_gateway_react_1","web3_js_1","prove_solana_wallet_1","config_1","version_1","createSolanaTransactionFromBase64","partiallySignedTx","Transaction","from","Buffer","clusterUrl","cluster","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","logger","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","Promise","resolve","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","result","prove","makeConfig","toString","handleUserSignedTransaction","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","headers","VERSION","gatewayTokenTransaction","useGateway","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"sources":["C:/Users/Guerraz Yohan/Desktop/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/chainImplementation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst version_1 = require(\"./version\");\nconst createSolanaTransactionFromBase64 = (partiallySignedTx) => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\nconst chainImplementation = ({ clusterUrl, cluster, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n            return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            }));\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: common_gateway_react_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            if (handleTransaction) {\n                await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n            }\n            // The user can still request broadcastTransaction to be false and then\n            // useGateway to instead retrieve the GatewayTokenTransaction instead of\n            // using a callback. The callback is optional so ignore it if it has not been supplied\n        },\n        chainType: common_gateway_react_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: cluster },\n            headers: { 'X-Civic-Client': version_1.VERSION },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, common_gateway_react_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? createSolanaTransactionFromBase64(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}