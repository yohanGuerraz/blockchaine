{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = void 0;\n\nconst react_1 = require(\"react\");\n\nconst status_1 = require(\"../utils/status\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst config_1 = require(\"../config\");\n\nconst utils_1 = require(\"../useReducer/utils\");\n\nconst gatewayStatusToCivicPassAction = {\n  [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n  [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n  [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ERROR,\n  [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n  [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n  [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n  [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n  [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n  [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n  [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n  [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n  [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,\n  [types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR\n};\nconst validationProcessToGatewayStatus = {\n  [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n  [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n  [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n  [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED\n};\n\nconst logDebug = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.debug(`[useCivicPass] ${message}`, obj);\n};\n\nconst logError = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.error(`[useCivicPass] ${message}`, obj);\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nconst getCivicPassSrcUrl = (state, status) => {\n  const {\n    redirectUrl,\n    gatekeeperNetworkAddress,\n    stage,\n    walletAddress,\n    civicPass,\n    chainType,\n    ownerSigns\n  } = state;\n\n  if (!gatekeeperNetworkAddress || !walletAddress) {\n    logError('Required properties not present', {\n      gatekeeperNetworkAddress,\n      walletAddress\n    });\n    throw new Error(`Required properties not present ${{\n      gatekeeperNetworkAddress,\n      walletAddress\n    }}`);\n  }\n\n  const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n  const url = new URL(civicPassSrcUrl);\n  const action = gatewayStatusToCivicPassAction[status];\n  const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), {\n    redirectUrl,\n    networkAddress: gatekeeperNetworkAddress,\n    action,\n    wallet: walletAddress,\n    chain: chainType,\n    ownerSigns: ownerSigns ? 'true' : 'false'\n  }));\n  logDebug('Civic pass query params', {\n    searchParams: searchParams.toString(),\n    gatewayStatus: (0, status_1.statusDisplayValue)(status)\n  });\n  return `${url.href}?${searchParams.toString()}`;\n};\n\nconst reducer = (state, action) => {\n  var _a;\n\n  switch (action.type) {\n    case 'civicPass_check_token_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal),\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_check_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: true,\n          gatewayStatus: types_1.GatewayStatus.CHECKING,\n          iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING)\n        });\n      }\n\n    case 'civicPass_check_status_complete':\n      {\n        const {\n          payload\n        } = action.payload;\n        const {\n          status\n        } = payload;\n        const gatewayStatus = validationProcessToGatewayStatus[status];\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: false,\n          gatewayStatus\n        });\n      }\n\n    case 'userInteraction_check_gatewayToken_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_close':\n      {\n        const {\n          gatewayStatus\n        } = state;\n        const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED || gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP; // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n        // as the internal iframe state needs to be preserved\n\n        const renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED || gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n        return Object.assign({}, renderIframe ? Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe\n        }) : Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe,\n          refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED\n        }));\n      }\n\n    case 'civicPass_in_progress':\n      {\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n          renderIframe: true,\n          iframeMinimized: false,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.REQUESTED\n          })\n        });\n      }\n\n    case 'civicPass_issuance_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          powoRequested: 'solana',\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.VERIFIED,\n            responsePayload: {\n              [types_1.CivicPassMessageAction.ISSUANCE]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_issuance_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR\n      });\n\n    case 'civicPass_requested_retries_exhausted':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED,\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR)\n      });\n\n    case 'civicPass_error_user_retry':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.NOT_REQUESTED)\n      });\n\n    case 'civicPass_issuance_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'civicPass_refresh_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            responsePayload: {\n              [types_1.CivicPassMessageAction.REFRESH]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_refresh_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.CANCELLED,\n        gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED\n      });\n\n    case 'civicPass_refresh_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.FAILED,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          responsePayload: undefined\n        })\n      });\n\n    case 'civicPass_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus,\n        refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED ? types_1.RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n\n    case 'civicPass_vpn_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus\n      });\n\n    case 'civicPass_awaiting_owner_transaction':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION)\n      });\n\n    case 'civicPass_owner_transaction_timeout':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.reducer = reducer;\n\nconst useCivicPass = (_ref, state, dispatch) => {\n  let {\n    wallet\n  } = _ref;\n  const {\n    gatekeeperRecordState\n  } = state;\n\n  const getActionForIssuanceResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_issuance_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_issuance_failure'\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_issuance_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n        type: 'civicPass_in_progress'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForRefreshResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_refresh_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_refresh_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_refresh_failure'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForPowoResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'powoComplete'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForLocationNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_location_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForVpnNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_vpn_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForStaticResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_close'\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_error_user_retry'\n      }\n    };\n    const returnAction = actions[response.event];\n    return returnAction;\n  };\n\n  const getActionForStatusResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_check_status_complete',\n        payload: response\n      }\n    };\n    return actions[response.event];\n  };\n\n  const dispatchComplianceEventResult = response => {\n    const actions = {\n      [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n      [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n      [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n      [types_1.CivicPassMessageAction.ERROR]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.CHAIN_ERROR]: getActionForStaticResponse(response)\n    };\n    const action = actions[response.action];\n\n    if (action) {\n      logDebug('Successfully processed compliance event with action', action);\n      dispatch(action);\n    }\n  };\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n\n\n  (0, react_1.useEffect)(() => {\n    if (wallet && wallet.publicKey) {\n      logDebug('Current state', state);\n\n      const handler = async response => {\n        dispatchComplianceEventResult(response.data);\n      };\n\n      window.addEventListener('message', handler);\n      return () => {\n        logDebug('Removing event listener for compliance');\n        return window.removeEventListener('message', handler);\n      };\n    }\n\n    return () => {};\n  }, []);\n  /**\n   * We do not have a token and user is connecting from an unsupported country,\n   * so we show the country not supported screen\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED || gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  /**\n   * Check for the ongoing KYC status\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n      dispatch({\n        type: 'civicPass_check_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  return {\n    dispatchComplianceEventResult\n  };\n};\n\nexports.default = useCivicPass;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","reducer","react_1","require","status_1","logger_1","types_1","config_1","utils_1","gatewayStatusToCivicPassAction","GatewayStatus","PROOF_OF_WALLET_OWNERSHIP","CivicPassMessageAction","IN_REVIEW","TOKEN_IN_REVIEW","ERROR","ACTIVE","TOKEN_ACTIVE","REVOKED","TOKEN_REVOKED","FROZEN","TOKEN_FROZEN","REJECTED","TOKEN_REJECTED","LOCATION_NOT_SUPPORTED","FAILED_IP_CHECK","VPN_NOT_SUPPORTED","FAILED_VPN_CHECK","REFRESH_TOKEN_REQUIRED","REFRESH","CHECKING","STATUS","NOT_REQUESTED","ISSUANCE","COLLECTING_USER_INFORMATION","VALIDATING_USER_INFORMATION","USER_INFORMATION_VALIDATED","USER_INFORMATION_REJECTED","ExtendedGatewayStatus","AWAITING_OWNER_TRANSACTION","AWAITING_TRANSACTION_CONFIRMATION","CHAIN_TIMEOUT_ERROR","CHAIN_ERROR","validationProcessToGatewayStatus","ValidationStatus","COLLECTING","PROCESSING","FAILED","NOT_FOUND","COMPLETED","logDebug","message","obj","default","debug","logError","error","getCivicPassSrcUrl","state","status","redirectUrl","gatekeeperNetworkAddress","stage","walletAddress","civicPass","chainType","ownerSigns","Error","civicPassSrcUrl","getCivicPassEndpoint","url","URL","action","searchParams","URLSearchParams","assign","requestPayload","networkAddress","wallet","chain","toString","gatewayStatus","statusDisplayValue","href","_a","type","iframeMinimized","options","autoShowModal","renderIframe","iframeSrcUrl","CivicPassIssuanceStatus","REQUESTED","statusFromToken","token","payload","requiresRefresh","refreshTokenState","RefreshTokenState","requiresProofOfWalletOwnership","shouldRequestPowo","powoRequested","VERIFIED","responsePayload","resetState","NOT_REQUIRED","IN_PROGRESS","CANCELLED","undefined","gatekeeperRecordState","GatekeeperAPIStatus","ISSUED_LOCATION_NOT_SUPPORTED","REQUIRES_POWO","useCivicPass","dispatch","getActionForIssuanceResponse","response","actions","CivicPassMessageEventResult","SUCCESS","FAILURE","event","getActionForRefreshResponse","getActionForPowoResponse","getActionForLocationNotSupportedResponse","getActionForVpnNotSupportedResponse","getActionForStaticResponse","returnAction","getActionForStatusResponse","dispatchComplianceEventResult","useEffect","publicKey","handler","data","window","addEventListener","removeEventListener"],"sources":["C:/Users/Guerraz Yohan/Desktop/metaplex/js/packages/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useCivicPass.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reducer = void 0;\nconst react_1 = require(\"react\");\nconst status_1 = require(\"../utils/status\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst config_1 = require(\"../config\");\nconst utils_1 = require(\"../useReducer/utils\");\nconst gatewayStatusToCivicPassAction = {\n    [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n    [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n    [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ERROR,\n    [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n    [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n    [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n    [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n    [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n    [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n    [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n    [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n    [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,\n    [types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR,\n};\nconst validationProcessToGatewayStatus = {\n    [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n    [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n    [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n    [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED,\n};\nconst logDebug = (message, obj = null) => logger_1.default.debug(`[useCivicPass] ${message}`, obj);\nconst logError = (message, obj = null) => logger_1.default.error(`[useCivicPass] ${message}`, obj);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst getCivicPassSrcUrl = (state, status) => {\n    const { redirectUrl, gatekeeperNetworkAddress, stage, walletAddress, civicPass, chainType, ownerSigns } = state;\n    if (!gatekeeperNetworkAddress || !walletAddress) {\n        logError('Required properties not present', { gatekeeperNetworkAddress, walletAddress });\n        throw new Error(`Required properties not present ${{ gatekeeperNetworkAddress, walletAddress }}`);\n    }\n    const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n    const url = new URL(civicPassSrcUrl);\n    const action = gatewayStatusToCivicPassAction[status];\n    const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), { redirectUrl, networkAddress: gatekeeperNetworkAddress, action, wallet: walletAddress, chain: chainType, ownerSigns: ownerSigns ? 'true' : 'false' }));\n    logDebug('Civic pass query params', {\n        searchParams: searchParams.toString(),\n        gatewayStatus: (0, status_1.statusDisplayValue)(status),\n    });\n    return `${url.href}?${searchParams.toString()}`;\n};\nconst reducer = (state, action) => {\n    var _a;\n    switch (action.type) {\n        case 'civicPass_check_token_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal), renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_check_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true, gatewayStatus: types_1.GatewayStatus.CHECKING, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING) });\n        }\n        case 'civicPass_check_status_complete': {\n            const { payload } = action.payload;\n            const { status } = payload;\n            const gatewayStatus = validationProcessToGatewayStatus[status];\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus });\n        }\n        case 'userInteraction_check_gatewayToken_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_close': {\n            const { gatewayStatus } = state;\n            const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED ||\n                gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n            // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n            // as the internal iframe state needs to be preserved\n            const renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ||\n                gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n            return Object.assign({}, (renderIframe\n                ? Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe }) : Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe, refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED })));\n        }\n        case 'civicPass_in_progress': {\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION, renderIframe: true, iframeMinimized: false, civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.REQUESTED }) });\n        }\n        case 'civicPass_issuance_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, powoRequested: 'solana', iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.VERIFIED, responsePayload: {\n                        [types_1.CivicPassMessageAction.ISSUANCE]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_issuance_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR });\n        case 'civicPass_requested_retries_exhausted':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED, iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR) });\n        case 'civicPass_error_user_retry':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.NOT_REQUESTED) });\n        case 'civicPass_issuance_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED });\n        case 'civicPass_refresh_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: {\n                        [types_1.CivicPassMessageAction.REFRESH]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_refresh_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.CANCELLED, gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED });\n        case 'civicPass_refresh_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.FAILED, gatewayStatus: types_1.GatewayStatus.ERROR, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: undefined }) });\n        case 'civicPass_location_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus, refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED\n                    ? types_1.RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        case 'civicPass_vpn_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus });\n        case 'civicPass_awaiting_owner_transaction':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION) });\n        case 'civicPass_owner_transaction_timeout':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR) });\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\nconst useCivicPass = ({ wallet }, state, dispatch) => {\n    const { gatekeeperRecordState } = state;\n    const getActionForIssuanceResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_issuance_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_issuance_failure',\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_issuance_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n                type: 'civicPass_in_progress',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForRefreshResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_refresh_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_refresh_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_refresh_failure',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForPowoResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'powoComplete',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForLocationNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_location_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForVpnNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_vpn_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStaticResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_close',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_error_user_retry',\n            },\n        };\n        const returnAction = actions[response.event];\n        return returnAction;\n    };\n    const getActionForStatusResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_check_status_complete',\n                payload: response,\n            },\n        };\n        return actions[response.event];\n    };\n    const dispatchComplianceEventResult = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n            [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n            [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n            [types_1.CivicPassMessageAction.ERROR]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.CHAIN_ERROR]: getActionForStaticResponse(response),\n        };\n        const action = actions[response.action];\n        if (action) {\n            logDebug('Successfully processed compliance event with action', action);\n            dispatch(action);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey) {\n            logDebug('Current state', state);\n            const handler = async (response) => {\n                dispatchComplianceEventResult(response.data);\n            };\n            window.addEventListener('message', handler);\n            return () => {\n                logDebug('Removing event listener for compliance');\n                return window.removeEventListener('message', handler);\n            };\n        }\n        return () => { };\n    }, []);\n    /**\n     * We do not have a token and user is connecting from an unsupported country,\n     * so we show the country not supported screen\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED ||\n            gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n    }, [gatekeeperRecordState]);\n    /**\n     * Check for the ongoing KYC status\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n            dispatch({ type: 'civicPass_check_status' });\n        }\n    }, [gatekeeperRecordState]);\n    return { dispatchComplianceEventResult };\n};\nexports.default = useCivicPass;\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGX,eAAe,CAACS,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMM,8BAA8B,GAAG;EACnC,CAACH,OAAO,CAACI,aAAR,CAAsBC,yBAAvB,GAAmDL,OAAO,CAACM,sBAAR,CAA+BD,yBAD/C;EAEnC,CAACL,OAAO,CAACI,aAAR,CAAsBG,SAAvB,GAAmCP,OAAO,CAACM,sBAAR,CAA+BE,eAF/B;EAGnC,CAACR,OAAO,CAACI,aAAR,CAAsBK,KAAvB,GAA+BT,OAAO,CAACM,sBAAR,CAA+BG,KAH3B;EAInC,CAACT,OAAO,CAACI,aAAR,CAAsBM,MAAvB,GAAgCV,OAAO,CAACM,sBAAR,CAA+BK,YAJ5B;EAKnC,CAACX,OAAO,CAACI,aAAR,CAAsBQ,OAAvB,GAAiCZ,OAAO,CAACM,sBAAR,CAA+BO,aAL7B;EAMnC,CAACb,OAAO,CAACI,aAAR,CAAsBU,MAAvB,GAAgCd,OAAO,CAACM,sBAAR,CAA+BS,YAN5B;EAOnC,CAACf,OAAO,CAACI,aAAR,CAAsBY,QAAvB,GAAkChB,OAAO,CAACM,sBAAR,CAA+BW,cAP9B;EAQnC,CAACjB,OAAO,CAACI,aAAR,CAAsBc,sBAAvB,GAAgDlB,OAAO,CAACM,sBAAR,CAA+Ba,eAR5C;EASnC,CAACnB,OAAO,CAACI,aAAR,CAAsBgB,iBAAvB,GAA2CpB,OAAO,CAACM,sBAAR,CAA+Be,gBATvC;EAUnC,CAACrB,OAAO,CAACI,aAAR,CAAsBkB,sBAAvB,GAAgDtB,OAAO,CAACM,sBAAR,CAA+BiB,OAV5C;EAWnC,CAACvB,OAAO,CAACI,aAAR,CAAsBoB,QAAvB,GAAkCxB,OAAO,CAACM,sBAAR,CAA+BmB,MAX9B;EAYnC,CAACzB,OAAO,CAACI,aAAR,CAAsBsB,aAAvB,GAAuC1B,OAAO,CAACM,sBAAR,CAA+BqB,QAZnC;EAanC,CAAC3B,OAAO,CAACI,aAAR,CAAsBwB,2BAAvB,GAAqD5B,OAAO,CAACM,sBAAR,CAA+BqB,QAbjD;EAcnC,CAAC3B,OAAO,CAACI,aAAR,CAAsByB,2BAAvB,GAAqD7B,OAAO,CAACM,sBAAR,CAA+BqB,QAdjD;EAenC,CAAC3B,OAAO,CAACI,aAAR,CAAsB0B,0BAAvB,GAAoD9B,OAAO,CAACM,sBAAR,CAA+BqB,QAfhD;EAgBnC,CAAC3B,OAAO,CAACI,aAAR,CAAsB2B,yBAAvB,GAAmD/B,OAAO,CAACM,sBAAR,CAA+BqB,QAhB/C;EAiBnC,CAAC3B,OAAO,CAACgC,qBAAR,CAA8BC,0BAA/B,GAA4DjC,OAAO,CAACM,sBAAR,CAA+B4B,iCAjBxD;EAkBnC,CAAClC,OAAO,CAACgC,qBAAR,CAA8BG,mBAA/B,GAAqDnC,OAAO,CAACM,sBAAR,CAA+B8B;AAlBjD,CAAvC;AAoBA,MAAMC,gCAAgC,GAAG;EACrC,CAACrC,OAAO,CAACsC,gBAAR,CAAyBC,UAA1B,GAAuCvC,OAAO,CAACI,aAAR,CAAsBwB,2BADxB;EAErC,CAAC5B,OAAO,CAACsC,gBAAR,CAAyBE,UAA1B,GAAuCxC,OAAO,CAACI,aAAR,CAAsByB,2BAFxB;EAGrC,CAAC7B,OAAO,CAACsC,gBAAR,CAAyB/B,SAA1B,GAAsCP,OAAO,CAACI,aAAR,CAAsByB,2BAHvB;EAIrC,CAAC7B,OAAO,CAACsC,gBAAR,CAAyBG,MAA1B,GAAmCzC,OAAO,CAACI,aAAR,CAAsB2B,yBAJpB;EAKrC,CAAC/B,OAAO,CAACsC,gBAAR,CAAyBI,SAA1B,GAAsC1C,OAAO,CAACI,aAAR,CAAsBsB,aALvB;EAMrC,CAAC1B,OAAO,CAACsC,gBAAR,CAAyBK,SAA1B,GAAsC3C,OAAO,CAACI,aAAR,CAAsB0B;AANvB,CAAzC;;AAQA,MAAMc,QAAQ,GAAG,UAACC,OAAD;EAAA,IAAUC,GAAV,uEAAgB,IAAhB;EAAA,OAAyB/C,QAAQ,CAACgD,OAAT,CAAiBC,KAAjB,CAAwB,kBAAiBH,OAAQ,EAAjD,EAAoDC,GAApD,CAAzB;AAAA,CAAjB;;AACA,MAAMG,QAAQ,GAAG,UAACJ,OAAD;EAAA,IAAUC,GAAV,uEAAgB,IAAhB;EAAA,OAAyB/C,QAAQ,CAACgD,OAAT,CAAiBG,KAAjB,CAAwB,kBAAiBL,OAAQ,EAAjD,EAAoDC,GAApD,CAAzB;AAAA,CAAjB,C,CACA;;;AACA,MAAMK,kBAAkB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC1C,MAAM;IAAEC,WAAF;IAAeC,wBAAf;IAAyCC,KAAzC;IAAgDC,aAAhD;IAA+DC,SAA/D;IAA0EC,SAA1E;IAAqFC;EAArF,IAAoGR,KAA1G;;EACA,IAAI,CAACG,wBAAD,IAA6B,CAACE,aAAlC,EAAiD;IAC7CR,QAAQ,CAAC,iCAAD,EAAoC;MAAEM,wBAAF;MAA4BE;IAA5B,CAApC,CAAR;IACA,MAAM,IAAII,KAAJ,CAAW,mCAAkC;MAAEN,wBAAF;MAA4BE;IAA5B,CAA4C,EAAzF,CAAN;EACH;;EACD,MAAMK,eAAe,GAAG,CAAC,GAAG7D,QAAQ,CAAC8D,oBAAb,EAAmCP,KAAnC,CAAxB;EACA,MAAMQ,GAAG,GAAG,IAAIC,GAAJ,CAAQH,eAAR,CAAZ;EACA,MAAMI,MAAM,GAAG/D,8BAA8B,CAACkD,MAAD,CAA7C;EACA,MAAMc,YAAY,GAAG,IAAIC,eAAJ,CAAoB7E,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBX,SAAS,CAACY,cAA5B,CAAd,EAA2D;IAAEhB,WAAF;IAAeiB,cAAc,EAAEhB,wBAA/B;IAAyDW,MAAzD;IAAiEM,MAAM,EAAEf,aAAzE;IAAwFgB,KAAK,EAAEd,SAA/F;IAA0GC,UAAU,EAAEA,UAAU,GAAG,MAAH,GAAY;EAA5I,CAA3D,CAApB,CAArB;EACAhB,QAAQ,CAAC,yBAAD,EAA4B;IAChCuB,YAAY,EAAEA,YAAY,CAACO,QAAb,EADkB;IAEhCC,aAAa,EAAE,CAAC,GAAG7E,QAAQ,CAAC8E,kBAAb,EAAiCvB,MAAjC;EAFiB,CAA5B,CAAR;EAIA,OAAQ,GAAEW,GAAG,CAACa,IAAK,IAAGV,YAAY,CAACO,QAAb,EAAwB,EAA9C;AACH,CAfD;;AAgBA,MAAM/E,OAAO,GAAG,CAACyD,KAAD,EAAQc,MAAR,KAAmB;EAC/B,IAAIY,EAAJ;;EACA,QAAQZ,MAAM,CAACa,IAAf;IACI,KAAK,8BAAL;MAAqC;QACjC,OAAOxF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,EAAE,CAACF,EAAE,GAAG1B,KAAK,CAAC6B,OAAZ,MAAyB,IAAzB,IAAiCH,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACI,aAA/D,CAAnB;UAAkGC,YAAY,EAAE,IAAhH;UAAsHC,YAAY,EAAEhC,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,GACzKlC,KAAK,CAACgC,YADmK,GAEzKjC,kBAAkB,CAACC,KAAD,EAAQ,CAAC,GAAGlD,OAAO,CAACqF,eAAZ,EAA6BnC,KAA7B,EAAoCc,MAAM,CAACsB,KAA3C,CAAR;QAFmB,CAAxC,CAAP;MAGH;;IACD,KAAK,wBAAL;MAA+B;QAC3B,OAAOjG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,IAAnB;UAAyBG,YAAY,EAAE,IAAvC;UAA6CR,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBoB,QAAlF;UAA4F4D,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBoB,QAA9B;QAA5H,CAAxC,CAAP;MACH;;IACD,KAAK,iCAAL;MAAwC;QACpC,MAAM;UAAEiE;QAAF,IAAcvB,MAAM,CAACuB,OAA3B;QACA,MAAM;UAAEpC;QAAF,IAAaoC,OAAnB;QACA,MAAMd,aAAa,GAAGtC,gCAAgC,CAACgB,MAAD,CAAtD;QACA,OAAO9D,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,IAAnB;UAAyBG,YAAY,EAAE,KAAvC;UAA8CR;QAA9C,CAAxC,CAAP;MACH;;IACD,KAAK,2CAAL;MAAkD;QAC9C,OAAOpF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,KAAnB;UAA0BG,YAAY,EAAE,IAAxC;UAA8CC,YAAY,EAAEhC,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,GACjGlC,KAAK,CAACgC,YAD2F,GAEjGjC,kBAAkB,CAACC,KAAD,EAAQ,CAAC,GAAGlD,OAAO,CAACqF,eAAZ,EAA6BnC,KAA7B,EAAoCc,MAAM,CAACsB,KAA3C,CAAR;QAFmB,CAAxC,CAAP;MAGH;;IACD,KAAK,iBAAL;MAAwB;QACpB,MAAM;UAAEb;QAAF,IAAoBvB,KAA1B;QACA,MAAMsC,eAAe,GAAGf,aAAa,KAAK3E,OAAO,CAACI,aAAR,CAAsBkB,sBAAxC,IACpBqD,aAAa,KAAK3E,OAAO,CAACI,aAAR,CAAsBC,yBAD5C,CAFoB,CAIpB;QACA;;QACA,MAAM8E,YAAY,GAAG/B,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,IACjBX,aAAa,KAAK3E,OAAO,CAACgC,qBAAR,CAA8BC,0BADpD;QAEA,OAAO1C,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAmBc,YAAY,GAChC5F,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,IAAnB;UAAyBG;QAAzB,CAAxC,CADgC,GACmD5F,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAE4B,eAAe,EAAE,IAAnB;UAAyBG,YAAzB;UAAuCQ,iBAAiB,EAAED,eAAe,GAAGtC,KAAK,CAACuC,iBAAT,GAA6B3F,OAAO,CAAC4F,iBAAR,CAA0BjD;QAAhI,CAAxC,CADlF,CAAP;MAEH;;IACD,KAAK,uBAAL;MAA8B;QAC1B,OAAOpD,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAEuB,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBwB,2BAAvC;UAAoEuD,YAAY,EAAE,IAAlF;UAAwFH,eAAe,EAAE,KAAzG;UAAgHtB,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;YAAEL,MAAM,EAAErD,OAAO,CAACqF,uBAAR,CAAgCC;UAA1C,CAAlD;QAA3H,CAAxC,CAAP;MACH;;IACD,KAAK,4BAAL;MAAmC;QAC/B,MAAM;UAAE1B;QAAF,IAAiBR,KAAvB;QACA,MAAM;UAAEqC,OAAF;UAAWI;QAAX,IAA8C3B,MAAM,CAACuB,OAA3D;QACA,MAAMK,iBAAiB,GAAGlC,UAAU,GAAG,KAAH,GAAWiC,8BAA/C;QACA,MAAMlB,aAAa,GAAGmB,iBAAiB,GAAG9F,OAAO,CAACI,aAAR,CAAsBC,yBAAzB,GAAqDL,OAAO,CAACI,aAAR,CAAsBG,SAAlH;QACA,OAAOhB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAEuB,aAAF;UAAiBQ,YAAY,EAAE,CAACvB,UAAhC;UAA4CoB,eAAe,EAAEpB,UAA7D;UAAyEmC,aAAa,EAAE,QAAxF;UAAkGX,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQuB,aAAR,CAAlI;UAA0JjB,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;YAAEL,MAAM,EAAErD,OAAO,CAACqF,uBAAR,CAAgCW,QAA1C;YAAoDC,eAAe,EAAE;cAC/T,CAACjG,OAAO,CAACM,sBAAR,CAA+BqB,QAAhC,GAA2C;gBACvC8D,OADuC;gBAEvCI,8BAA8B,EAAEC;cAFO;YADoR;UAArE,CAAlD;QAArK,CAAxC,CAAP;MAMH;;IACD,KAAK,4BAAL;MACI,OAAOvG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAE4B,eAAe,EAAE,KAAnB;QAA0BG,YAAY,EAAE,IAAxC;QAA8CR,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK;MAAnF,CAAjE,CAAP;;IACJ,KAAK,uCAAL;MACI,OAAOlB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAEuC,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BO,YAA/C;QAA6DnB,eAAe,EAAE,KAA9E;QAAqFG,YAAY,EAAE,IAAnG;QAAyGR,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK,KAA9I;QAAqJ2E,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBK,KAA9B;MAArL,CAAjE,CAAP;;IACJ,KAAK,4BAAL;MACI,OAAOlB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAE4B,eAAe,EAAE,KAAnB;QAA0BG,YAAY,EAAE,IAAxC;QAA8CR,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBsB,aAAnF;QAAkG0D,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBsB,aAA9B;MAAlI,CAAjE,CAAP;;IACJ,KAAK,8BAAL;MACI,OAAOnC,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAEuB,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBsB;MAAvC,CAAjE,CAAP;;IACJ,KAAK,2BAAL;MAAkC;QAC9B,MAAM;UAAEkC;QAAF,IAAiBR,KAAvB;QACA,MAAM;UAAEqC,OAAF;UAAWI;QAAX,IAA8C3B,MAAM,CAACuB,OAA3D;QACA,MAAMK,iBAAiB,GAAGlC,UAAU,GAAG,KAAH,GAAWiC,8BAA/C;QACA,MAAMlB,aAAa,GAAGmB,iBAAiB,GAAG9F,OAAO,CAACI,aAAR,CAAsBC,yBAAzB,GAAqDL,OAAO,CAACI,aAAR,CAAsBG,SAAlH;QACA,OAAOhB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;UAAEuB,aAAF;UAAiBQ,YAAY,EAAE,CAACvB,UAAhC;UAA4CoB,eAAe,EAAEpB,UAA7D;UAAyEwB,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQuB,aAAR,CAAzG;UAAiIgB,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BQ,WAA9K;UAA2L1C,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;YAAEuC,eAAe,EAAE;cAC9S,CAACjG,OAAO,CAACM,sBAAR,CAA+BiB,OAAhC,GAA0C;gBACtCkE,OADsC;gBAEtCI,8BAA8B,EAAEC;cAFM;YADoQ;UAAnB,CAAlD;QAAtM,CAAxC,CAAP;MAMH;;IACD,KAAK,6BAAL;MACI,OAAOvG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAEuC,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BS,SAA/C;QAA0D1B,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBkB;MAA/F,CAAjE,CAAP;;IACJ,KAAK,2BAAL;MACI,OAAO/B,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;QAAEuC,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BnD,MAA/C;QAAuDkC,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK,KAA5F;QAAmGiD,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;UAAEuC,eAAe,EAAEK;QAAnB,CAAlD;MAA9G,CAAjE,CAAP;;IACJ,KAAK,kCAAL;MACI,OAAO/G,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;QAAE4B,eAAe,EAAE,IAAnB;QAAyBG,YAAY,EAAE,KAAvC;QAA8CR,aAAa,EAAEvB,KAAK,CAACuB,aAAnE;QAAkFgB,iBAAiB,EAAEvC,KAAK,CAACmD,qBAAN,KAAgCvG,OAAO,CAACwG,mBAAR,CAA4BC,6BAA5D,GAC1IzG,OAAO,CAAC4F,iBAAR,CAA0Bc,aADgH,GAE1ItD,KAAK,CAACuC;MAF+B,CAAxC,CAAP;;IAGJ,KAAK,6BAAL;MACI,OAAOpG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;QAAE4B,eAAe,EAAE,IAAnB;QAAyBG,YAAY,EAAE,KAAvC;QAA8CR,aAAa,EAAEvB,KAAK,CAACuB;MAAnE,CAAxC,CAAP;;IACJ,KAAK,sCAAL;MACI,OAAOpF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;QAAE4B,eAAe,EAAE,KAAnB;QAA0BG,YAAY,EAAE,IAAxC;QAA8CR,aAAa,EAAE3E,OAAO,CAACgC,qBAAR,CAA8BC,0BAA3F;QAAuHmD,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACgC,qBAAR,CAA8BC,0BAAtC;MAAvJ,CAAxC,CAAP;;IACJ,KAAK,qCAAL;MACI,OAAO1C,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;QAAE4B,eAAe,EAAE,KAAnB;QAA0BG,YAAY,EAAE,IAAxC;QAA8CR,aAAa,EAAE3E,OAAO,CAACgC,qBAAR,CAA8BG,mBAA3F;QAAgHiD,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACgC,qBAAR,CAA8BG,mBAAtC;MAAhJ,CAAxC,CAAP;;IACJ;MACI,OAAOiB,KAAP;EAjFR;AAmFH,CArFD;;AAsFA3D,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AACA,MAAMgH,YAAY,GAAG,OAAavD,KAAb,EAAoBwD,QAApB,KAAiC;EAAA,IAAhC;IAAEpC;EAAF,CAAgC;EAClD,MAAM;IAAE+B;EAAF,IAA4BnD,KAAlC;;EACA,MAAMyD,4BAA4B,GAAIC,QAAD,IAAc;IAC/C,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE,4BADqC;QAE3CU,OAAO,EAAEqB;MAFkC,CADnC;MAKZ,CAAC9G,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;QAC3CnC,IAAI,EAAE;MADqC,CALnC;MAQZ,CAAC/E,OAAO,CAACgH,2BAAR,CAAoCX,SAArC,GAAiD;QAC7CtB,IAAI,EAAE;MADuC,CARrC;MAWZ,CAAC/E,OAAO,CAACgH,2BAAR,CAAoCZ,WAArC,GAAmD;QAC/CrB,IAAI,EAAE;MADyC;IAXvC,CAAhB;IAeA,OAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CAjBD;;EAkBA,MAAMC,2BAA2B,GAAIN,QAAD,IAAc;IAC9C,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE,2BADqC;QAE3CU,OAAO,EAAEqB;MAFkC,CADnC;MAKZ,CAAC9G,OAAO,CAACgH,2BAAR,CAAoCX,SAArC,GAAiD;QAC7CtB,IAAI,EAAE;MADuC,CALrC;MAQZ,CAAC/E,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;QAC3CnC,IAAI,EAAE;MADqC;IARnC,CAAhB;IAYA,OAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CAdD;;EAeA,MAAME,wBAAwB,GAAIP,QAAD,IAAc;IAC3C,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE;MADqC;IADnC,CAAhB;IAKA,OAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CAPD;;EAQA,MAAMG,wCAAwC,GAAIR,QAAD,IAAc;IAC3D,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE;MADqC;IADnC,CAAhB;IAKA,OAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CAPD;;EAQA,MAAMI,mCAAmC,GAAIT,QAAD,IAAc;IACtD,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE;MADqC;IADnC,CAAhB;IAKA,OAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CAPD;;EAQA,MAAMK,0BAA0B,GAAIV,QAAD,IAAc;IAC7C,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE;MADqC,CADnC;MAIZ,CAAC/E,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;QAC3CnC,IAAI,EAAE;MADqC;IAJnC,CAAhB;IAQA,MAAM0C,YAAY,GAAGV,OAAO,CAACD,QAAQ,CAACK,KAAV,CAA5B;IACA,OAAOM,YAAP;EACH,CAXD;;EAYA,MAAMC,0BAA0B,GAAIZ,QAAD,IAAc;IAC7C,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;QAC3ClC,IAAI,EAAE,iCADqC;QAE3CU,OAAO,EAAEqB;MAFkC;IADnC,CAAhB;IAMA,OAAOC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;EACH,CARD;;EASA,MAAMQ,6BAA6B,GAAIb,QAAD,IAAc;IAChD,MAAMC,OAAO,GAAG;MACZ,CAAC/G,OAAO,CAACM,sBAAR,CAA+BqB,QAAhC,GAA2CkF,4BAA4B,CAACC,QAAD,CAD3D;MAEZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BD,yBAAhC,GAA4DgH,wBAAwB,CAACP,QAAD,CAFxE;MAGZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BE,eAAhC,GAAkDgH,0BAA0B,CAACV,QAAD,CAHhE;MAIZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BK,YAAhC,GAA+C6G,0BAA0B,CAACV,QAAD,CAJ7D;MAKZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BS,YAAhC,GAA+CyG,0BAA0B,CAACV,QAAD,CAL7D;MAMZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BW,cAAhC,GAAiDuG,0BAA0B,CAACV,QAAD,CAN/D;MAOZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BO,aAAhC,GAAgD2G,0BAA0B,CAACV,QAAD,CAP9D;MAQZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+Ba,eAAhC,GAAkDmG,wCAAwC,CAACR,QAAD,CAR9E;MASZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+Be,gBAAhC,GAAmDkG,mCAAmC,CAACT,QAAD,CAT1E;MAUZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BiB,OAAhC,GAA0C6F,2BAA2B,CAACN,QAAD,CAVzD;MAWZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BmB,MAAhC,GAAyCiG,0BAA0B,CAACZ,QAAD,CAXvD;MAYZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+BG,KAAhC,GAAwC+G,0BAA0B,CAACV,QAAD,CAZtD;MAaZ,CAAC9G,OAAO,CAACM,sBAAR,CAA+B8B,WAAhC,GAA8CoF,0BAA0B,CAACV,QAAD;IAb5D,CAAhB;IAeA,MAAM5C,MAAM,GAAG6C,OAAO,CAACD,QAAQ,CAAC5C,MAAV,CAAtB;;IACA,IAAIA,MAAJ,EAAY;MACRtB,QAAQ,CAAC,qDAAD,EAAwDsB,MAAxD,CAAR;MACA0C,QAAQ,CAAC1C,MAAD,CAAR;IACH;EACJ,CArBD;EAsBA;AACJ;AACA;AACA;;;EACI,CAAC,GAAGtE,OAAO,CAACgI,SAAZ,EAAuB,MAAM;IACzB,IAAIpD,MAAM,IAAIA,MAAM,CAACqD,SAArB,EAAgC;MAC5BjF,QAAQ,CAAC,eAAD,EAAkBQ,KAAlB,CAAR;;MACA,MAAM0E,OAAO,GAAG,MAAOhB,QAAP,IAAoB;QAChCa,6BAA6B,CAACb,QAAQ,CAACiB,IAAV,CAA7B;MACH,CAFD;;MAGAC,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCH,OAAnC;MACA,OAAO,MAAM;QACTlF,QAAQ,CAAC,wCAAD,CAAR;QACA,OAAOoF,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCJ,OAAtC,CAAP;MACH,CAHD;IAIH;;IACD,OAAO,MAAM,CAAG,CAAhB;EACH,CAbD,EAaG,EAbH;EAcA;AACJ;AACA;AACA;;EACI,CAAC,GAAGlI,OAAO,CAACgI,SAAZ,EAAuB,MAAM;IACzB,IAAIrB,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4BtF,sBAAtD,IACAqF,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4BpF,iBAD1D,EAC6E;MACzEwF,QAAQ,CAAC;QAAE7B,IAAI,EAAE;MAAR,CAAD,CAAR;IACH;EACJ,CALD,EAKG,CAACwB,qBAAD,CALH;EAMA;AACJ;AACA;;EACI,CAAC,GAAG3G,OAAO,CAACgI,SAAZ,EAAuB,MAAM;IACzB,IAAIrB,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4B9E,aAA1D,EAAyE;MACrEkF,QAAQ,CAAC;QAAE7B,IAAI,EAAE;MAAR,CAAD,CAAR;IACH;EACJ,CAJD,EAIG,CAACwB,qBAAD,CAJH;EAKA,OAAO;IAAEoB;EAAF,CAAP;AACH,CA3ID;;AA4IAlI,OAAO,CAACsD,OAAR,GAAkB4D,YAAlB"},"metadata":{},"sourceType":"script"}