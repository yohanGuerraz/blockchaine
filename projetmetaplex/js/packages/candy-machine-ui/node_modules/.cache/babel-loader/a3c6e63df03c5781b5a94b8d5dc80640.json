{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport class Coin98WalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!window.coin98;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected());\n  }\n\n  connect() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && ((_a = window.coin98) === null || _a === void 0 ? void 0 : _a.sol);\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isCoin98) throw new WalletNotInstalledError();\n        let account;\n\n        try {\n          [account] = yield wallet.connect();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n        yield wallet.disconnect();\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const response = yield wallet.request({\n            method: 'sol_sign',\n            params: [transaction]\n          });\n          const publicKey = new PublicKey(response.publicKey);\n          const signature = bs58.decode(response.signature);\n          transaction.addSignature(publicKey, signature);\n          return transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedTransactions = [];\n\n      for (const transaction of transactions) {\n        signedTransactions.push(yield this.signTransaction(transaction));\n      }\n\n      return signedTransactions;\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","pollUntilReady","WalletAccountError","WalletNotConnectedError","WalletNotFoundError","WalletNotInstalledError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","bs58","Coin98WalletAdapter","constructor","config","_connecting","_wallet","_publicKey","ready","pollInterval","pollCount","publicKey","window","coin98","connecting","connected","_a","isConnected","connect","wallet","sol","isCoin98","account","error","message","emit","disconnect","signTransaction","transaction","response","request","method","params","signature","decode","addSignature","signAllTransactions","transactions","signedTransactions","push"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}