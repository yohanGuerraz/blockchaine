{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\nexport class LedgerWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._disconnected = () => {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\n    this._connecting = false;\n    this._transport = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!navigator.hid;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._transport;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let transport;\n\n        try {\n          transport = yield TransportWebHid.create();\n        } catch (error) {\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = yield getPublicKey(transport, this._derivationPath);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        transport.on('disconnect', this._disconnected);\n        this._transport = transport;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n\n        try {\n          yield transport.close();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const signature = yield signTransaction(transport, transaction, this._derivationPath);\n          transaction.addSignature(publicKey, signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const derivationPath = this._derivationPath;\n\n          for (const transaction of transactions) {\n            const signature = yield signTransaction(transport, transaction, derivationPath);\n            transaction.addSignature(publicKey, signature);\n          }\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,SACIC,uBADJ,EAEIC,qBAFJ,EAGIC,uBAHJ,EAIIC,wBAJJ,EAKIC,uBALJ,EAMIC,oBANJ,EAOIC,0BAPJ,QAQO,6BARP;AAUA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,eAA1C,QAAiE,QAAjE;AAMA,OAAM,MAAOC,mBAAP,SAAmCV,uBAAnC,CAA0D;EAM5DW,cAAkD;IAAA,IAAtCC,MAAsC,uEAAF,EAAE;IAC9C;;IAqHI,qBAAgB,MAAK;MACzB,MAAMC,SAAS,GAAG,KAAKC,UAAvB;;MACA,IAAID,SAAJ,EAAe;QACXA,SAAS,CAACE,GAAV,CAAc,YAAd,EAA4B,KAAKC,aAAjC;QAEA,KAAKF,UAAL,GAAkB,IAAlB;QACA,KAAKG,UAAL,GAAkB,IAAlB;QAEA,KAAKC,IAAL,CAAU,OAAV,EAAmB,IAAIhB,uBAAJ,EAAnB;QACA,KAAKgB,IAAL,CAAU,YAAV;MACH;IACJ,CAXO;;IApHJ,KAAKC,eAAL,GAAuBP,MAAM,CAACQ,cAAP,IAAyBb,iBAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjE;IACA,KAAKc,WAAL,GAAmB,KAAnB;IACA,KAAKP,UAAL,GAAkB,IAAlB;IACA,KAAKG,UAAL,GAAkB,IAAlB;EACH;;EAEY,IAATK,SAAS;IACT,OAAO,KAAKL,UAAZ;EACH;;EAEQ,IAALM,KAAK;IACL,OAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAACC,SAAS,CAACC,GAApD;EACH;;EAEa,IAAVC,UAAU;IACV,OAAO,KAAKN,WAAZ;EACH;;EAEY,IAATO,SAAS;IACT,OAAO,CAAC,CAAC,KAAKd,UAAd;EACH;;EAEKe,OAAO;;MACT,IAAI;QACA,IAAI,KAAKD,SAAL,IAAkB,KAAKD,UAA3B,EAAuC;QACvC,KAAKN,WAAL,GAAmB,IAAnB;QAEA,IAAIR,SAAJ;;QACA,IAAI;UACAA,SAAS,GAAG,MAAMd,eAAe,CAAC+B,MAAhB,EAAlB;QACH,CAFD,CAEE,OAAOC,KAAP,EAAmB;UACjB,MAAM,IAAI9B,qBAAJ,CAA0B8B,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAjC,EAA0CD,KAA1C,CAAN;QACH;;QAED,IAAIT,SAAJ;;QACA,IAAI;UACAA,SAAS,GAAG,MAAMd,YAAY,CAACK,SAAD,EAAY,KAAKM,eAAjB,CAA9B;QACH,CAFD,CAEE,OAAOY,KAAP,EAAmB;UACjB,MAAM,IAAI1B,oBAAJ,CAAyB0B,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAhC,EAAyCD,KAAzC,CAAN;QACH;;QAEDlB,SAAS,CAACoB,EAAV,CAAa,YAAb,EAA2B,KAAKjB,aAAhC;QAEA,KAAKF,UAAL,GAAkBD,SAAlB;QACA,KAAKI,UAAL,GAAkBK,SAAlB;QAEA,KAAKJ,IAAL,CAAU,SAAV;MACH,CAxBD,CAwBE,OAAOa,KAAP,EAAmB;QACjB,KAAKb,IAAL,CAAU,OAAV,EAAmBa,KAAnB;QACA,MAAMA,KAAN;MACH,CA3BD,SA2BU;QACN,KAAKV,WAAL,GAAmB,KAAnB;MACH;IACJ;EAAA;;EAEKa,UAAU;;MACZ,MAAMrB,SAAS,GAAG,KAAKC,UAAvB;;MACA,IAAID,SAAJ,EAAe;QACXA,SAAS,CAACE,GAAV,CAAc,YAAd,EAA4B,KAAKC,aAAjC;QAEA,KAAKF,UAAL,GAAkB,IAAlB;QACA,KAAKG,UAAL,GAAkB,IAAlB;;QAEA,IAAI;UACA,MAAMJ,SAAS,CAACsB,KAAV,EAAN;QACH,CAFD,CAEE,OAAOJ,KAAP,EAAmB;UACjB,KAAKb,IAAL,CAAU,OAAV,EAAmB,IAAIf,wBAAJ,CAA6B4B,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAApC,EAA6CD,KAA7C,CAAnB;QACH;MACJ;;MAED,KAAKb,IAAL,CAAU,YAAV;IACH;EAAA;;EAEKT,eAAe,CAAC2B,WAAD,EAAyB;;MAC1C,IAAI;QACA,MAAMvB,SAAS,GAAG,KAAKC,UAAvB;QACA,MAAMQ,SAAS,GAAG,KAAKL,UAAvB;QACA,IAAI,CAACJ,SAAD,IAAc,CAACS,SAAnB,EAA8B,MAAM,IAAIlB,uBAAJ,EAAN;;QAE9B,IAAI;UACA,MAAMiC,SAAS,GAAG,MAAM5B,eAAe,CAACI,SAAD,EAAYuB,WAAZ,EAAyB,KAAKjB,eAA9B,CAAvC;UACAiB,WAAW,CAACE,YAAZ,CAAyBhB,SAAzB,EAAoCe,SAApC;QACH,CAHD,CAGE,OAAON,KAAP,EAAmB;UACjB,MAAM,IAAIzB,0BAAJ,CAA+ByB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;QACH;;QAED,OAAOK,WAAP;MACH,CAbD,CAaE,OAAOL,KAAP,EAAmB;QACjB,KAAKb,IAAL,CAAU,OAAV,EAAmBa,KAAnB;QACA,MAAMA,KAAN;MACH;IACJ;EAAA;;EAEKQ,mBAAmB,CAACC,YAAD,EAA4B;;MACjD,IAAI;QACA,MAAM3B,SAAS,GAAG,KAAKC,UAAvB;QACA,MAAMQ,SAAS,GAAG,KAAKL,UAAvB;QACA,IAAI,CAACJ,SAAD,IAAc,CAACS,SAAnB,EAA8B,MAAM,IAAIlB,uBAAJ,EAAN;;QAE9B,IAAI;UACA,MAAMgB,cAAc,GAAG,KAAKD,eAA5B;;UACA,KAAK,MAAMiB,WAAX,IAA0BI,YAA1B,EAAwC;YACpC,MAAMH,SAAS,GAAG,MAAM5B,eAAe,CAACI,SAAD,EAAYuB,WAAZ,EAAyBhB,cAAzB,CAAvC;YACAgB,WAAW,CAACE,YAAZ,CAAyBhB,SAAzB,EAAoCe,SAApC;UACH;QACJ,CAND,CAME,OAAON,KAAP,EAAmB;UACjB,MAAM,IAAIzB,0BAAJ,CAA+ByB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;QACH;;QAED,OAAOS,YAAP;MACH,CAhBD,CAgBE,OAAOT,KAAP,EAAmB;QACjB,KAAKb,IAAL,CAAU,OAAV,EAAmBa,KAAnB;QACA,MAAMA,KAAN;MACH;IACJ;EAAA;;AA1H2D","names":["TransportWebHid","BaseSignerWalletAdapter","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletNotConnectedError","WalletPublicKeyError","WalletSignTransactionError","getDerivationPath","getPublicKey","signTransaction","LedgerWalletAdapter","constructor","config","transport","_transport","off","_disconnected","_publicKey","emit","_derivationPath","derivationPath","_connecting","publicKey","ready","window","navigator","hid","connecting","connected","connect","create","error","message","on","disconnect","close","transaction","signature","addSignature","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}