{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n\n    var TempCtor = function () {};\n\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nconst version$2 = \"logger/5.5.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nconst HEX = \"0123456789abcdef\";\n\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n  static from(version) {\n    return new Logger(version);\n  }\n\n}\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.5.0\";\nconst logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst version = \"sha2/5.5.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = bs58.decode(instruction.data);\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref2, index) => {\n      let {\n        signature\n      } = _ref2;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar browserPonyfill = {\n  exports: {}\n};\n\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n\n    F.prototype = global;\n    return new F();\n  }();\n\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n\n        return name.toLowerCase();\n      }\n\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n\n        return value;\n      } // Build a destructive iterator for the value list\n\n\n      function iteratorFor(items) {\n        var iterator = {\n          next: function () {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n\n        return iterator;\n      }\n\n      function Headers(headers) {\n        this.map = {};\n\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n\n        body.bodyUsed = true;\n      }\n\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n\n        return chars.join('');\n      }\n\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n\n      function Body() {\n        this.bodyUsed = false;\n\n        this._initBody = function (body) {\n          this._bodyInit = body;\n\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n\n        this.text = function () {\n          var rejected = consumed(this);\n\n          if (rejected) {\n            return rejected;\n          }\n\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n\n        return this;\n      } // HTTP methods whose capitalization should be normalized\n\n\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n\n          this.url = input.url;\n          this.credentials = input.credentials;\n\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n\n        this._initBody(body);\n      }\n\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n\n      Body.call(Request.prototype);\n\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n\n        this._initBody(bodyInit);\n      }\n\n      Body.call(Response.prototype);\n\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n\n      var redirectStatuses = [301, 302, 303, 307, 308];\n\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n\n      exports.DOMException = self.DOMException;\n\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n\n          var xhr = new XMLHttpRequest();\n\n          function abortXhr() {\n            xhr.abort();\n          }\n\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n\n          xhr.open(request.method, request.url, true);\n\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n\n      fetch.polyfill = true;\n\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n\n  __self__.fetch.ponyfill = true; // Remove \"polyfill\" property added by whatwg-fetch\n\n  delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n\n  var ctx = __self__; // this line disable service worker support temporarily\n\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\n\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  })))),\n  unitsConsumed: optional(number())\n}));\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._accountChangeSubscriptionCounter = 0;\n    this._accountChangeSubscriptions = {};\n    this._programAccountChangeSubscriptionCounter = 0;\n    this._programAccountChangeSubscriptions = {};\n    this._rootSubscriptionCounter = 0;\n    this._rootSubscriptions = {};\n    this._signatureSubscriptionCounter = 0;\n    this._signatureSubscriptions = {};\n    this._slotSubscriptionCounter = 0;\n    this._slotSubscriptions = {};\n    this._logsSubscriptionCounter = 0;\n    this._logsSubscriptions = {};\n    this._slotUpdateSubscriptionCounter = 0;\n    this._slotUpdateSubscriptions = {};\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, configOrCommitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n    let commitment;\n    let encoding = 'base64';\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n        encoding = 'base64';\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding || 'base64';\n      }\n    }\n\n    const args = this._buildArgs([keys], commitment, encoding);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n\n    return res.result.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref3 => {\n        let {\n          transaction,\n          meta\n        } = _ref3;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref4 => {\n        let {\n          transaction,\n          meta\n        } = _ref4;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {\n        filters: sub.filters\n      }));\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const res = create(notification, SlotUpdateNotificationResult);\n\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(id) {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n\n          this._updateSubscriptions();\n\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      publicKeyOffset,\n      publicKeyInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n/**\n * Create stake account transaction params\n */\n\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: authorizedPubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return transaction.add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref6) {\n  let {\n    epoch,\n    authorizedVoter\n  } = _ref6;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref7) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref7;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref8) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref8;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n/**\n * Vote account info\n */\n\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":";;;;;;;;;;;;AAEO,MAAMA,QAAQ,GAAIC,GAAD,IAAsD;EAC5E,IAAIC,MAAM,CAACC,QAAPD,CAAgBD,GAAhBC,CAAJ,EAA0B;IACxB,OAAOD,GAAP;EADF,OAEO,IAAIA,GAAG,YAAYG,UAAnB,EAA+B;IACpC,OAAOF,MAAM,CAACG,IAAPH,CAAYD,GAAG,CAACK,MAAhBJ,EAAwBD,GAAG,CAACM,UAA5BL,EAAwCD,GAAG,CAACO,UAA5CN,CAAP;EADK,OAEA;IACL,OAAOA,MAAM,CAACG,IAAPH,CAAYD,GAAZC,CAAP;EACD;AAPI;;;;;;;;;;ICFPO,kBAAc,GAAGC;;AAEjB,SAASA,QAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;EACxB,IAAI,CAACD,GAAL,EACE,MAAM,IAAIE,KAAJ,CAAUD,GAAG,IAAI,kBAAjB,CAAN;AACH;;AAEDF,QAAM,CAACI,KAAPJ,GAAe,SAASK,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BL,GAA3B,EAAgC;EAC7C,IAAII,CAAC,IAAIC,CAAT,EACE,MAAM,IAAIJ,KAAJ,CAAUD,GAAG,IAAK,uBAAuBI,CAAvB,GAA2B,MAA3B,GAAoCC,CAAtD,CAAN;AACH,CAHDP;;;;;;ACPA,IAAI,OAAOQ,MAAM,CAACC,MAAd,KAAyB,UAA7B,EAAyC;EACzC;EACEC,2BAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmC;IAClDD,IAAI,CAACE,MAAL,GAAcD,SAAd;IACAD,IAAI,CAACG,SAAL,GAAiBP,MAAM,CAACC,MAAP,CAAcI,SAAS,CAACE,SAAxB,EAAmC;MAClDC,WAAW,EAAE;QACXC,KAAK,EAAEL,IADI;QAEXM,UAAU,EAAE,KAFD;QAGXC,QAAQ,EAAE,IAHC;QAIXC,YAAY,EAAE;MAJH;IADqC,CAAnC,CAAjB;EAQD,CAVDV;AAWD,CAbD,MAaO;EACP;EACEA,2BAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmC;IAClDD,IAAI,CAACE,MAAL,GAAcD,SAAd;;IACA,IAAIQ,QAAQ,GAAG,YAAY,EAA3B;;IACAA,QAAQ,CAACN,SAAT,GAAqBF,SAAS,CAACE,SAA/B;IACAH,IAAI,CAACG,SAAL,GAAiB,IAAIM,QAAJ,EAAjB;IACAT,IAAI,CAACG,SAAL,CAAeC,WAAf,GAA6BJ,IAA7B;EACJ,CANEF;AAOF;;ACpBA,IAAIV,QAAM,GAAGsB,kBAAb;AACA,IAAIX,QAAQ,GAAGY,wBAAf;mBAEmBZ;;AAEnB,SAASa,eAAT,CAAyBtB,GAAzB,EAA8BuB,CAA9B,EAAiC;EAC/B,IAAI,CAACvB,GAAG,CAACwB,UAAJ,CAAeD,CAAf,IAAoB,MAArB,MAAiC,MAArC,EAA6C;IAC3C,OAAO,KAAP;EACD;;EACD,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAJ,IAASvB,GAAG,CAACyB,MAA1B,EAAkC;IAChC,OAAO,KAAP;EACD;;EACD,OAAO,CAACzB,GAAG,CAACwB,UAAJ,CAAeD,CAAC,GAAG,CAAnB,IAAwB,MAAzB,MAAqC,MAA5C;AACD;;AAED,SAASG,OAAT,CAAiB1B,GAAjB,EAAsB2B,GAAtB,EAA2B;EACzB,IAAIC,KAAK,CAACC,OAAN,CAAc7B,GAAd,CAAJ,EACE,OAAOA,GAAG,CAAC8B,KAAJ,EAAP;EACF,IAAI,CAAC9B,GAAL,EACE,OAAO,EAAP;EACF,IAAI+B,GAAG,GAAG,EAAV;;EACA,IAAI,OAAO/B,GAAP,KAAe,QAAnB,EAA6B;IAC3B,IAAI,CAAC2B,GAAL,EAAU;MACd;MACA;MACA;MACA;MACM,IAAIK,CAAC,GAAG,CAAR;;MACA,KAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,GAAG,CAACyB,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;QACnC,IAAIU,CAAC,GAAGjC,GAAG,CAACwB,UAAJ,CAAeD,CAAf,CAAR;;QACA,IAAIU,CAAC,GAAG,GAAR,EAAa;UACXF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAWC,CAAX;QACD,CAFD,MAEO,IAAIA,CAAC,GAAG,IAAR,EAAc;UACnBF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,IAAI,CAAN,GAAW,GAAtB;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,GAAG,EAAL,GAAW,GAAtB;QACD,CAHM,MAGA,IAAIX,eAAe,CAACtB,GAAD,EAAMuB,CAAN,CAAnB,EAA6B;UAClCU,CAAC,GAAG,WAAW,CAACA,CAAC,GAAG,MAAL,KAAgB,EAA3B,KAAkCjC,GAAG,CAACwB,UAAJ,CAAe,EAAED,CAAjB,IAAsB,MAAxD,CAAJ;UACAQ,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,IAAI,EAAN,GAAY,GAAvB;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAaC,CAAC,IAAI,EAAN,GAAY,EAAb,GAAmB,GAA9B;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAaC,CAAC,IAAI,CAAN,GAAW,EAAZ,GAAkB,GAA7B;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,GAAG,EAAL,GAAW,GAAtB;QACD,CANM,MAMA;UACLF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,IAAI,EAAN,GAAY,GAAvB;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAaC,CAAC,IAAI,CAAN,GAAW,EAAZ,GAAkB,GAA7B;UACAF,GAAG,CAACC,CAAC,EAAF,CAAH,GAAYC,CAAC,GAAG,EAAL,GAAW,GAAtB;QACD;MACF;IACF,CAzBD,MAyBO,IAAIN,GAAG,KAAK,KAAZ,EAAmB;MACxB3B,GAAG,GAAGA,GAAG,CAACkC,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,CAAN;MACA,IAAIlC,GAAG,CAACyB,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EACEzB,GAAG,GAAG,MAAMA,GAAZ;;MACF,KAAKuB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGvB,GAAG,CAACyB,MAApB,EAA4BF,CAAC,IAAI,CAAjC,EACEQ,GAAG,CAACI,IAAJ,CAASC,QAAQ,CAACpC,GAAG,CAACuB,CAAD,CAAH,GAASvB,GAAG,CAACuB,CAAC,GAAG,CAAL,CAAb,EAAsB,EAAtB,CAAjB;IACH;EACF,CAjCD,MAiCO;IACL,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGvB,GAAG,CAACyB,MAApB,EAA4BF,CAAC,EAA7B,EACEQ,GAAG,CAACR,CAAD,CAAH,GAASvB,GAAG,CAACuB,CAAD,CAAH,GAAS,CAAlB;EACH;;EACD,OAAOQ,GAAP;AACD;;kBACiBL;;AAElB,SAASW,KAAT,CAAerC,GAAf,EAAoB;EAClB,IAAI+B,GAAG,GAAG,EAAV;;EACA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,GAAG,CAACyB,MAAxB,EAAgCF,CAAC,EAAjC,EACEQ,GAAG,IAAIO,KAAK,CAACtC,GAAG,CAACuB,CAAD,CAAH,CAAOgB,QAAP,CAAgB,EAAhB,CAAD,CAAZ;;EACF,OAAOR,GAAP;AACD;;gBACeM;;AAEhB,SAASG,KAAT,CAAeC,CAAf,EAAkB;EAChB,IAAIV,GAAG,GAAIU,CAAC,KAAK,EAAP,GACEA,CAAC,KAAK,CAAP,GAAY,MADb,GAEEA,CAAC,IAAI,CAAN,GAAW,QAFZ,GAGC,CAACA,CAAC,GAAG,IAAL,KAAc,EAHzB;EAIA,OAAOV,GAAG,KAAK,CAAf;AACD;;gBACeS;;AAEhB,SAASE,OAAT,CAAiB1C,GAAjB,EAAsB2C,MAAtB,EAA8B;EAC5B,IAAIZ,GAAG,GAAG,EAAV;;EACA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,GAAG,CAACyB,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;IACnC,IAAIkB,CAAC,GAAGzC,GAAG,CAACuB,CAAD,CAAX;IACA,IAAIoB,MAAM,KAAK,QAAf,EACEF,CAAC,GAAGD,KAAK,CAACC,CAAD,CAAT;IACFV,GAAG,IAAIa,KAAK,CAACH,CAAC,CAACF,QAAF,CAAW,EAAX,CAAD,CAAZ;EACD;;EACD,OAAOR,GAAP;AACD;;kBACiBW;;AAElB,SAASJ,KAAT,CAAeO,IAAf,EAAqB;EACnB,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACE,OAAO,MAAMoB,IAAb,CADF,KAGE,OAAOA,IAAP;AACH;;gBACeP;;AAEhB,SAASM,KAAT,CAAeC,IAAf,EAAqB;EACnB,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACE,OAAO,MAAMoB,IAAb,CADF,KAEK,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,OAAOoB,IAAd,CADG,KAEA,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,QAAQoB,IAAf,CADG,KAEA,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,SAASoB,IAAhB,CADG,KAEA,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,UAAUoB,IAAjB,CADG,KAEA,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,WAAWoB,IAAlB,CADG,KAEA,IAAIA,IAAI,CAACpB,MAAL,KAAgB,CAApB,EACH,OAAO,YAAYoB,IAAnB,CADG,KAGH,OAAOA,IAAP;AACH;;gBACeD;;AAEhB,SAASE,MAAT,CAAgB9C,GAAhB,EAAqB+C,KAArB,EAA4BC,GAA5B,EAAiCL,MAAjC,EAAyC;EACvC,IAAIM,GAAG,GAAGD,GAAG,GAAGD,KAAhB;EACAjD,QAAM,CAACmD,GAAG,GAAG,CAAN,KAAY,CAAb,CAANnD;EACA,IAAIiC,GAAG,GAAG,IAAIH,KAAJ,CAAUqB,GAAG,GAAG,CAAhB,CAAV;;EACA,KAAK,IAAI1B,CAAC,GAAG,CAAR,EAAW2B,CAAC,GAAGH,KAApB,EAA2BxB,CAAC,GAAGQ,GAAG,CAACN,MAAnC,EAA2CF,CAAC,IAAI2B,CAAC,IAAI,CAArD,EAAwD;IACtD,IAAIT,CAAJ;IACA,IAAIE,MAAM,KAAK,KAAf,EACEF,CAAC,GAAIzC,GAAG,CAACkD,CAAD,CAAH,IAAU,EAAX,GAAkBlD,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAH,IAAc,EAAhC,GAAuClD,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAH,IAAc,CAArD,GAA0DlD,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAjE,CADF,KAGET,CAAC,GAAIzC,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAH,IAAc,EAAf,GAAsBlD,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAH,IAAc,EAApC,GAA2ClD,GAAG,CAACkD,CAAC,GAAG,CAAL,CAAH,IAAc,CAAzD,GAA8DlD,GAAG,CAACkD,CAAD,CAArE;IACFnB,GAAG,CAACR,CAAD,CAAH,GAASkB,CAAC,KAAK,CAAf;EACD;;EACD,OAAOV,GAAP;AACD;;iBACgBe;;AAEjB,SAASK,OAAT,CAAiBnD,GAAjB,EAAsB2C,MAAtB,EAA8B;EAC5B,IAAIZ,GAAG,GAAG,IAAIH,KAAJ,CAAU5B,GAAG,CAACyB,MAAJ,GAAa,CAAvB,CAAV;;EACA,KAAK,IAAIF,CAAC,GAAG,CAAR,EAAW2B,CAAC,GAAG,CAApB,EAAuB3B,CAAC,GAAGvB,GAAG,CAACyB,MAA/B,EAAuCF,CAAC,IAAI2B,CAAC,IAAI,CAAjD,EAAoD;IAClD,IAAIE,CAAC,GAAGpD,GAAG,CAACuB,CAAD,CAAX;;IACA,IAAIoB,MAAM,KAAK,KAAf,EAAsB;MACpBZ,GAAG,CAACmB,CAAD,CAAH,GAASE,CAAC,KAAK,EAAf;MACArB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAcE,CAAC,KAAK,EAAP,GAAa,IAA1B;MACArB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAcE,CAAC,KAAK,CAAP,GAAY,IAAzB;MACArB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAaE,CAAC,GAAG,IAAjB;IACD,CALD,MAKO;MACLrB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAaE,CAAC,KAAK,EAAnB;MACArB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAcE,CAAC,KAAK,EAAP,GAAa,IAA1B;MACArB,GAAG,CAACmB,CAAC,GAAG,CAAL,CAAH,GAAcE,CAAC,KAAK,CAAP,GAAY,IAAzB;MACArB,GAAG,CAACmB,CAAD,CAAH,GAASE,CAAC,GAAG,IAAb;IACD;EACF;;EACD,OAAOrB,GAAP;AACD;;kBACiBoB;;AAElB,SAASE,QAAT,CAAgBZ,CAAhB,EAAmBa,CAAnB,EAAsB;EACpB,OAAQb,CAAC,KAAKa,CAAP,GAAab,CAAC,IAAK,KAAKa,CAA/B;AACD;;iBACgBD;;AAEjB,SAASE,QAAT,CAAgBd,CAAhB,EAAmBa,CAAnB,EAAsB;EACpB,OAAQb,CAAC,IAAIa,CAAN,GAAYb,CAAC,KAAM,KAAKa,CAA/B;AACD;;iBACgBC;;AAEjB,SAASC,OAAT,CAAeC,CAAf,EAAkBH,CAAlB,EAAqB;EACnB,OAAQG,CAAC,GAAGH,CAAL,KAAY,CAAnB;AACD;;gBACeE;;AAEhB,SAASE,SAAT,CAAiBD,CAAjB,EAAoBH,CAApB,EAAuBrB,CAAvB,EAA0B;EACxB,OAAQwB,CAAC,GAAGH,CAAJ,GAAQrB,CAAT,KAAgB,CAAvB;AACD;;kBACiByB;;AAElB,SAASC,SAAT,CAAiBF,CAAjB,EAAoBH,CAApB,EAAuBrB,CAAvB,EAA0B2B,CAA1B,EAA6B;EAC3B,OAAQH,CAAC,GAAGH,CAAJ,GAAQrB,CAAR,GAAY2B,CAAb,KAAoB,CAA3B;AACD;;kBACiBD;;AAElB,SAASE,SAAT,CAAiBJ,CAAjB,EAAoBH,CAApB,EAAuBrB,CAAvB,EAA0B2B,CAA1B,EAA6BE,CAA7B,EAAgC;EAC9B,OAAQL,CAAC,GAAGH,CAAJ,GAAQrB,CAAR,GAAY2B,CAAZ,GAAgBE,CAAjB,KAAwB,CAA/B;AACD;;kBACiBD;;AAElB,SAASE,OAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiC;EAC/B,IAAIC,EAAE,GAAGJ,GAAG,CAACC,GAAD,CAAZ;EACA,IAAII,EAAE,GAAGL,GAAG,CAACC,GAAG,GAAG,CAAP,CAAZ;EAEA,IAAIK,EAAE,GAAIH,EAAE,GAAGE,EAAN,KAAc,CAAvB;EACA,IAAIE,EAAE,GAAG,CAACD,EAAE,GAAGH,EAAL,GAAU,CAAV,GAAc,CAAf,IAAoBD,EAApB,GAAyBE,EAAlC;EACAJ,GAAG,CAACC,GAAD,CAAH,GAAWM,EAAE,KAAK,CAAlB;EACAP,GAAG,CAACC,GAAG,GAAG,CAAP,CAAH,GAAeK,EAAf;AACD;;gBACeP;;AAEhB,SAASS,UAAT,CAAkBN,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkC;EAChC,IAAIC,EAAE,GAAIH,EAAE,GAAGE,EAAN,KAAc,CAAvB;EACA,IAAIE,EAAE,GAAG,CAACD,EAAE,GAAGH,EAAL,GAAU,CAAV,GAAc,CAAf,IAAoBD,EAApB,GAAyBE,EAAlC;EACA,OAAOG,EAAE,KAAK,CAAd;AACD;;mBACkBC;;AAEnB,SAASC,UAAT,CAAkBP,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkC;EAChC,IAAIC,EAAE,GAAGH,EAAE,GAAGE,EAAd;EACA,OAAOC,EAAE,KAAK,CAAd;AACD;;mBACkBG;;AAEnB,SAASC,YAAT,CAAoBR,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCM,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoD;EAClD,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIT,EAAE,GAAGH,EAAT;EACAG,EAAE,GAAIA,EAAE,GAAGD,EAAN,KAAc,CAAnB;EACAU,KAAK,IAAIT,EAAE,GAAGH,EAAL,GAAU,CAAV,GAAc,CAAvB;EACAG,EAAE,GAAIA,EAAE,GAAGM,EAAN,KAAc,CAAnB;EACAG,KAAK,IAAIT,EAAE,GAAGM,EAAL,GAAU,CAAV,GAAc,CAAvB;EACAN,EAAE,GAAIA,EAAE,GAAGQ,EAAN,KAAc,CAAnB;EACAC,KAAK,IAAIT,EAAE,GAAGQ,EAAL,GAAU,CAAV,GAAc,CAAvB;EAEA,IAAIP,EAAE,GAAGL,EAAE,GAAGE,EAAL,GAAUO,EAAV,GAAeE,EAAf,GAAoBE,KAA7B;EACA,OAAOR,EAAE,KAAK,CAAd;AACD;;qBACoBG;;AAErB,SAASM,YAAT,CAAoBd,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCM,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoD;EAClD,IAAIR,EAAE,GAAGH,EAAE,GAAGE,EAAL,GAAUO,EAAV,GAAeE,EAAxB;EACA,OAAOR,EAAE,KAAK,CAAd;AACD;;qBACoBU;;AAErB,SAASC,YAAT,CAAoBf,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCM,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDI,EAApD,EAAwDC,EAAxD,EAA4D;EAC1D,IAAIJ,KAAK,GAAG,CAAZ;EACA,IAAIT,EAAE,GAAGH,EAAT;EACAG,EAAE,GAAIA,EAAE,GAAGD,EAAN,KAAc,CAAnB;EACAU,KAAK,IAAIT,EAAE,GAAGH,EAAL,GAAU,CAAV,GAAc,CAAvB;EACAG,EAAE,GAAIA,EAAE,GAAGM,EAAN,KAAc,CAAnB;EACAG,KAAK,IAAIT,EAAE,GAAGM,EAAL,GAAU,CAAV,GAAc,CAAvB;EACAN,EAAE,GAAIA,EAAE,GAAGQ,EAAN,KAAc,CAAnB;EACAC,KAAK,IAAIT,EAAE,GAAGQ,EAAL,GAAU,CAAV,GAAc,CAAvB;EACAR,EAAE,GAAIA,EAAE,GAAGa,EAAN,KAAc,CAAnB;EACAJ,KAAK,IAAIT,EAAE,GAAGa,EAAL,GAAU,CAAV,GAAc,CAAvB;EAEA,IAAIZ,EAAE,GAAGL,EAAE,GAAGE,EAAL,GAAUO,EAAV,GAAeE,EAAf,GAAoBK,EAApB,GAAyBH,KAAlC;EACA,OAAOR,EAAE,KAAK,CAAd;AACD;;qBACoBU;;AAErB,SAASG,YAAT,CAAoBlB,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCM,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDI,EAApD,EAAwDC,EAAxD,EAA4D;EAC1D,IAAIb,EAAE,GAAGH,EAAE,GAAGE,EAAL,GAAUO,EAAV,GAAeE,EAAf,GAAoBK,EAA7B;EAEA,OAAOb,EAAE,KAAK,CAAd;AACD;;qBACoBc;;AAErB,SAASC,WAAT,CAAmBnB,EAAnB,EAAuBC,EAAvB,EAA2BmB,GAA3B,EAAgC;EAC9B,IAAIjF,CAAC,GAAI8D,EAAE,IAAK,KAAKmB,GAAb,GAAsBpB,EAAE,KAAKoB,GAArC;EACA,OAAOjF,CAAC,KAAK,CAAb;AACD;;oBACmBgF;;AAEpB,SAASE,WAAT,CAAmBrB,EAAnB,EAAuBC,EAAvB,EAA2BmB,GAA3B,EAAgC;EAC9B,IAAIjF,CAAC,GAAI6D,EAAE,IAAK,KAAKoB,GAAb,GAAsBnB,EAAE,KAAKmB,GAArC;EACA,OAAOjF,CAAC,KAAK,CAAb;AACD;;oBACmBkF;;AAEpB,SAASC,UAAT,CAAkBtB,EAAlB,EAAsBC,EAAtB,EAA0BmB,GAA1B,EAA+B;EAC7B,OAAOpB,EAAE,KAAKoB,GAAd;AACD;;mBACkBE;;AAEnB,SAASC,UAAT,CAAkBvB,EAAlB,EAAsBC,EAAtB,EAA0BmB,GAA1B,EAA+B;EAC7B,IAAIjF,CAAC,GAAI6D,EAAE,IAAK,KAAKoB,GAAb,GAAsBnB,EAAE,KAAKmB,GAArC;EACA,OAAOjF,CAAC,KAAK,CAAb;AACD;;mBACkBoF;;ACnRnB,IAAIC,OAAK,GAAGtE,OAAZ;AACA,IAAItB,QAAM,GAAGuB,kBAAb;;AAEA,SAASsE,WAAT,GAAqB;EACnB,KAAKC,OAAL,GAAe,IAAf;EACA,KAAKC,YAAL,GAAoB,CAApB;EACA,KAAKC,SAAL,GAAiB,KAAKhF,WAAL,CAAiBgF,SAAlC;EACA,KAAKC,OAAL,GAAe,KAAKjF,WAAL,CAAiBiF,OAAhC;EACA,KAAKC,YAAL,GAAoB,KAAKlF,WAAL,CAAiBkF,YAArC;EACA,KAAKC,SAAL,GAAiB,KAAKnF,WAAL,CAAiBmF,SAAjB,GAA6B,CAA9C;EACA,KAAKtD,MAAL,GAAc,KAAd;EAEA,KAAKuD,OAAL,GAAe,KAAKJ,SAAL,GAAiB,CAAhC;EACA,KAAKK,QAAL,GAAgB,KAAKL,SAAL,GAAiB,EAAjC;AACD;;qBACmBH;;AAEpBA,WAAS,CAAC9E,SAAV8E,CAAoBS,MAApBT,GAA6B,SAASS,MAAT,CAAgBpG,GAAhB,EAAqB2B,GAArB,EAA0B;EACvD;EACE3B,GAAG,GAAG0F,OAAK,CAAChE,OAANgE,CAAc1F,GAAd0F,EAAmB/D,GAAnB+D,CAAN;EACA,IAAI,CAAC,KAAKE,OAAV,EACE,KAAKA,OAAL,GAAe5F,GAAf,CADF,KAGE,KAAK4F,OAAL,GAAe,KAAKA,OAAL,CAAaS,MAAb,CAAoBrG,GAApB,CAAf;EACF,KAAK6F,YAAL,IAAqB7F,GAAG,CAACyB,MAAzB,CAPqD,CASvD;;EACE,IAAI,KAAKmE,OAAL,CAAanE,MAAb,IAAuB,KAAKyE,OAAhC,EAAyC;IACvClG,GAAG,GAAG,KAAK4F,OAAX,CADuC,CAG3C;;IACI,IAAIvF,CAAC,GAAGL,GAAG,CAACyB,MAAJ,GAAa,KAAKyE,OAA1B;IACA,KAAKN,OAAL,GAAe5F,GAAG,CAAC8B,KAAJ,CAAU9B,GAAG,CAACyB,MAAJ,GAAapB,CAAvB,EAA0BL,GAAG,CAACyB,MAA9B,CAAf;IACA,IAAI,KAAKmE,OAAL,CAAanE,MAAb,KAAwB,CAA5B,EACE,KAAKmE,OAAL,GAAe,IAAf;IAEF5F,GAAG,GAAG0F,OAAK,CAAC5C,MAAN4C,CAAa1F,GAAb0F,EAAkB,CAAlBA,EAAqB1F,GAAG,CAACyB,MAAJ,GAAapB,CAAlCqF,EAAqC,KAAK/C,MAA1C+C,CAAN;;IACA,KAAK,IAAInE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,GAAG,CAACyB,MAAxB,EAAgCF,CAAC,IAAI,KAAK4E,QAA1C,EACE,KAAKG,OAAL,CAAatG,GAAb,EAAkBuB,CAAlB,EAAqBA,CAAC,GAAG,KAAK4E,QAA9B;EACH;;EAED,OAAO,IAAP;AACD,CAzBDR;;AA2BAA,WAAS,CAAC9E,SAAV8E,CAAoBY,MAApBZ,GAA6B,SAASY,MAAT,CAAgB5E,GAAhB,EAAqB;EAChD,KAAKyE,MAAL,CAAY,KAAKI,IAAL,EAAZ;EACA1G,QAAM,CAAC,KAAK8F,OAAL,KAAiB,IAAlB,CAAN9F;EAEA,OAAO,KAAK2G,OAAL,CAAa9E,GAAb,CAAP;AACD,CALDgE;;AAOAA,WAAS,CAAC9E,SAAV8E,CAAoBa,IAApBb,GAA2B,SAASe,GAAT,GAAe;EACxC,IAAIzD,GAAG,GAAG,KAAK4C,YAAf;EACA,IAAIc,KAAK,GAAG,KAAKT,OAAjB;EACA,IAAIhD,CAAC,GAAGyD,KAAK,GAAI,CAAC1D,GAAG,GAAG,KAAKgD,SAAZ,IAAyBU,KAA1C;EACA,IAAI5E,GAAG,GAAG,IAAIH,KAAJ,CAAUsB,CAAC,GAAG,KAAK+C,SAAnB,CAAV;EACAlE,GAAG,CAAC,CAAD,CAAH,GAAS,IAAT;;EACA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,CAApB,EAAuB3B,CAAC,EAAxB,EACEQ,GAAG,CAACR,CAAD,CAAH,GAAS,CAAT,CAPsC,CAS1C;;;EACE0B,GAAG,KAAK,CAAR;;EACA,IAAI,KAAKN,MAAL,KAAgB,KAApB,EAA2B;IACzB,KAAK,IAAIiE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,SAAzB,EAAoCW,CAAC,EAArC,EACE7E,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;;IAEFQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,EAAT,GAAe,IAA1B;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,EAAT,GAAe,IAA1B;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,CAAT,GAAc,IAAzB;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW0B,GAAG,GAAG,IAAjB;EACD,CAZD,MAYO;IACLlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW0B,GAAG,GAAG,IAAjB;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,CAAT,GAAc,IAAzB;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,EAAT,GAAe,IAA1B;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAY0B,GAAG,KAAK,EAAT,GAAe,IAA1B;IACAlB,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;IACAQ,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;;IAEA,KAAKqF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKX,SAArB,EAAgCW,CAAC,EAAjC,EACE7E,GAAG,CAACR,CAAC,EAAF,CAAH,GAAW,CAAX;EACH;;EAED,OAAOQ,GAAP;AACD,CAtCD4D;;;;ACnDA,IAAID,OAAK,GAAGtE,OAAZ;AACA,IAAIiC,MAAM,GAAGqC,OAAK,CAACrC,MAAnB;;AAEA,SAASwD,MAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EACxB,IAAIH,CAAC,KAAK,CAAV,EACE,OAAOI,MAAI,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX;EACF,IAAIH,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EACE,OAAOK,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAV;EACF,IAAIH,CAAC,KAAK,CAAV,EACE,OAAOM,OAAK,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ;AACH;;gBACcJ;;AAEf,SAASK,MAAT,CAAcH,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;EACrB,OAAQF,CAAC,GAAGC,CAAL,GAAY,CAACD,CAAF,GAAOE,CAAzB;AACD;;gBACcC;;AAEf,SAASE,OAAT,CAAeL,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;EACtB,OAAQF,CAAC,GAAGC,CAAL,GAAWD,CAAC,GAAGE,CAAf,GAAqBD,CAAC,GAAGC,CAAhC;AACD;;iBACeG;;AAEhB,SAASD,GAAT,CAAaJ,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;EACpB,OAAOF,CAAC,GAAGC,CAAJ,GAAQC,CAAf;AACD;;eACaE;;AAEd,SAASE,QAAT,CAAgBN,CAAhB,EAAmB;EACjB,OAAO1D,MAAM,CAAC0D,CAAD,EAAI,CAAJ,CAAN,GAAe1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAArB,GAA+B1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAA5C;AACD;;kBACgBM;;AAEjB,SAASC,QAAT,CAAgBP,CAAhB,EAAmB;EACjB,OAAO1D,MAAM,CAAC0D,CAAD,EAAI,CAAJ,CAAN,GAAe1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAArB,GAA+B1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAA5C;AACD;;kBACgBO;;AAEjB,SAASC,QAAT,CAAgBR,CAAhB,EAAmB;EACjB,OAAO1D,MAAM,CAAC0D,CAAD,EAAI,CAAJ,CAAN,GAAe1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAArB,GAAgCA,CAAC,KAAK,CAA7C;AACD;;kBACgBQ;;AAEjB,SAASC,QAAT,CAAgBT,CAAhB,EAAmB;EACjB,OAAO1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAAN,GAAgB1D,MAAM,CAAC0D,CAAD,EAAI,EAAJ,CAAtB,GAAiCA,CAAC,KAAK,EAA9C;AACD;;kBACgBS;AC9CjB,IAAI9B,OAAK,GAAGtE,OAAZ;AACA,IAAIqG,QAAM,GAAGpG,QAAb;AACA,IAAIqG,WAAS,GAAGC,QAAhB;AAEA,IAAIpE,QAAM,GAAGmC,OAAK,CAACnC,MAAnB;AACA,IAAIC,OAAK,GAAGkC,OAAK,CAAClC,KAAlB;AACA,IAAIK,SAAO,GAAG6B,OAAK,CAAC7B,OAApB;AACA,IAAIgD,IAAI,GAAGa,WAAS,CAACb,IAArB;AACA,IAAIlB,WAAS,GAAG8B,QAAM,CAAC9B,SAAvB;AAEA,IAAIiC,MAAM,GAAG,CACX,UADW,EACC,UADD,EAEX,UAFW,EAEC,UAFD,CAAb;;AAKA,SAASC,IAAT,GAAgB;EACd,IAAI,EAAE,gBAAgBA,IAAlB,CAAJ,EACE,OAAO,IAAIA,IAAJ,EAAP;EAEFlC,WAAS,CAACmC,IAAVnC,CAAe,IAAfA;EACA,KAAKoC,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAEP,UAFO,EAEK,UAFL,CAAT;EAGA,KAAKC,CAAL,GAAS,IAAIpG,KAAJ,CAAU,EAAV,CAAT;AACD;;AAED8D,OAAK,CAACjF,QAANiF,CAAemC,IAAfnC,EAAqBC,WAArBD;IACAuC,EAAc,GAAGJ;AAEjBA,IAAI,CAAC/B,SAAL,GAAiB,GAAjB;AACA+B,IAAI,CAAC9B,OAAL,GAAe,GAAf;AACA8B,IAAI,CAAC7B,YAAL,GAAoB,EAApB;AACA6B,IAAI,CAAC5B,SAAL,GAAiB,EAAjB;;AAEA4B,IAAI,CAAChH,SAAL,CAAeyF,OAAf,GAAyB,SAASA,OAAT,CAAiBtG,GAAjB,EAAsB+C,KAAtB,EAA6B;EACpD,IAAIiF,CAAC,GAAG,KAAKA,CAAb;;EAEA,KAAK,IAAIzG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EACEyG,CAAC,CAACzG,CAAD,CAAD,GAAOvB,GAAG,CAAC+C,KAAK,GAAGxB,CAAT,CAAV;;EAEF,OAAMA,CAAC,GAAGyG,CAAC,CAACvG,MAAZ,EAAoBF,CAAC,EAArB,EACEyG,CAAC,CAACzG,CAAD,CAAD,GAAOgC,QAAM,CAACyE,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAD,GAAWyG,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAZ,GAAsByG,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAvB,GAAkCyG,CAAC,CAACzG,CAAC,GAAG,EAAL,CAApC,EAA8C,CAA9C,CAAb;;EAEF,IAAIkC,CAAC,GAAG,KAAKsE,CAAL,CAAO,CAAP,CAAR;EACA,IAAIzE,CAAC,GAAG,KAAKyE,CAAL,CAAO,CAAP,CAAR;EACA,IAAI9F,CAAC,GAAG,KAAK8F,CAAL,CAAO,CAAP,CAAR;EACA,IAAInE,CAAC,GAAG,KAAKmE,CAAL,CAAO,CAAP,CAAR;EACA,IAAIjE,CAAC,GAAG,KAAKiE,CAAL,CAAO,CAAP,CAAR;;EAEA,KAAKxG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyG,CAAC,CAACvG,MAAlB,EAA0BF,CAAC,EAA3B,EAA+B;IAC7B,IAAIuF,CAAC,GAAG,CAAC,EAAEvF,CAAC,GAAG,EAAN,CAAT;IACA,IAAIqF,CAAC,GAAG/C,SAAO,CAACN,QAAM,CAACE,CAAD,EAAI,CAAJ,CAAP,EAAeoD,IAAI,CAACC,CAAD,EAAIxD,CAAJ,EAAOrB,CAAP,EAAU2B,CAAV,CAAnB,EAAiCE,CAAjC,EAAoCkE,CAAC,CAACzG,CAAD,CAArC,EAA0CqG,MAAM,CAACd,CAAD,CAAhD,CAAf;IACAhD,CAAC,GAAGF,CAAJ;IACAA,CAAC,GAAG3B,CAAJ;IACAA,CAAC,GAAGsB,QAAM,CAACD,CAAD,EAAI,EAAJ,CAAV;IACAA,CAAC,GAAGG,CAAJ;IACAA,CAAC,GAAGmD,CAAJ;EACD;;EAED,KAAKmB,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYtE,CAAZ,CAAjB;EACA,KAAKsE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYzE,CAAZ,CAAjB;EACA,KAAKyE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAY9F,CAAZ,CAAjB;EACA,KAAK8F,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYnE,CAAZ,CAAjB;EACA,KAAKmE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYjE,CAAZ,CAAjB;AACD,CA9BD;;AAgCA+D,IAAI,CAAChH,SAAL,CAAe4F,OAAf,GAAyB,SAASF,MAAT,CAAgB5E,GAAhB,EAAqB;EAC5C,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP;AACH,CALD;;AClEA,IAAIA,OAAK,GAAGtE,OAAZ;AACA,IAAIqG,QAAM,GAAGpG,QAAb;AACA,IAAIqG,SAAS,GAAGC,QAAhB;AACA,IAAI7H,QAAM,GAAGoI,kBAAb;AAEA,IAAI1E,OAAK,GAAGkC,OAAK,CAAClC,KAAlB;AACA,IAAIG,SAAO,GAAG+B,OAAK,CAAC/B,OAApB;AACA,IAAIE,OAAO,GAAG6B,OAAK,CAAC7B,OAApB;AACA,IAAIqD,IAAI,GAAGQ,SAAS,CAACR,IAArB;AACA,IAAIE,KAAK,GAAGM,SAAS,CAACN,KAAtB;AACA,IAAIC,MAAM,GAAGK,SAAS,CAACL,MAAvB;AACA,IAAIC,MAAM,GAAGI,SAAS,CAACJ,MAAvB;AACA,IAAIC,MAAM,GAAGG,SAAS,CAACH,MAAvB;AACA,IAAIC,MAAM,GAAGE,SAAS,CAACF,MAAvB;AAEA,IAAI7B,WAAS,GAAG8B,QAAM,CAAC9B,SAAvB;AAEA,IAAIwC,QAAQ,GAAG,CACb,UADa,EACD,UADC,EACW,UADX,EACuB,UADvB,EAEb,UAFa,EAED,UAFC,EAEW,UAFX,EAEuB,UAFvB,EAGb,UAHa,EAGD,UAHC,EAGW,UAHX,EAGuB,UAHvB,EAIb,UAJa,EAID,UAJC,EAIW,UAJX,EAIuB,UAJvB,EAKb,UALa,EAKD,UALC,EAKW,UALX,EAKuB,UALvB,EAMb,UANa,EAMD,UANC,EAMW,UANX,EAMuB,UANvB,EAOb,UAPa,EAOD,UAPC,EAOW,UAPX,EAOuB,UAPvB,EAQb,UARa,EAQD,UARC,EAQW,UARX,EAQuB,UARvB,EASb,UATa,EASD,UATC,EASW,UATX,EASuB,UATvB,EAUb,UAVa,EAUD,UAVC,EAUW,UAVX,EAUuB,UAVvB,EAWb,UAXa,EAWD,UAXC,EAWW,UAXX,EAWuB,UAXvB,EAYb,UAZa,EAYD,UAZC,EAYW,UAZX,EAYuB,UAZvB,EAab,UAba,EAaD,UAbC,EAaW,UAbX,EAauB,UAbvB,EAcb,UAda,EAcD,UAdC,EAcW,UAdX,EAcuB,UAdvB,EAeb,UAfa,EAeD,UAfC,EAeW,UAfX,EAeuB,UAfvB,EAgBb,UAhBa,EAgBD,UAhBC,EAgBW,UAhBX,EAgBuB,UAhBvB,CAAf;;AAmBA,SAASC,QAAT,GAAkB;EAChB,IAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,EAAP;EAEFzC,WAAS,CAACmC,IAAVnC,CAAe,IAAfA;EACA,KAAKoC,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAC6B,UAD7B,EAEP,UAFO,EAEK,UAFL,EAEiB,UAFjB,EAE6B,UAF7B,CAAT;EAIA,KAAK7E,CAAL,GAASiF,QAAT;EACA,KAAKH,CAAL,GAAS,IAAIpG,KAAJ,CAAU,EAAV,CAAT;AACD;;AACD8D,OAAK,CAACjF,QAANiF,CAAe0C,QAAf1C,EAAuBC,WAAvBD;IACA2C,IAAc,GAAGD;AAEjBA,QAAM,CAACtC,SAAPsC,GAAmB,GAAnBA;AACAA,QAAM,CAACrC,OAAPqC,GAAiB,GAAjBA;AACAA,QAAM,CAACpC,YAAPoC,GAAsB,GAAtBA;AACAA,QAAM,CAACnC,SAAPmC,GAAmB,EAAnBA;;AAEAA,QAAM,CAACvH,SAAPuH,CAAiB9B,OAAjB8B,GAA2B,SAAS9B,OAAT,CAAiBtG,GAAjB,EAAsB+C,KAAtB,EAA6B;EACtD,IAAIiF,CAAC,GAAG,KAAKA,CAAb;;EAEA,KAAK,IAAIzG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EACEyG,CAAC,CAACzG,CAAD,CAAD,GAAOvB,GAAG,CAAC+C,KAAK,GAAGxB,CAAT,CAAV;;EACF,OAAOA,CAAC,GAAGyG,CAAC,CAACvG,MAAb,EAAqBF,CAAC,EAAtB,EACEyG,CAAC,CAACzG,CAAD,CAAD,GAAOoC,SAAO,CAAC6D,MAAM,CAACQ,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAF,CAAP,EAAmByG,CAAC,CAACzG,CAAC,GAAG,CAAL,CAApB,EAA6BgG,MAAM,CAACS,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAF,CAAnC,EAAgDyG,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAjD,CAAd;;EAEF,IAAIkC,CAAC,GAAG,KAAKsE,CAAL,CAAO,CAAP,CAAR;EACA,IAAIzE,CAAC,GAAG,KAAKyE,CAAL,CAAO,CAAP,CAAR;EACA,IAAI9F,CAAC,GAAG,KAAK8F,CAAL,CAAO,CAAP,CAAR;EACA,IAAInE,CAAC,GAAG,KAAKmE,CAAL,CAAO,CAAP,CAAR;EACA,IAAIjE,CAAC,GAAG,KAAKiE,CAAL,CAAO,CAAP,CAAR;EACA,IAAIO,CAAC,GAAG,KAAKP,CAAL,CAAO,CAAP,CAAR;EACA,IAAIQ,CAAC,GAAG,KAAKR,CAAL,CAAO,CAAP,CAAR;EACA,IAAIA,CAAC,GAAG,KAAKA,CAAL,CAAO,CAAP,CAAR;EAEAjI,QAAM,CAAC,KAAKoD,CAAL,CAAOzB,MAAP,KAAkBuG,CAAC,CAACvG,MAArB,CAAN3B;;EACA,KAAKyB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyG,CAAC,CAACvG,MAAlB,EAA0BF,CAAC,EAA3B,EAA+B;IAC7B,IAAIiH,EAAE,GAAG3E,OAAO,CAACkE,CAAD,EAAIT,MAAM,CAACxD,CAAD,CAAV,EAAeoD,IAAI,CAACpD,CAAD,EAAIwE,CAAJ,EAAOC,CAAP,CAAnB,EAA8B,KAAKrF,CAAL,CAAO3B,CAAP,CAA9B,EAAyCyG,CAAC,CAACzG,CAAD,CAA1C,CAAhB;IACA,IAAIkH,EAAE,GAAGjF,OAAK,CAAC6D,MAAM,CAAC5D,CAAD,CAAP,EAAY2D,KAAK,CAAC3D,CAAD,EAAIH,CAAJ,EAAOrB,CAAP,CAAjB,CAAd;IACA8F,CAAC,GAAGQ,CAAJ;IACAA,CAAC,GAAGD,CAAJ;IACAA,CAAC,GAAGxE,CAAJ;IACAA,CAAC,GAAGN,OAAK,CAACI,CAAD,EAAI4E,EAAJ,CAAT;IACA5E,CAAC,GAAG3B,CAAJ;IACAA,CAAC,GAAGqB,CAAJ;IACAA,CAAC,GAAGG,CAAJ;IACAA,CAAC,GAAGD,OAAK,CAACgF,EAAD,EAAKC,EAAL,CAAT;EACD;;EAED,KAAKV,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYtE,CAAZ,CAAjB;EACA,KAAKsE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYzE,CAAZ,CAAjB;EACA,KAAKyE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAY9F,CAAZ,CAAjB;EACA,KAAK8F,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYnE,CAAZ,CAAjB;EACA,KAAKmE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYjE,CAAZ,CAAjB;EACA,KAAKiE,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYO,CAAZ,CAAjB;EACA,KAAKP,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYQ,CAAZ,CAAjB;EACA,KAAKR,CAAL,CAAO,CAAP,IAAYvE,OAAK,CAAC,KAAKuE,CAAL,CAAO,CAAP,CAAD,EAAYA,CAAZ,CAAjB;AACD,CAvCDK;;AAyCAA,QAAM,CAACvH,SAAPuH,CAAiB3B,OAAjB2B,GAA2B,SAAS7B,MAAT,CAAgB5E,GAAhB,EAAqB;EAC9C,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP;AACH,CALD0C;;ACjGA,IAAI1C,OAAK,GAAGtE,OAAZ;AACA,IAAIgH,MAAM,GAAG/G,IAAb;;AAEA,SAASqH,MAAT,GAAkB;EAChB,IAAI,EAAE,gBAAgBA,MAAlB,CAAJ,EACE,OAAO,IAAIA,MAAJ,EAAP;EAEFN,MAAM,CAACN,IAAP,CAAY,IAAZ;EACA,KAAKC,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAC6B,UAD7B,EAEP,UAFO,EAEK,UAFL,EAEiB,UAFjB,EAE6B,UAF7B,CAAT;AAGD;;AACDrC,OAAK,CAACjF,QAANiF,CAAegD,MAAfhD,EAAuB0C,MAAvB1C;IACAiD,IAAc,GAAGD;AAEjBA,MAAM,CAAC5C,SAAP,GAAmB,GAAnB;AACA4C,MAAM,CAAC3C,OAAP,GAAiB,GAAjB;AACA2C,MAAM,CAAC1C,YAAP,GAAsB,GAAtB;AACA0C,MAAM,CAACzC,SAAP,GAAmB,EAAnB;;AAEAyC,MAAM,CAAC7H,SAAP,CAAiB4F,OAAjB,GAA2B,SAASF,MAAT,CAAgB5E,GAAhB,EAAqB;EAChD;EACE,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAL,CAAOjG,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAd4D,EAAkC,KAAlCA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAL,CAAOjG,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAd4D,EAAkC,KAAlCA,CAAP;AACH,CAND;;ACpBA,IAAIA,OAAK,GAAGtE,OAAZ;AACA,IAAIqG,QAAM,GAAGpG,QAAb;AACA,IAAIvB,QAAM,GAAG6H,kBAAb;AAEA,IAAItC,SAAS,GAAGK,OAAK,CAACL,SAAtB;AACA,IAAIE,SAAS,GAAGG,OAAK,CAACH,SAAtB;AACA,IAAIC,QAAQ,GAAGE,OAAK,CAACF,QAArB;AACA,IAAIC,QAAQ,GAAGC,OAAK,CAACD,QAArB;AACA,IAAI1B,KAAK,GAAG2B,OAAK,CAAC3B,KAAlB;AACA,IAAIS,QAAQ,GAAGkB,OAAK,CAAClB,QAArB;AACA,IAAIC,QAAQ,GAAGiB,OAAK,CAACjB,QAArB;AACA,IAAIC,UAAU,GAAGgB,OAAK,CAAChB,UAAvB;AACA,IAAIM,UAAU,GAAGU,OAAK,CAACV,UAAvB;AACA,IAAIC,UAAU,GAAGS,OAAK,CAACT,UAAvB;AACA,IAAIG,UAAU,GAAGM,OAAK,CAACN,UAAvB;AAEA,IAAIO,WAAS,GAAG8B,QAAM,CAAC9B,SAAvB;AAEA,IAAIiD,QAAQ,GAAG,CACb,UADa,EACD,UADC,EACW,UADX,EACuB,UADvB,EAEb,UAFa,EAED,UAFC,EAEW,UAFX,EAEuB,UAFvB,EAGb,UAHa,EAGD,UAHC,EAGW,UAHX,EAGuB,UAHvB,EAIb,UAJa,EAID,UAJC,EAIW,UAJX,EAIuB,UAJvB,EAKb,UALa,EAKD,UALC,EAKW,UALX,EAKuB,UALvB,EAMb,UANa,EAMD,UANC,EAMW,UANX,EAMuB,UANvB,EAOb,UAPa,EAOD,UAPC,EAOW,UAPX,EAOuB,UAPvB,EAQb,UARa,EAQD,UARC,EAQW,UARX,EAQuB,UARvB,EASb,UATa,EASD,UATC,EASW,UATX,EASuB,UATvB,EAUb,UAVa,EAUD,UAVC,EAUW,UAVX,EAUuB,UAVvB,EAWb,UAXa,EAWD,UAXC,EAWW,UAXX,EAWuB,UAXvB,EAYb,UAZa,EAYD,UAZC,EAYW,UAZX,EAYuB,UAZvB,EAab,UAba,EAaD,UAbC,EAaW,UAbX,EAauB,UAbvB,EAcb,UAda,EAcD,UAdC,EAcW,UAdX,EAcuB,UAdvB,EAeb,UAfa,EAeD,UAfC,EAeW,UAfX,EAeuB,UAfvB,EAgBb,UAhBa,EAgBD,UAhBC,EAgBW,UAhBX,EAgBuB,UAhBvB,EAiBb,UAjBa,EAiBD,UAjBC,EAiBW,UAjBX,EAiBuB,UAjBvB,EAkBb,UAlBa,EAkBD,UAlBC,EAkBW,UAlBX,EAkBuB,UAlBvB,EAmBb,UAnBa,EAmBD,UAnBC,EAmBW,UAnBX,EAmBuB,UAnBvB,EAoBb,UApBa,EAoBD,UApBC,EAoBW,UApBX,EAoBuB,UApBvB,EAqBb,UArBa,EAqBD,UArBC,EAqBW,UArBX,EAqBuB,UArBvB,EAsBb,UAtBa,EAsBD,UAtBC,EAsBW,UAtBX,EAsBuB,UAtBvB,EAuBb,UAvBa,EAuBD,UAvBC,EAuBW,UAvBX,EAuBuB,UAvBvB,EAwBb,UAxBa,EAwBD,UAxBC,EAwBW,UAxBX,EAwBuB,UAxBvB,EAyBb,UAzBa,EAyBD,UAzBC,EAyBW,UAzBX,EAyBuB,UAzBvB,EA0Bb,UA1Ba,EA0BD,UA1BC,EA0BW,UA1BX,EA0BuB,UA1BvB,EA2Bb,UA3Ba,EA2BD,UA3BC,EA2BW,UA3BX,EA2BuB,UA3BvB,EA4Bb,UA5Ba,EA4BD,UA5BC,EA4BW,UA5BX,EA4BuB,UA5BvB,EA6Bb,UA7Ba,EA6BD,UA7BC,EA6BW,UA7BX,EA6BuB,UA7BvB,EA8Bb,UA9Ba,EA8BD,UA9BC,EA8BW,UA9BX,EA8BuB,UA9BvB,EA+Bb,UA/Ba,EA+BD,UA/BC,EA+BW,UA/BX,EA+BuB,UA/BvB,EAgCb,UAhCa,EAgCD,UAhCC,EAgCW,UAhCX,EAgCuB,UAhCvB,EAiCb,UAjCa,EAiCD,UAjCC,EAiCW,UAjCX,EAiCuB,UAjCvB,EAkCb,UAlCa,EAkCD,UAlCC,EAkCW,UAlCX,EAkCuB,UAlCvB,EAmCb,UAnCa,EAmCD,UAnCC,EAmCW,UAnCX,EAmCuB,UAnCvB,EAoCb,UApCa,EAoCD,UApCC,EAoCW,UApCX,EAoCuB,UApCvB,EAqCb,UArCa,EAqCD,UArCC,EAqCW,UArCX,EAqCuB,UArCvB,EAsCb,UAtCa,EAsCD,UAtCC,EAsCW,UAtCX,EAsCuB,UAtCvB,EAuCb,UAvCa,EAuCD,UAvCC,EAuCW,UAvCX,EAuCuB,UAvCvB,EAwCb,UAxCa,EAwCD,UAxCC,EAwCW,UAxCX,EAwCuB,UAxCvB,CAAf;;AA2CA,SAASC,QAAT,GAAkB;EAChB,IAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,EAAP;EAEFlD,WAAS,CAACmC,IAAVnC,CAAe,IAAfA;EACA,KAAKoC,CAAL,GAAS,CACP,UADO,EACK,UADL,EAEP,UAFO,EAEK,UAFL,EAGP,UAHO,EAGK,UAHL,EAIP,UAJO,EAIK,UAJL,EAKP,UALO,EAKK,UALL,EAMP,UANO,EAMK,UANL,EAOP,UAPO,EAOK,UAPL,EAQP,UARO,EAQK,UARL,CAAT;EASA,KAAK7E,CAAL,GAAS0F,QAAT;EACA,KAAKZ,CAAL,GAAS,IAAIpG,KAAJ,CAAU,GAAV,CAAT;AACD;;AACD8D,OAAK,CAACjF,QAANiF,CAAemD,QAAfnD,EAAuBC,WAAvBD;IACAoD,IAAc,GAAGD;AAEjBA,QAAM,CAAC/C,SAAP+C,GAAmB,IAAnBA;AACAA,QAAM,CAAC9C,OAAP8C,GAAiB,GAAjBA;AACAA,QAAM,CAAC7C,YAAP6C,GAAsB,GAAtBA;AACAA,QAAM,CAAC5C,SAAP4C,GAAmB,GAAnBA;;AAEAA,QAAM,CAAChI,SAAPgI,CAAiBE,aAAjBF,GAAiC,SAASE,aAAT,CAAuB/I,GAAvB,EAA4B+C,KAA5B,EAAmC;EAClE,IAAIiF,CAAC,GAAG,KAAKA,CAAb,CADkE,CAGpE;;EACE,KAAK,IAAIzG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EACEyG,CAAC,CAACzG,CAAD,CAAD,GAAOvB,GAAG,CAAC+C,KAAK,GAAGxB,CAAT,CAAV;;EACF,OAAOA,CAAC,GAAGyG,CAAC,CAACvG,MAAb,EAAqBF,CAAC,IAAI,CAA1B,EAA6B;IAC3B,IAAIyH,KAAK,GAAGC,SAAS,CAACjB,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAF,EAAWyG,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAZ,CAArB,CAD2B,CACe;;IAC1C,IAAI2H,KAAK,GAAGC,SAAS,CAACnB,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAF,EAAWyG,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAZ,CAArB;IACA,IAAI6H,KAAK,GAAGpB,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb,CAH2B,CAGL;;IACtB,IAAI8H,KAAK,GAAGrB,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb;IACA,IAAI+H,KAAK,GAAGC,SAAS,CAACvB,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAF,EAAYyG,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb,CAArB,CAL2B,CAKiB;;IAC5C,IAAIiI,KAAK,GAAGC,SAAS,CAACzB,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAF,EAAYyG,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb,CAArB;IACA,IAAImI,KAAK,GAAG1B,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb,CAP2B,CAOL;;IACtB,IAAIoI,KAAK,GAAG3B,CAAC,CAACzG,CAAC,GAAG,EAAL,CAAb;IAEAyG,CAAC,CAACzG,CAAD,CAAD,GAAOmD,UAAU,CACfsE,KADe,EACRE,KADQ,EAEfE,KAFe,EAERC,KAFQ,EAGfC,KAHe,EAGRE,KAHQ,EAIfE,KAJe,EAIRC,KAJQ,CAAjB;IAKA3B,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAD,GAAWyD,UAAU,CACnBgE,KADmB,EACZE,KADY,EAEnBE,KAFmB,EAEZC,KAFY,EAGnBC,KAHmB,EAGZE,KAHY,EAInBE,KAJmB,EAIZC,KAJY,CAArB;EAKD;AACF,CA3BDd;;AA6BAA,QAAM,CAAChI,SAAPgI,CAAiBvC,OAAjBuC,GAA2B,SAASvC,OAAT,CAAiBtG,GAAjB,EAAsB+C,KAAtB,EAA6B;EACtD,KAAKgG,aAAL,CAAmB/I,GAAnB,EAAwB+C,KAAxB;;EAEA,IAAIiF,CAAC,GAAG,KAAKA,CAAb;EAEA,IAAI9D,EAAE,GAAG,KAAK6D,CAAL,CAAO,CAAP,CAAT;EACA,IAAI5D,EAAE,GAAG,KAAK4D,CAAL,CAAO,CAAP,CAAT;EACA,IAAI3D,EAAE,GAAG,KAAK2D,CAAL,CAAO,CAAP,CAAT;EACA,IAAI1D,EAAE,GAAG,KAAK0D,CAAL,CAAO,CAAP,CAAT;EACA,IAAIpD,EAAE,GAAG,KAAKoD,CAAL,CAAO,CAAP,CAAT;EACA,IAAInD,EAAE,GAAG,KAAKmD,CAAL,CAAO,CAAP,CAAT;EACA,IAAIlD,EAAE,GAAG,KAAKkD,CAAL,CAAO,CAAP,CAAT;EACA,IAAIjD,EAAE,GAAG,KAAKiD,CAAL,CAAO,CAAP,CAAT;EACA,IAAI7C,EAAE,GAAG,KAAK6C,CAAL,CAAO,CAAP,CAAT;EACA,IAAI5C,EAAE,GAAG,KAAK4C,CAAL,CAAO,CAAP,CAAT;EACA,IAAI6B,EAAE,GAAG,KAAK7B,CAAL,CAAO,EAAP,CAAT;EACA,IAAI8B,EAAE,GAAG,KAAK9B,CAAL,CAAO,EAAP,CAAT;EACA,IAAI+B,EAAE,GAAG,KAAK/B,CAAL,CAAO,EAAP,CAAT;EACA,IAAIgC,EAAE,GAAG,KAAKhC,CAAL,CAAO,EAAP,CAAT;EACA,IAAIiC,EAAE,GAAG,KAAKjC,CAAL,CAAO,EAAP,CAAT;EACA,IAAIkC,EAAE,GAAG,KAAKlC,CAAL,CAAO,EAAP,CAAT;EAEAjI,QAAM,CAAC,KAAKoD,CAAL,CAAOzB,MAAP,KAAkBuG,CAAC,CAACvG,MAArB,CAAN3B;;EACA,KAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyG,CAAC,CAACvG,MAAtB,EAA8BF,CAAC,IAAI,CAAnC,EAAsC;IACpC,IAAIyH,KAAK,GAAGgB,EAAZ;IACA,IAAId,KAAK,GAAGe,EAAZ;IACA,IAAIb,KAAK,GAAGc,SAAS,CAAChF,EAAD,EAAKC,EAAL,CAArB;IACA,IAAIkE,KAAK,GAAGc,SAAS,CAACjF,EAAD,EAAKC,EAAL,CAArB;IACA,IAAImE,KAAK,GAAGc,OAAO,CAAClF,EAAD,EAAKC,EAAL,EAASyE,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,CAAnB;IACA,IAAIN,KAAK,GAAGa,OAAO,CAACnF,EAAD,EAAKC,EAAL,EAASyE,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,CAAnB;IACA,IAAIL,KAAK,GAAG,KAAKxG,CAAL,CAAO3B,CAAP,CAAZ;IACA,IAAIoI,KAAK,GAAG,KAAKzG,CAAL,CAAO3B,CAAC,GAAG,CAAX,CAAZ;IACA,IAAI+I,KAAK,GAAGtC,CAAC,CAACzG,CAAD,CAAb;IACA,IAAIgJ,KAAK,GAAGvC,CAAC,CAACzG,CAAC,GAAG,CAAL,CAAb;IAEA,IAAIiJ,KAAK,GAAGvF,UAAU,CACpB+D,KADoB,EACbE,KADa,EAEpBE,KAFoB,EAEbC,KAFa,EAGpBC,KAHoB,EAGbE,KAHa,EAIpBE,KAJoB,EAIbC,KAJa,EAKpBW,KALoB,EAKbC,KALa,CAAtB;IAMA,IAAIE,KAAK,GAAGrF,UAAU,CACpB4D,KADoB,EACbE,KADa,EAEpBE,KAFoB,EAEbC,KAFa,EAGpBC,KAHoB,EAGbE,KAHa,EAIpBE,KAJoB,EAIbC,KAJa,EAKpBW,KALoB,EAKbC,KALa,CAAtB;IAOAvB,KAAK,GAAG0B,SAAS,CAACxG,EAAD,EAAKC,EAAL,CAAjB;IACA+E,KAAK,GAAGyB,SAAS,CAACzG,EAAD,EAAKC,EAAL,CAAjB;IACAiF,KAAK,GAAGwB,QAAQ,CAAC1G,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBM,EAAjB,CAAhB;IACA0E,KAAK,GAAGwB,QAAQ,CAAC3G,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBM,EAAjB,EAAqBC,EAArB,CAAhB;IAEA,IAAIkG,KAAK,GAAGtG,QAAQ,CAACwE,KAAD,EAAQE,KAAR,EAAeE,KAAf,EAAsBC,KAAtB,CAApB;IACA,IAAI0B,KAAK,GAAGtG,QAAQ,CAACuE,KAAD,EAAQE,KAAR,EAAeE,KAAf,EAAsBC,KAAtB,CAApB;IAEAW,EAAE,GAAGF,EAAL;IACAG,EAAE,GAAGF,EAAL;IAEAD,EAAE,GAAGF,EAAL;IACAG,EAAE,GAAGF,EAAL;IAEAD,EAAE,GAAG1E,EAAL;IACA2E,EAAE,GAAG1E,EAAL;IAEAD,EAAE,GAAGV,QAAQ,CAACK,EAAD,EAAKC,EAAL,EAAS0F,KAAT,EAAgBC,KAAhB,CAAb;IACAtF,EAAE,GAAGV,QAAQ,CAACK,EAAD,EAAKA,EAAL,EAAS0F,KAAT,EAAgBC,KAAhB,CAAb;IAEA5F,EAAE,GAAGF,EAAL;IACAG,EAAE,GAAGF,EAAL;IAEAD,EAAE,GAAGP,EAAL;IACAQ,EAAE,GAAGP,EAAL;IAEAD,EAAE,GAAGF,EAAL;IACAG,EAAE,GAAGF,EAAL;IAEAD,EAAE,GAAGM,QAAQ,CAACgG,KAAD,EAAQC,KAAR,EAAeK,KAAf,EAAsBC,KAAtB,CAAb;IACA5G,EAAE,GAAGM,QAAQ,CAAC+F,KAAD,EAAQC,KAAR,EAAeK,KAAf,EAAsBC,KAAtB,CAAb;EACD;;EAEDhH,KAAK,CAAC,KAAKgE,CAAN,EAAS,CAAT,EAAY7D,EAAZ,EAAgBC,EAAhB,CAAL;EACAJ,KAAK,CAAC,KAAKgE,CAAN,EAAS,CAAT,EAAY3D,EAAZ,EAAgBC,EAAhB,CAAL;EACAN,KAAK,CAAC,KAAKgE,CAAN,EAAS,CAAT,EAAYpD,EAAZ,EAAgBC,EAAhB,CAAL;EACAb,KAAK,CAAC,KAAKgE,CAAN,EAAS,CAAT,EAAYlD,EAAZ,EAAgBC,EAAhB,CAAL;EACAf,KAAK,CAAC,KAAKgE,CAAN,EAAS,CAAT,EAAY7C,EAAZ,EAAgBC,EAAhB,CAAL;EACApB,KAAK,CAAC,KAAKgE,CAAN,EAAS,EAAT,EAAa6B,EAAb,EAAiBC,EAAjB,CAAL;EACA9F,KAAK,CAAC,KAAKgE,CAAN,EAAS,EAAT,EAAa+B,EAAb,EAAiBC,EAAjB,CAAL;EACAhG,KAAK,CAAC,KAAKgE,CAAN,EAAS,EAAT,EAAaiC,EAAb,EAAiBC,EAAjB,CAAL;AACD,CAzFDpB;;AA2FAA,QAAM,CAAChI,SAAPgI,CAAiBpC,OAAjBoC,GAA2B,SAAStC,MAAT,CAAgB5E,GAAhB,EAAqB;EAC9C,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAnBrC,EAAsB,KAAtBA,CAAP;AACH,CALDmD;;AAOA,SAASuB,OAAT,CAAiBY,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqC;EACnC,IAAI/K,CAAC,GAAI2K,EAAE,GAAGE,EAAN,GAAc,CAACF,EAAF,GAAQI,EAA7B;EACA,IAAI/K,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASgK,OAAT,CAAiBW,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyC;EACvC,IAAIhL,CAAC,GAAI4K,EAAE,GAAGE,EAAN,GAAc,CAACF,EAAF,GAAQI,EAA7B;EACA,IAAIhL,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASuK,QAAT,CAAkBI,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;EACpC,IAAI/K,CAAC,GAAI2K,EAAE,GAAGE,EAAN,GAAaF,EAAE,GAAGI,EAAlB,GAAyBF,EAAE,GAAGE,EAAtC;EACA,IAAI/K,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASwK,QAAT,CAAkBG,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0C;EACxC,IAAIhL,CAAC,GAAI4K,EAAE,GAAGE,EAAN,GAAaF,EAAE,GAAGI,EAAlB,GAAyBF,EAAE,GAAGE,EAAtC;EACA,IAAIhL,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASqK,SAAT,CAAmBM,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAIjC,KAAK,GAAG3D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI7B,KAAK,GAAG/D,SAAS,CAAC4F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAFyB,CAEQ;;EACjC,IAAI1B,KAAK,GAAGjE,SAAS,CAAC4F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;EAEjC,IAAI3K,CAAC,GAAG2I,KAAK,GAAGI,KAAR,GAAgBE,KAAxB;EACA,IAAIjJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASsK,SAAT,CAAmBK,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAI/B,KAAK,GAAG3D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI5B,KAAK,GAAG9D,SAAS,CAAC0F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAFyB,CAEQ;;EACjC,IAAIxB,KAAK,GAAGjE,SAAS,CAAC0F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;EAEjC,IAAI3K,CAAC,GAAG6I,KAAK,GAAGG,KAAR,GAAgBG,KAAxB;EACA,IAAInJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAAS6J,SAAT,CAAmBc,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAIjC,KAAK,GAAG3D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI7B,KAAK,GAAG/D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI3B,KAAK,GAAGjE,SAAS,CAAC4F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;EAEjC,IAAI3K,CAAC,GAAG2I,KAAK,GAAGI,KAAR,GAAgBE,KAAxB;EACA,IAAIjJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAAS8J,SAAT,CAAmBa,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAI/B,KAAK,GAAG3D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI5B,KAAK,GAAG9D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAIzB,KAAK,GAAGjE,SAAS,CAAC0F,EAAD,EAAKD,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;EAEjC,IAAI3K,CAAC,GAAG6I,KAAK,GAAGG,KAAR,GAAgBG,KAAxB;EACA,IAAInJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASkJ,SAAT,CAAmByB,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAIjC,KAAK,GAAG3D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,CAAT,CAArB;EACA,IAAI7B,KAAK,GAAG/D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,CAAT,CAArB;EACA,IAAI3B,KAAK,GAAG9D,QAAQ,CAACwF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAApB;EAEA,IAAI5K,CAAC,GAAG2I,KAAK,GAAGI,KAAR,GAAgBE,KAAxB;EACA,IAAIjJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAASoJ,SAAT,CAAmBuB,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAI/B,KAAK,GAAG3D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAArB;EACA,IAAI5B,KAAK,GAAG9D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAArB;EACA,IAAIzB,KAAK,GAAG/D,QAAQ,CAACuF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAApB;EAEA,IAAI5K,CAAC,GAAG6I,KAAK,GAAGG,KAAR,GAAgBG,KAAxB;EACA,IAAInJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAAS4I,SAAT,CAAmB+B,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAIjC,KAAK,GAAG3D,SAAS,CAAC2F,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI7B,KAAK,GAAG/D,SAAS,CAAC4F,EAAD,EAAKD,EAAL,EAAS,EAAT,CAArB,CAFyB,CAES;;EAClC,IAAI1B,KAAK,GAAG9D,QAAQ,CAACwF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAApB;EAEA,IAAI5K,CAAC,GAAG2I,KAAK,GAAGI,KAAR,GAAgBE,KAAxB;EACA,IAAIjJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACD;;AAED,SAAS8I,SAAT,CAAmB6B,EAAnB,EAAuBC,EAAvB,EAA2B;EACzB,IAAI/B,KAAK,GAAG3D,SAAS,CAACyF,EAAD,EAAKC,EAAL,EAAS,EAAT,CAArB;EACA,IAAI5B,KAAK,GAAG9D,SAAS,CAAC0F,EAAD,EAAKD,EAAL,EAAS,EAAT,CAArB,CAFyB,CAES;;EAClC,IAAIxB,KAAK,GAAG/D,QAAQ,CAACuF,EAAD,EAAKC,EAAL,EAAS,CAAT,CAApB;EAEA,IAAI5K,CAAC,GAAG6I,KAAK,GAAGG,KAAR,GAAgBG,KAAxB;EACA,IAAInJ,CAAC,GAAG,CAAR,EACEA,CAAC,IAAI,WAAL;EACF,OAAOA,CAAP;AACF;;ACvUA,IAAIqF,OAAK,GAAGtE,OAAZ;AAEA,IAAIyH,MAAM,GAAGxH,IAAb;;AAEA,SAASiK,MAAT,GAAkB;EAChB,IAAI,EAAE,gBAAgBA,MAAlB,CAAJ,EACE,OAAO,IAAIA,MAAJ,EAAP;EAEFzC,MAAM,CAACf,IAAP,CAAY,IAAZ;EACA,KAAKC,CAAL,GAAS,CACP,UADO,EACK,UADL,EAEP,UAFO,EAEK,UAFL,EAGP,UAHO,EAGK,UAHL,EAIP,UAJO,EAIK,UAJL,EAKP,UALO,EAKK,UALL,EAMP,UANO,EAMK,UANL,EAOP,UAPO,EAOK,UAPL,EAQP,UARO,EAQK,UARL,CAAT;AASD;;AACDrC,OAAK,CAACjF,QAANiF,CAAe4F,MAAf5F,EAAuBmD,MAAvBnD;IACA6F,IAAc,GAAGD;AAEjBA,MAAM,CAACxF,SAAP,GAAmB,IAAnB;AACAwF,MAAM,CAACvF,OAAP,GAAiB,GAAjB;AACAuF,MAAM,CAACtF,YAAP,GAAsB,GAAtB;AACAsF,MAAM,CAACrF,SAAP,GAAmB,GAAnB;;AAEAqF,MAAM,CAACzK,SAAP,CAAiB4F,OAAjB,GAA2B,SAASF,MAAT,CAAgB5E,GAAhB,EAAqB;EAC9C,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAL,CAAOjG,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAd4D,EAAmC,KAAnCA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAL,CAAOjG,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAd4D,EAAmC,KAAnCA,CAAP;AACH,CALD;;WC3BetE;aACEC;aACAsG;aACAO;aACAsD;;ACJjB,IAAI9F,OAAK,GAAGtE,OAAZ;AACA,IAAIqG,MAAM,GAAGpG,QAAb;AAEA,IAAIkC,MAAM,GAAGmC,OAAK,CAACnC,MAAnB;AACA,IAAIC,KAAK,GAAGkC,OAAK,CAAClC,KAAlB;AACA,IAAIE,OAAO,GAAGgC,OAAK,CAAChC,OAApB;AACA,IAAIC,OAAO,GAAG+B,OAAK,CAAC/B,OAApB;AACA,IAAIgC,SAAS,GAAG8B,MAAM,CAAC9B,SAAvB;;AAEA,SAAS8F,SAAT,GAAqB;EACnB,IAAI,EAAE,gBAAgBA,SAAlB,CAAJ,EACE,OAAO,IAAIA,SAAJ,EAAP;EAEF9F,SAAS,CAACmC,IAAV,CAAe,IAAf;EAEA,KAAKC,CAAL,GAAS,CAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,UAAlD,CAAT;EACA,KAAKpF,MAAL,GAAc,QAAd;AACD;;AACD+C,OAAK,CAACjF,QAANiF,CAAe+F,SAAf/F,EAA0BC,SAA1BD;mBACoB+F;AAEpBA,SAAS,CAAC3F,SAAV,GAAsB,GAAtB;AACA2F,SAAS,CAAC1F,OAAV,GAAoB,GAApB;AACA0F,SAAS,CAACzF,YAAV,GAAyB,GAAzB;AACAyF,SAAS,CAACxF,SAAV,GAAsB,EAAtB;;AAEAwF,SAAS,CAAC5K,SAAV,CAAoByF,OAApB,GAA8B,SAASF,MAAT,CAAgBpG,GAAhB,EAAqB+C,KAArB,EAA4B;EACxD,IAAI2I,CAAC,GAAG,KAAK3D,CAAL,CAAO,CAAP,CAAR;EACA,IAAI4D,CAAC,GAAG,KAAK5D,CAAL,CAAO,CAAP,CAAR;EACA,IAAI6D,CAAC,GAAG,KAAK7D,CAAL,CAAO,CAAP,CAAR;EACA,IAAI8D,CAAC,GAAG,KAAK9D,CAAL,CAAO,CAAP,CAAR;EACA,IAAI+D,CAAC,GAAG,KAAK/D,CAAL,CAAO,CAAP,CAAR;EACA,IAAIgE,EAAE,GAAGL,CAAT;EACA,IAAIM,EAAE,GAAGL,CAAT;EACA,IAAIM,EAAE,GAAGL,CAAT;EACA,IAAIM,EAAE,GAAGL,CAAT;EACA,IAAIM,EAAE,GAAGL,CAAT;;EACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IAC3B,IAAIC,CAAC,GAAG7I,KAAK,CACXD,MAAM,CACJI,OAAO,CAAC+H,CAAD,EAAIpD,CAAC,CAAC8D,CAAD,EAAIT,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAL,EAAmB7L,GAAG,CAACK,CAAC,CAAC+L,CAAD,CAAD,GAAOrJ,KAAR,CAAtB,EAAsCuJ,CAAC,CAACF,CAAD,CAAvC,CADH,EAEJtF,CAAC,CAACsF,CAAD,CAFG,CADK,EAIXN,CAJW,CAAb;IAKAJ,CAAC,GAAGI,CAAJ;IACAA,CAAC,GAAGD,CAAJ;IACAA,CAAC,GAAGtI,MAAM,CAACqI,CAAD,EAAI,EAAJ,CAAV;IACAA,CAAC,GAAGD,CAAJ;IACAA,CAAC,GAAGU,CAAJ;IACAA,CAAC,GAAG7I,KAAK,CACPD,MAAM,CACJI,OAAO,CAACoI,EAAD,EAAKzD,CAAC,CAAC,KAAK8D,CAAN,EAASJ,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,CAAN,EAA4BlM,GAAG,CAACuM,EAAE,CAACH,CAAD,CAAF,GAAQrJ,KAAT,CAA/B,EAAgDyJ,EAAE,CAACJ,CAAD,CAAlD,CADH,EAEJK,EAAE,CAACL,CAAD,CAFE,CADC,EAIPD,EAJO,CAAT;IAKAJ,EAAE,GAAGI,EAAL;IACAA,EAAE,GAAGD,EAAL;IACAA,EAAE,GAAG3I,MAAM,CAAC0I,EAAD,EAAK,EAAL,CAAX;IACAA,EAAE,GAAGD,EAAL;IACAA,EAAE,GAAGK,CAAL;EACD;;EACDA,CAAC,GAAG3I,OAAO,CAAC,KAAKqE,CAAL,CAAO,CAAP,CAAD,EAAY6D,CAAZ,EAAeM,EAAf,CAAX;EACA,KAAKnE,CAAL,CAAO,CAAP,IAAYrE,OAAO,CAAC,KAAKqE,CAAL,CAAO,CAAP,CAAD,EAAY8D,CAAZ,EAAeM,EAAf,CAAnB;EACA,KAAKpE,CAAL,CAAO,CAAP,IAAYrE,OAAO,CAAC,KAAKqE,CAAL,CAAO,CAAP,CAAD,EAAY+D,CAAZ,EAAeC,EAAf,CAAnB;EACA,KAAKhE,CAAL,CAAO,CAAP,IAAYrE,OAAO,CAAC,KAAKqE,CAAL,CAAO,CAAP,CAAD,EAAY2D,CAAZ,EAAeM,EAAf,CAAnB;EACA,KAAKjE,CAAL,CAAO,CAAP,IAAYrE,OAAO,CAAC,KAAKqE,CAAL,CAAO,CAAP,CAAD,EAAY4D,CAAZ,EAAeM,EAAf,CAAnB;EACA,KAAKlE,CAAL,CAAO,CAAP,IAAYsE,CAAZ;AACD,CAvCD;;AAyCAZ,SAAS,CAAC5K,SAAV,CAAoB4F,OAApB,GAA8B,SAASF,MAAT,CAAgB5E,GAAhB,EAAqB;EACjD,IAAIA,GAAG,KAAK,KAAZ,EACE,OAAO+D,OAAK,CAAChD,OAANgD,CAAc,KAAKqC,CAAnBrC,EAAsB,QAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAACvC,OAANuC,CAAc,KAAKqC,CAAnBrC,EAAsB,QAAtBA,CAAP;AACH,CALD;;AAOA,SAAS4C,CAAT,CAAW8D,CAAX,EAAcrF,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;EACrB,IAAImF,CAAC,IAAI,EAAT,EACE,OAAOrF,CAAC,GAAGC,CAAJ,GAAQC,CAAf,CADF,KAEK,IAAImF,CAAC,IAAI,EAAT,EACH,OAAQrF,CAAC,GAAGC,CAAL,GAAY,CAACD,CAAF,GAAOE,CAAzB,CADG,KAEA,IAAImF,CAAC,IAAI,EAAT,EACH,OAAO,CAACrF,CAAC,GAAI,CAACC,CAAP,IAAaC,CAApB,CADG,KAEA,IAAImF,CAAC,IAAI,EAAT,EACH,OAAQrF,CAAC,GAAGE,CAAL,GAAWD,CAAC,GAAI,CAACC,CAAxB,CADG,KAGH,OAAOF,CAAC,IAAIC,CAAC,GAAI,CAACC,CAAV,CAAR;AACH;;AAED,SAASqF,CAAT,CAAWF,CAAX,EAAc;EACZ,IAAIA,CAAC,IAAI,EAAT,EACE,OAAO,UAAP,CADF,KAEK,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAGH,OAAO,UAAP;AACH;;AAED,SAASI,EAAT,CAAYJ,CAAZ,EAAe;EACb,IAAIA,CAAC,IAAI,EAAT,EACE,OAAO,UAAP,CADF,KAEK,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAIA,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAGH,OAAO,UAAP;AACH;;AAED,IAAI/L,CAAC,GAAG,CACN,CADM,EACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EACS,CADT,EACY,CADZ,EACe,CADf,EACkB,CADlB,EACqB,CADrB,EACwB,EADxB,EAC4B,EAD5B,EACgC,EADhC,EACoC,EADpC,EACwC,EADxC,EAC4C,EAD5C,EAEN,CAFM,EAEH,CAFG,EAEA,EAFA,EAEI,CAFJ,EAEO,EAFP,EAEW,CAFX,EAEc,EAFd,EAEkB,CAFlB,EAEqB,EAFrB,EAEyB,CAFzB,EAE4B,CAF5B,EAE+B,CAF/B,EAEkC,CAFlC,EAEqC,EAFrC,EAEyC,EAFzC,EAE6C,CAF7C,EAGN,CAHM,EAGH,EAHG,EAGC,EAHD,EAGK,CAHL,EAGQ,CAHR,EAGW,EAHX,EAGe,CAHf,EAGkB,CAHlB,EAGqB,CAHrB,EAGwB,CAHxB,EAG2B,CAH3B,EAG8B,CAH9B,EAGiC,EAHjC,EAGqC,EAHrC,EAGyC,CAHzC,EAG4C,EAH5C,EAIN,CAJM,EAIH,CAJG,EAIA,EAJA,EAII,EAJJ,EAIQ,CAJR,EAIW,CAJX,EAIc,EAJd,EAIkB,CAJlB,EAIqB,EAJrB,EAIyB,CAJzB,EAI4B,CAJ5B,EAI+B,EAJ/B,EAImC,EAJnC,EAIuC,CAJvC,EAI0C,CAJ1C,EAI6C,CAJ7C,EAKN,CALM,EAKH,CALG,EAKA,CALA,EAKG,CALH,EAKM,CALN,EAKS,EALT,EAKa,CALb,EAKgB,EALhB,EAKoB,EALpB,EAKwB,CALxB,EAK2B,CAL3B,EAK8B,CAL9B,EAKiC,EALjC,EAKqC,CALrC,EAKwC,EALxC,EAK4C,EAL5C,CAAR;AAQA,IAAIkM,EAAE,GAAG,CACP,CADO,EACJ,EADI,EACA,CADA,EACG,CADH,EACM,CADN,EACS,CADT,EACY,EADZ,EACgB,CADhB,EACmB,EADnB,EACuB,CADvB,EAC0B,EAD1B,EAC8B,CAD9B,EACiC,CADjC,EACoC,EADpC,EACwC,CADxC,EAC2C,EAD3C,EAEP,CAFO,EAEJ,EAFI,EAEA,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,EAFT,EAEa,CAFb,EAEgB,EAFhB,EAEoB,EAFpB,EAEwB,EAFxB,EAE4B,CAF5B,EAE+B,EAF/B,EAEmC,CAFnC,EAEsC,CAFtC,EAEyC,CAFzC,EAE4C,CAF5C,EAGP,EAHO,EAGH,CAHG,EAGA,CAHA,EAGG,CAHH,EAGM,CAHN,EAGS,EAHT,EAGa,CAHb,EAGgB,CAHhB,EAGmB,EAHnB,EAGuB,CAHvB,EAG0B,EAH1B,EAG8B,CAH9B,EAGiC,EAHjC,EAGqC,CAHrC,EAGwC,CAHxC,EAG2C,EAH3C,EAIP,CAJO,EAIJ,CAJI,EAID,CAJC,EAIE,CAJF,EAIK,CAJL,EAIQ,EAJR,EAIY,EAJZ,EAIgB,CAJhB,EAImB,CAJnB,EAIsB,EAJtB,EAI0B,CAJ1B,EAI6B,EAJ7B,EAIiC,CAJjC,EAIoC,CAJpC,EAIuC,EAJvC,EAI2C,EAJ3C,EAKP,EALO,EAKH,EALG,EAKC,EALD,EAKK,CALL,EAKQ,CALR,EAKW,CALX,EAKc,CALd,EAKiB,CALjB,EAKoB,CALpB,EAKuB,CALvB,EAK0B,EAL1B,EAK8B,EAL9B,EAKkC,CALlC,EAKqC,CALrC,EAKwC,CALxC,EAK2C,EAL3C,CAAT;AAQA,IAAIzF,CAAC,GAAG,CACN,EADM,EACF,EADE,EACE,EADF,EACM,EADN,EACU,CADV,EACa,CADb,EACgB,CADhB,EACmB,CADnB,EACsB,EADtB,EAC0B,EAD1B,EAC8B,EAD9B,EACkC,EADlC,EACsC,CADtC,EACyC,CADzC,EAC4C,CAD5C,EAC+C,CAD/C,EAEN,CAFM,EAEH,CAFG,EAEA,CAFA,EAEG,EAFH,EAEO,EAFP,EAEW,CAFX,EAEc,CAFd,EAEiB,EAFjB,EAEqB,CAFrB,EAEwB,EAFxB,EAE4B,EAF5B,EAEgC,CAFhC,EAEmC,EAFnC,EAEuC,CAFvC,EAE0C,EAF1C,EAE8C,EAF9C,EAGN,EAHM,EAGF,EAHE,EAGE,CAHF,EAGK,CAHL,EAGQ,EAHR,EAGY,CAHZ,EAGe,EAHf,EAGmB,EAHnB,EAGuB,EAHvB,EAG2B,CAH3B,EAG8B,EAH9B,EAGkC,CAHlC,EAGqC,CAHrC,EAGwC,EAHxC,EAG4C,CAH5C,EAG+C,CAH/C,EAIN,EAJM,EAIF,EAJE,EAIE,EAJF,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,CAJlB,EAIqB,CAJrB,EAIwB,CAJxB,EAI2B,EAJ3B,EAI+B,CAJ/B,EAIkC,CAJlC,EAIqC,CAJrC,EAIwC,CAJxC,EAI2C,CAJ3C,EAI8C,EAJ9C,EAKN,CALM,EAKH,EALG,EAKC,CALD,EAKI,EALJ,EAKQ,CALR,EAKW,CALX,EAKc,EALd,EAKkB,EALlB,EAKsB,CALtB,EAKyB,EALzB,EAK6B,EAL7B,EAKiC,EALjC,EAKqC,EALrC,EAKyC,CALzC,EAK4C,CAL5C,EAK+C,CAL/C,CAAR;AAQA,IAAI2F,EAAE,GAAG,CACP,CADO,EACJ,CADI,EACD,CADC,EACE,EADF,EACM,EADN,EACU,EADV,EACc,EADd,EACkB,CADlB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAC8B,EAD9B,EACkC,EADlC,EACsC,EADtC,EAC0C,EAD1C,EAC8C,CAD9C,EAEP,CAFO,EAEJ,EAFI,EAEA,EAFA,EAEI,CAFJ,EAEO,EAFP,EAEW,CAFX,EAEc,CAFd,EAEiB,EAFjB,EAEqB,CAFrB,EAEwB,CAFxB,EAE2B,EAF3B,EAE+B,CAF/B,EAEkC,CAFlC,EAEqC,EAFrC,EAEyC,EAFzC,EAE6C,EAF7C,EAGP,CAHO,EAGJ,CAHI,EAGD,EAHC,EAGG,EAHH,EAGO,CAHP,EAGU,CAHV,EAGa,CAHb,EAGgB,EAHhB,EAGoB,EAHpB,EAGwB,EAHxB,EAG4B,CAH5B,EAG+B,EAH/B,EAGmC,EAHnC,EAGuC,EAHvC,EAG2C,CAH3C,EAG8C,CAH9C,EAIP,EAJO,EAIH,CAJG,EAIA,CAJA,EAIG,EAJH,EAIO,EAJP,EAIW,EAJX,EAIe,CAJf,EAIkB,EAJlB,EAIsB,CAJtB,EAIyB,CAJzB,EAI4B,EAJ5B,EAIgC,CAJhC,EAImC,EAJnC,EAIuC,CAJvC,EAI0C,EAJ1C,EAI8C,CAJ9C,EAKP,CALO,EAKJ,CALI,EAKD,EALC,EAKG,CALH,EAKM,EALN,EAKU,CALV,EAKa,EALb,EAKiB,CALjB,EAKoB,CALpB,EAKuB,EALvB,EAK2B,CAL3B,EAK8B,CAL9B,EAKiC,EALjC,EAKqC,EALrC,EAKyC,EALzC,EAK6C,EAL7C,CAAT;ACzIA,IAAI/G,KAAK,GAAGtE,OAAZ;AACA,IAAItB,QAAM,GAAGuB,kBAAb;;AAEA,SAASqL,IAAT,CAAcC,IAAd,EAAoBC,GAApB,EAAyBjL,GAAzB,EAA8B;EAC5B,IAAI,EAAE,gBAAgB+K,IAAlB,CAAJ,EACE,OAAO,IAAIA,IAAJ,CAASC,IAAT,EAAeC,GAAf,EAAoBjL,GAApB,CAAP;EACF,KAAKkL,IAAL,GAAYF,IAAZ;EACA,KAAK7G,SAAL,GAAiB6G,IAAI,CAAC7G,SAAL,GAAiB,CAAlC;EACA,KAAKC,OAAL,GAAe4G,IAAI,CAAC5G,OAAL,GAAe,CAA9B;EACA,KAAK+G,KAAL,GAAa,IAAb;EACA,KAAKC,KAAL,GAAa,IAAb;;EAEA,KAAKC,KAAL,CAAWtH,KAAK,CAAChE,OAAN,CAAckL,GAAd,EAAmBjL,GAAnB,CAAX;AACD;;IACDsL,IAAc,GAAGP;;AAEjBA,IAAI,CAAC7L,SAAL,CAAemM,KAAf,GAAuB,SAASE,IAAT,CAAcN,GAAd,EAAmB;EAC1C;EACE,IAAIA,GAAG,CAACnL,MAAJ,GAAa,KAAKqE,SAAtB,EACE8G,GAAG,GAAG,IAAI,KAAKC,IAAT,GAAgBzG,MAAhB,CAAuBwG,GAAvB,EAA4BrG,MAA5B,EAAN;EACFzG,QAAM,CAAC8M,GAAG,CAACnL,MAAJ,IAAc,KAAKqE,SAApB,CAANhG,CAJwC,CAM1C;;EACE,KAAK,IAAIyB,CAAC,GAAGqL,GAAG,CAACnL,MAAjB,EAAyBF,CAAC,GAAG,KAAKuE,SAAlC,EAA6CvE,CAAC,EAA9C,EACEqL,GAAG,CAACzK,IAAJ,CAAS,CAAT;;EAEF,KAAKZ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqL,GAAG,CAACnL,MAApB,EAA4BF,CAAC,EAA7B,EACEqL,GAAG,CAACrL,CAAD,CAAH,IAAU,IAAV;;EACF,KAAKuL,KAAL,GAAa,IAAI,KAAKD,IAAT,GAAgBzG,MAAhB,CAAuBwG,GAAvB,CAAb,CAZwC,CAc1C;;EACE,KAAKrL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqL,GAAG,CAACnL,MAApB,EAA4BF,CAAC,EAA7B,EACEqL,GAAG,CAACrL,CAAD,CAAH,IAAU,IAAV;;EACF,KAAKwL,KAAL,GAAa,IAAI,KAAKF,IAAT,GAAgBzG,MAAhB,CAAuBwG,GAAvB,CAAb;AACD,CAlBD;;AAoBAF,IAAI,CAAC7L,SAAL,CAAeuF,MAAf,GAAwB,SAASA,MAAT,CAAgBpG,GAAhB,EAAqB2B,GAArB,EAA0B;EAChD,KAAKmL,KAAL,CAAW1G,MAAX,CAAkBpG,GAAlB,EAAuB2B,GAAvB;EACA,OAAO,IAAP;AACD,CAHD;;AAKA+K,IAAI,CAAC7L,SAAL,CAAe0F,MAAf,GAAwB,SAASA,MAAT,CAAgB5E,GAAhB,EAAqB;EAC3C,KAAKoL,KAAL,CAAW3G,MAAX,CAAkB,KAAK0G,KAAL,CAAWvG,MAAX,EAAlB;EACA,OAAO,KAAKwG,KAAL,CAAWxG,MAAX,CAAkB5E,GAAlB,CAAP;AACD,CAHD;;;EC3CA,IAAIgL,IAAI,GAAGQ,OAAX;EAEAR,IAAI,CAACjH,KAAL,GAAatE,OAAb;EACAuL,IAAI,CAAClF,MAAL,GAAcpG,QAAd;EACAsL,IAAI,CAACS,GAAL,GAAWzF,GAAX;EACAgF,IAAI,CAACU,MAAL,GAAcnF,MAAd;EACAyE,IAAI,CAACM,IAAL,GAAYzB,IAAZ,EAEA;;EACAmB,IAAI,CAACW,IAAL,GAAYX,IAAI,CAACS,GAAL,CAASE,IAArB;EACAX,IAAI,CAACY,MAAL,GAAcZ,IAAI,CAACS,GAAL,CAASG,MAAvB;EACAZ,IAAI,CAACa,MAAL,GAAcb,IAAI,CAACS,GAAL,CAASI,MAAvB;EACAb,IAAI,CAACc,MAAL,GAAcd,IAAI,CAACS,GAAL,CAASK,MAAvB;EACAd,IAAI,CAACe,MAAL,GAAcf,IAAI,CAACS,GAAL,CAASM,MAAvB;EACAf,IAAI,CAACgB,SAAL,GAAiBhB,IAAI,CAACU,MAAL,CAAYM,SAA7B;;;;ACdO,MAAMC,SAAO,GAAG,cAAhB;ACCP,IAAIC,sBAAsB,GAAG,KAA7B;AACA,IAAIC,aAAa,GAAG,KAApB;AACA,MAAMC,SAAS,GAAG;EAAEC,KAAK,EAAE,CAAT;EAAY,WAAW,CAAvB;EAA0BC,IAAI,EAAE,CAAhC;EAAmCC,OAAO,EAAE,CAA5C;EAA+CC,KAAK,EAAE,CAAtD;EAAyDC,GAAG,EAAE;AAA9D,CAAlB;AACA,IAAIC,SAAS,GAAGN,SAAS,CAAC,SAAD,CAAzB;AAEA,IAAIO,aAAa,GAAG,IAApB;;AACA,SAASC,eAAT,GAA2B;EACvB,IAAI;IACA,MAAMC,OAAO,GAAG,EAAhB,CADA,CAER;;IACQ,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,MAAvB,EAA+BC,OAA/B,CAAwCC,IAAD,IAAU;MAC7C,IAAI;QACA,IAAI,OAAOC,SAAP,CAAiBD,IAAjB,MAA2B,MAA/B,EAAuC;UACnC,MAAM,IAAIzO,KAAJ,CAAU,eAAV,CAAN;QACH;;QACD;MACH,CALD,CAMA,OAAOkO,KAAP,EAAc;QACVK,OAAO,CAACrM,IAAR,CAAauM,IAAb;MACH;IACJ,CAVD;;IAWA,IAAIF,OAAO,CAAC/M,MAAZ,EAAoB;MAChB,MAAM,IAAIxB,KAAJ,CAAU,aAAauO,OAAO,CAACI,IAAR,CAAa,IAAb,CAAvB,CAAN;IACH;;IACD,IAAIC,MAAM,CAACC,YAAP,CAAoB,IAApB,EAA0BH,SAA1B,CAAoC,KAApC,MAA+CE,MAAM,CAACC,YAAP,CAAoB,IAApB,EAA0B,MAA1B,CAAnD,EAAsF;MAClF,MAAM,IAAI7O,KAAJ,CAAU,uBAAV,CAAN;IACH;EACJ,CApBD,CAqBA,OAAOkO,KAAP,EAAc;IACV,OAAOA,KAAK,CAACY,OAAb;EACH;;EACD,OAAO,IAAP;AACH;;AACD,MAAMC,eAAe,GAAGT,eAAe,EAAvC;;AACO,IAAIU,QAAJ;;AACP,CAAC,UAAUA,QAAV,EAAoB;EACjBA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;EACAA,QAAQ,CAAC,SAAD,CAAR,GAAsB,SAAtB;EACAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACAA,QAAQ,CAAC,KAAD,CAAR,GAAkB,KAAlB;AACH,CAND,EAMGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CANX;;AAOO,IAAIC,SAAJ;;AACP,CAAC,UAAUA,SAAV,EAAqB;EACtB;EACA;EACA;EACIA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAJkB,CAKtB;;EACIA,SAAS,CAAC,iBAAD,CAAT,GAA+B,iBAA/B,CANkB,CAOtB;EACA;;EACIA,SAAS,CAAC,uBAAD,CAAT,GAAqC,uBAArC,CATkB,CAUtB;EACA;;EACIA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAZkB,CAatB;;EACIA,SAAS,CAAC,cAAD,CAAT,GAA4B,cAA5B,CAdkB,CAetB;;EACIA,SAAS,CAAC,SAAD,CAAT,GAAuB,SAAvB,CAhBkB,CAiBtB;EACA;EACA;;EACIA,SAAS,CAAC,gBAAD,CAAT,GAA8B,gBAA9B,CApBkB,CAqBtB;EACA;EACA;;EACIA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAxBkB,CAyBtB;EACA;EACA;EACA;;EACIA,SAAS,CAAC,aAAD,CAAT,GAA2B,aAA3B,CA7BkB,CA8BtB;EACA;EACA;;EACIA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC,CAjCkB,CAkCtB;EACA;EACA;;EACIA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC,CArCkB,CAsCtB;EACA;EACA;;EACIA,SAAS,CAAC,qBAAD,CAAT,GAAmC,qBAAnC,CAzCkB,CA0CtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACIA,SAAS,CAAC,gBAAD,CAAT,GAA8B,gBAA9B,CApDkB,CAqDtB;EACA;;EACIA,SAAS,CAAC,oBAAD,CAAT,GAAkC,oBAAlC,CAvDkB,CAwDtB;EACA;;EACIA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CA1DkB,CA2DtB;EACA;;EACIA,SAAS,CAAC,yBAAD,CAAT,GAAuC,yBAAvC,CA7DkB,CA8DtB;EACA;;EACIA,SAAS,CAAC,yBAAD,CAAT,GAAuC,yBAAvC,CAhEkB,CAiEtB;EACA;EACA;EACA;EACA;EACA;;EACIA,SAAS,CAAC,sBAAD,CAAT,GAAoC,sBAApC;AACH,CAxED,EAwEGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAxEZ;;AA0EA,MAAMC,GAAG,GAAG,kBAAZ;;AACO,MAAMC,MAAN,CAAa;EAChBtO,WAAW,CAAC8M,OAAD,EAAU;IACjBtN,MAAM,CAAC+O,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;MACnCrO,UAAU,EAAE,IADuB;MAEnCD,KAAK,EAAE6M,OAF4B;MAGnC3M,QAAQ,EAAE;IAHyB,CAAvC;EAKH;;EACDqO,IAAI,CAACC,QAAD,EAAWC,IAAX,EAAiB;IACjB,MAAMC,KAAK,GAAGF,QAAQ,CAACG,WAAT,EAAd;;IACA,IAAI3B,SAAS,CAAC0B,KAAD,CAAT,IAAoB,IAAxB,EAA8B;MAC1B,KAAKE,kBAAL,CAAwB,wBAAxB,EAAkD,UAAlD,EAA8DJ,QAA9D;IACH;;IACD,IAAIlB,SAAS,GAAGN,SAAS,CAAC0B,KAAD,CAAzB,EAAkC;MAC9B;IACH;;IACDG,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAkBF,OAAlB,EAA2BJ,IAA3B;EACH;;EACDxB,KAAK,GAAU;IAAA,kCAANwB,IAAM;MAANA,IAAM;IAAA;;IACX,KAAKF,IAAL,CAAUF,MAAM,CAACW,MAAP,CAAcC,KAAxB,EAA+BR,IAA/B;EACH;;EACDvB,IAAI,GAAU;IAAA,mCAANuB,IAAM;MAANA,IAAM;IAAA;;IACV,KAAKF,IAAL,CAAUF,MAAM,CAACW,MAAP,CAAcE,IAAxB,EAA8BT,IAA9B;EACH;;EACDU,IAAI,GAAU;IAAA,mCAANV,IAAM;MAANA,IAAM;IAAA;;IACV,KAAKF,IAAL,CAAUF,MAAM,CAACW,MAAP,CAAcI,OAAxB,EAAiCX,IAAjC;EACH;;EACDY,SAAS,CAACrB,OAAD,EAAUsB,IAAV,EAAgBC,MAAhB,EAAwB;IACrC;IACQ,IAAIxC,aAAJ,EAAmB;MACf,OAAO,KAAKsC,SAAL,CAAe,gBAAf,EAAiCC,IAAjC,EAAuC,EAAvC,CAAP;IACH;;IACD,IAAI,CAACA,IAAL,EAAW;MACPA,IAAI,GAAGjB,MAAM,CAACmB,MAAP,CAAcC,aAArB;IACH;;IACD,IAAI,CAACF,MAAL,EAAa;MACTA,MAAM,GAAG,EAAT;IACH;;IACD,MAAMG,cAAc,GAAG,EAAvB;IACAnQ,MAAM,CAACoQ,IAAP,CAAYJ,MAAZ,EAAoB7B,OAApB,CAA6B7B,GAAD,IAAS;MACjC,MAAM7L,KAAK,GAAGuP,MAAM,CAAC1D,GAAD,CAApB;;MACA,IAAI;QACA,IAAI7L,KAAK,YAAYvB,UAArB,EAAiC;UAC7B,IAAImR,GAAG,GAAG,EAAV;;UACA,KAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACU,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;YACnCoP,GAAG,IAAIxB,GAAG,CAACpO,KAAK,CAACQ,CAAD,CAAL,IAAY,CAAb,CAAV;YACAoP,GAAG,IAAIxB,GAAG,CAACpO,KAAK,CAACQ,CAAD,CAAL,GAAW,IAAZ,CAAV;UACH;;UACDkP,cAAc,CAACtO,IAAf,CAAoByK,GAAG,GAAG,gBAAN,GAAyB+D,GAAzB,GAA+B,GAAnD;QACH,CAPD,MAQK;UACDF,cAAc,CAACtO,IAAf,CAAoByK,GAAG,GAAG,GAAN,GAAYgE,IAAI,CAACC,SAAL,CAAe9P,KAAf,CAAhC;QACH;MACJ,CAZD,CAaA,OAAOoN,KAAP,EAAc;QACVsC,cAAc,CAACtO,IAAf,CAAoByK,GAAG,GAAG,GAAN,GAAYgE,IAAI,CAACC,SAAL,CAAeP,MAAM,CAAC1D,GAAD,CAAN,CAAYrK,QAAZ,EAAf,CAAhC;MACH;IACJ,CAlBD;IAmBAkO,cAAc,CAACtO,IAAf,CAAqB,QAAOkO,IAAK,EAAjC;IACAI,cAAc,CAACtO,IAAf,CAAqB,WAAU,KAAKyL,OAAQ,EAA5C;IACA,MAAMkD,MAAM,GAAG/B,OAAf;;IACA,IAAI0B,cAAc,CAAChP,MAAnB,EAA2B;MACvBsN,OAAO,IAAI,OAAO0B,cAAc,CAAC7B,IAAf,CAAoB,IAApB,CAAP,GAAmC,GAA9C;IACH,CApC4B,CAqCrC;;;IACQ,MAAMT,KAAK,GAAG,IAAIlO,KAAJ,CAAU8O,OAAV,CAAd;IACAZ,KAAK,CAAC2C,MAAN,GAAeA,MAAf;IACA3C,KAAK,CAACkC,IAAN,GAAaA,IAAb;IACA/P,MAAM,CAACoQ,IAAP,CAAYJ,MAAZ,EAAoB7B,OAApB,CAA4B,UAAU7B,GAAV,EAAe;MACvCuB,KAAK,CAACvB,GAAD,CAAL,GAAa0D,MAAM,CAAC1D,GAAD,CAAnB;IACH,CAFD;IAGA,OAAOuB,KAAP;EACH;;EACD4C,UAAU,CAAChC,OAAD,EAAUsB,IAAV,EAAgBC,MAAhB,EAAwB;IAC9B,MAAM,KAAKF,SAAL,CAAerB,OAAf,EAAwBsB,IAAxB,EAA8BC,MAA9B,CAAN;EACH;;EACDX,kBAAkB,CAACZ,OAAD,EAAUiC,IAAV,EAAgBjQ,KAAhB,EAAuB;IACrC,OAAO,KAAKgQ,UAAL,CAAgBhC,OAAhB,EAAyBK,MAAM,CAACmB,MAAP,CAAcU,gBAAvC,EAAyD;MAC5DC,QAAQ,EAAEF,IADkD;MAE5DjQ,KAAK,EAAEA;IAFqD,CAAzD,CAAP;EAIH;;EACDjB,MAAM,CAACqR,SAAD,EAAYpC,OAAZ,EAAqBsB,IAArB,EAA2BC,MAA3B,EAAmC;IACrC,IAAI,CAAC,CAACa,SAAN,EAAiB;MACb;IACH;;IACD,KAAKJ,UAAL,CAAgBhC,OAAhB,EAAyBsB,IAAzB,EAA+BC,MAA/B;EACH;;EACDc,cAAc,CAACD,SAAD,EAAYpC,OAAZ,EAAqBiC,IAArB,EAA2BjQ,KAA3B,EAAkC;IAC5C,IAAI,CAAC,CAACoQ,SAAN,EAAiB;MACb;IACH;;IACD,KAAKxB,kBAAL,CAAwBZ,OAAxB,EAAiCiC,IAAjC,EAAuCjQ,KAAvC;EACH;;EACDsQ,cAAc,CAACtC,OAAD,EAAU;IAIpB,IAAIC,eAAJ,EAAqB;MACjB,KAAK+B,UAAL,CAAgB,6CAAhB,EAA+D3B,MAAM,CAACmB,MAAP,CAAce,qBAA7E,EAAoG;QAChGC,SAAS,EAAE,4BADqF;QACvD7C,IAAI,EAAEM;MADiD,CAApG;IAGH;EACJ;;EACDwC,eAAe,CAACzQ,KAAD,EAAQgO,OAAR,EAAiB;IAC5B,IAAI,OAAQhO,KAAR,KAAmB,QAAvB,EAAiC;MAC7B;IACH;;IACD,IAAIgO,OAAO,IAAI,IAAf,EAAqB;MACjBA,OAAO,GAAG,gBAAV;IACH;;IACD,IAAIhO,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,gBAA1B,EAA4C;MACxC,KAAKgQ,UAAL,CAAgBhC,OAAhB,EAAyBK,MAAM,CAACmB,MAAP,CAAckB,aAAvC,EAAsD;QAClDF,SAAS,EAAE,kBADuC;QAElDG,KAAK,EAAE,mBAF2C;QAGlD3Q,KAAK,EAAEA;MAH2C,CAAtD;IAKH;;IACD,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACX,KAAKgQ,UAAL,CAAgBhC,OAAhB,EAAyBK,MAAM,CAACmB,MAAP,CAAckB,aAAvC,EAAsD;QAClDF,SAAS,EAAE,kBADuC;QAElDG,KAAK,EAAE,aAF2C;QAGlD3Q,KAAK,EAAEA;MAH2C,CAAtD;IAKH;EACJ;;EACD4Q,kBAAkB,CAACC,KAAD,EAAQC,aAAR,EAAuB9C,OAAvB,EAAgC;IAC9C,IAAIA,OAAJ,EAAa;MACTA,OAAO,GAAG,OAAOA,OAAjB;IACH,CAFD,MAGK;MACDA,OAAO,GAAG,EAAV;IACH;;IACD,IAAI6C,KAAK,GAAGC,aAAZ,EAA2B;MACvB,KAAKd,UAAL,CAAgB,qBAAqBhC,OAArC,EAA8CK,MAAM,CAACmB,MAAP,CAAcuB,gBAA5D,EAA8E;QAC1EF,KAAK,EAAEA,KADmE;QAE1EC,aAAa,EAAEA;MAF2D,CAA9E;IAIH;;IACD,IAAID,KAAK,GAAGC,aAAZ,EAA2B;MACvB,KAAKd,UAAL,CAAgB,uBAAuBhC,OAAvC,EAAgDK,MAAM,CAACmB,MAAP,CAAcwB,mBAA9D,EAAmF;QAC/EH,KAAK,EAAEA,KADwE;QAE/EC,aAAa,EAAEA;MAFgE,CAAnF;IAIH;EACJ;;EACDG,QAAQ,CAACC,MAAD,EAASC,IAAT,EAAe;IACnB,IAAID,MAAM,KAAK3R,MAAX,IAAqB2R,MAAM,IAAI,IAAnC,EAAyC;MACrC,KAAKlB,UAAL,CAAgB,aAAhB,EAA+B3B,MAAM,CAACmB,MAAP,CAAc4B,WAA7C,EAA0D;QAAEnB,IAAI,EAAEkB,IAAI,CAAClB;MAAb,CAA1D;IACH;EACJ;;EACDoB,aAAa,CAACH,MAAD,EAASC,IAAT,EAAe;IACxB,IAAID,MAAM,KAAKC,IAAf,EAAqB;MACjB,KAAKnB,UAAL,CAAgB,uCAAuCH,IAAI,CAACC,SAAL,CAAeqB,IAAI,CAAClB,IAApB,CAAvC,GAAmE,4BAAnF,EAAiH5B,MAAM,CAACmB,MAAP,CAAce,qBAA/H,EAAsJ;QAAEN,IAAI,EAAEiB,MAAM,CAACjB,IAAf;QAAqBO,SAAS,EAAE;MAAhC,CAAtJ;IACH,CAFD,MAGK,IAAIU,MAAM,KAAK3R,MAAX,IAAqB2R,MAAM,IAAI,IAAnC,EAAyC;MAC1C,KAAKlB,UAAL,CAAgB,aAAhB,EAA+B3B,MAAM,CAACmB,MAAP,CAAc4B,WAA7C,EAA0D;QAAEnB,IAAI,EAAEkB,IAAI,CAAClB;MAAb,CAA1D;IACH;EACJ;;EACkB,OAAZqB,YAAY,GAAG;IAClB,IAAI,CAAC/D,aAAL,EAAoB;MAChBA,aAAa,GAAG,IAAIc,MAAJ,CAAWxB,SAAX,CAAhB;IACH;;IACD,OAAOU,aAAP;EACH;;EACmB,OAAbgE,aAAa,CAACC,UAAD,EAAaC,SAAb,EAAwB;IACxC,IAAI,CAACD,UAAD,IAAeC,SAAnB,EAA8B;MAC1B,KAAKH,YAAL,GAAoBtB,UAApB,CAA+B,uCAA/B,EAAwE3B,MAAM,CAACmB,MAAP,CAAce,qBAAtF,EAA6G;QACzGC,SAAS,EAAE;MAD8F,CAA7G;IAGH;;IACD,IAAI1D,sBAAJ,EAA4B;MACxB,IAAI,CAAC0E,UAAL,EAAiB;QACb;MACH;;MACD,KAAKF,YAAL,GAAoBtB,UAApB,CAA+B,4BAA/B,EAA6D3B,MAAM,CAACmB,MAAP,CAAce,qBAA3E,EAAkG;QAC9FC,SAAS,EAAE;MADmF,CAAlG;IAGH;;IACDzD,aAAa,GAAG,CAAC,CAACyE,UAAlB;IACA1E,sBAAsB,GAAG,CAAC,CAAC2E,SAA3B;EACH;;EACiB,OAAXC,WAAW,CAAClD,QAAD,EAAW;IACzB,MAAME,KAAK,GAAG1B,SAAS,CAACwB,QAAQ,CAACG,WAAT,EAAD,CAAvB;;IACA,IAAID,KAAK,IAAI,IAAb,EAAmB;MACfL,MAAM,CAACiD,YAAP,GAAsBnC,IAAtB,CAA2B,yBAAyBX,QAApD;MACA;IACH;;IACDlB,SAAS,GAAGoB,KAAZ;EACH;;EACU,OAAJhQ,IAAI,CAACmO,OAAD,EAAU;IACjB,OAAO,IAAIwB,MAAJ,CAAWxB,OAAX,CAAP;EACH;;AAhMe;;AAkMpBwB,MAAM,CAACmB,MAAP,GAAgBrB,SAAhB;AACAE,MAAM,CAACW,MAAP,GAAgBd,QAAhB;AC1TO,MAAMrB,SAAO,GAAG,aAAhB;ACGP,MAAM8E,MAAM,GAAG,IAAItD,MAAJ,CAAWxB,SAAX,CAAf,C,CACA;;AACA,SAAS+E,SAAT,CAAmB5R,KAAnB,EAA0B;EACtB,OAAO,CAAC,CAAEA,KAAK,CAAC6R,WAAhB;AACH;;AACD,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EACrB,IAAIA,KAAK,CAAChR,KAAV,EAAiB;IACb,OAAOgR,KAAP;EACH;;EACDA,KAAK,CAAChR,KAAN,GAAc,YAAY;IACtB,MAAM0N,IAAI,GAAG5N,KAAK,CAACf,SAAN,CAAgBiB,KAAhB,CAAsBgG,IAAtB,CAA2BiL,SAA3B,CAAb;IACA,OAAOF,QAAQ,CAAC,IAAIrT,UAAJ,CAAeoC,KAAK,CAACf,SAAN,CAAgBiB,KAAhB,CAAsBgO,KAAtB,CAA4BgD,KAA5B,EAAmCtD,IAAnC,CAAf,CAAD,CAAf;EACH,CAHD;;EAIA,OAAOsD,KAAP;AACH;;AAID,SAASE,SAAT,CAAmBjS,KAAnB,EAA0B;EACtB,OAAQ,OAAQA,KAAR,KAAmB,QAAnB,IAA+BA,KAAK,IAAIA,KAAxC,IAAkDA,KAAK,GAAG,CAAT,KAAgB,CAAzE;AACH;;AACM,SAASkS,OAAT,CAAiBlS,KAAjB,EAAwB;EAC3B,IAAIA,KAAK,IAAI,IAAb,EAAmB;IACf,OAAO,KAAP;EACH;;EACD,IAAIA,KAAK,CAACD,WAAN,KAAsBtB,UAA1B,EAAsC;IAClC,OAAO,IAAP;EACH;;EACD,IAAI,OAAQuB,KAAR,KAAmB,QAAvB,EAAiC;IAC7B,OAAO,KAAP;EACH;;EACD,IAAI,CAACiS,SAAS,CAACjS,KAAK,CAACU,MAAP,CAAV,IAA4BV,KAAK,CAACU,MAAN,GAAe,CAA/C,EAAkD;IAC9C,OAAO,KAAP;EACH;;EACD,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACU,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;IACnC,MAAM2R,CAAC,GAAGnS,KAAK,CAACQ,CAAD,CAAf;;IACA,IAAI,CAACyR,SAAS,CAACE,CAAD,CAAV,IAAiBA,CAAC,GAAG,CAArB,IAA0BA,CAAC,IAAI,GAAnC,EAAwC;MACpC,OAAO,KAAP;IACH;EACJ;;EACD,OAAO,IAAP;AACH;;AACM,SAASC,QAAT,CAAkBpS,KAAlB,EAAyBqS,OAAzB,EAAkC;EACrC,IAAI,CAACA,OAAL,EAAc;IACVA,OAAO,GAAG,EAAV;EACH;;EACD,IAAI,OAAQrS,KAAR,KAAmB,QAAvB,EAAiC;IAC7B2R,MAAM,CAAClB,eAAP,CAAuBzQ,KAAvB,EAA8B,wBAA9B;IACA,MAAMsS,MAAM,GAAG,EAAf;;IACA,OAAOtS,KAAP,EAAc;MACVsS,MAAM,CAACC,OAAP,CAAevS,KAAK,GAAG,IAAvB;MACAA,KAAK,GAAGqB,QAAQ,CAACyM,MAAM,CAAC9N,KAAK,GAAG,GAAT,CAAP,CAAhB;IACH;;IACD,IAAIsS,MAAM,CAAC5R,MAAP,KAAkB,CAAtB,EAAyB;MACrB4R,MAAM,CAAClR,IAAP,CAAY,CAAZ;IACH;;IACD,OAAO0Q,QAAQ,CAAC,IAAIrT,UAAJ,CAAe6T,MAAf,CAAD,CAAf;EACH;;EACD,IAAID,OAAO,CAACG,kBAAR,IAA8B,OAAQxS,KAAR,KAAmB,QAAjD,IAA6DA,KAAK,CAACyS,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAA3F,EAAiG;IAC7FzS,KAAK,GAAG,OAAOA,KAAf;EACH;;EACD,IAAI4R,SAAS,CAAC5R,KAAD,CAAb,EAAsB;IAClBA,KAAK,GAAGA,KAAK,CAAC6R,WAAN,EAAR;EACH;;EACD,IAAIa,WAAW,CAAC1S,KAAD,CAAf,EAAwB;IACpB,IAAI4P,GAAG,GAAG5P,KAAK,CAACyS,SAAN,CAAgB,CAAhB,CAAV;;IACA,IAAI7C,GAAG,CAAClP,MAAJ,GAAa,CAAjB,EAAoB;MAChB,IAAI2R,OAAO,CAACM,MAAR,KAAmB,MAAvB,EAA+B;QAC3B/C,GAAG,GAAG,QAAQA,GAAG,CAAC6C,SAAJ,CAAc,CAAd,CAAd;MACH,CAFD,MAGK,IAAIJ,OAAO,CAACM,MAAR,KAAmB,OAAvB,EAAgC;QACjC/C,GAAG,IAAI,GAAP;MACH,CAFI,MAGA;QACD+B,MAAM,CAAC/C,kBAAP,CAA0B,wBAA1B,EAAoD,OAApD,EAA6D5O,KAA7D;MACH;IACJ;;IACD,MAAMsS,MAAM,GAAG,EAAf;;IACA,KAAK,IAAI9R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoP,GAAG,CAAClP,MAAxB,EAAgCF,CAAC,IAAI,CAArC,EAAwC;MACpC8R,MAAM,CAAClR,IAAP,CAAYC,QAAQ,CAACuO,GAAG,CAAC6C,SAAJ,CAAcjS,CAAd,EAAiBA,CAAC,GAAG,CAArB,CAAD,EAA0B,EAA1B,CAApB;IACH;;IACD,OAAOsR,QAAQ,CAAC,IAAIrT,UAAJ,CAAe6T,MAAf,CAAD,CAAf;EACH;;EACD,IAAIJ,OAAO,CAAClS,KAAD,CAAX,EAAoB;IAChB,OAAO8R,QAAQ,CAAC,IAAIrT,UAAJ,CAAeuB,KAAf,CAAD,CAAf;EACH;;EACD,OAAO2R,MAAM,CAAC/C,kBAAP,CAA0B,wBAA1B,EAAoD,OAApD,EAA6D5O,KAA7D,CAAP;AACH;;AAoCM,SAAS0S,WAAT,CAAqB1S,KAArB,EAA4BU,MAA5B,EAAoC;EACvC,IAAI,OAAQV,KAAR,KAAmB,QAAnB,IAA+B,CAACA,KAAK,CAAC4S,KAAN,CAAY,kBAAZ,CAApC,EAAqE;IACjE,OAAO,KAAP;EACH;;EACD,IAAIlS,MAAM,IAAIV,KAAK,CAACU,MAAN,KAAiB,IAAI,IAAIA,MAAvC,EAA+C;IAC3C,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACJ;;ACtIO,MAAMmM,OAAO,GAAG,YAAhB;ACOQ,IAAIwB,MAAJ,CAAWxB,OAAX;;AAIR,SAASL,MAAT,CAAgBqG,IAAhB,EAAsB;EACzB,OAAO,OAAQjH,IAAI,CAACY,MAAL,GAAcnH,MAAd,CAAqB+M,QAAQ,CAACS,IAAD,CAA7B,EAAqCrN,MAArC,CAA4C,KAA5C,CAAf;AACJ;;ACTO,MAAMsN,MAAN,CAAa;EAClB/S,WAAW,CAACgT,UAAD,EAAkB;IAC3BxT,MAAM,CAACyT,MAAPzT,CAAc,IAAdA,EAAoBwT,UAApBxT;EACD;;EAED0T,MAAM,GAAW;IACf,OAAO1U,MAAM,CAACG,IAAPH,CAAY2U,SAAS,CAACC,aAAD,EAAgB,IAAhB,CAArB5U,CAAP;EACD;;EAEY,OAAN6U,MAAM,CAACP,IAAD,EAAoB;IAC/B,OAAOQ,WAAW,CAACF,aAAD,EAAgB,IAAhB,EAAsBN,IAAtB,CAAlB;EACD;;EAEqB,OAAfS,eAAe,CAACT,IAAD,EAAoB;IACxC,OAAOU,oBAAoB,CAACJ,aAAD,EAAgB,IAAhB,EAAsBN,IAAtB,CAA3B;EACD;;AAfiB,C,CAAA;AAmBpB;;;AACO,MAAMW,IAAN,SAAmBV,MAAnB,CAA0B;EAE/B/S,WAAW,CAACgT,UAAD,EAAkB;IAC3B,MAAMA,UAAN;IAD2B,KAD7BU,IAC6B,GADd,EACc;;IAE3B,IAAIlU,MAAM,CAACoQ,IAAPpQ,CAAYwT,UAAZxT,EAAwBmB,MAAxBnB,KAAmC,CAAvC,EAA0C;MACxC,MAAM,IAAIL,KAAJ,CAAU,iCAAV,CAAN;IACD;;IACDK,MAAM,CAACoQ,IAAPpQ,CAAYwT,UAAZxT,EAAwBmU,GAAxBnU,CAA4BsM,GAAG,IAAI;MACjC,KAAK4H,IAAL,GAAY5H,GAAZ;IADF;EAGD;;AAV8B;;MAapBsH,aAAiC,GAAG,IAAIQ,GAAJ;AC5BjD;AACA;AACA;;MACaC,eAAe,GAAG;AAE/B;AACA;AACA;;AAiBA,SAASC,eAAT,CAAyB7T,KAAzB,EAA2E;EACzE,OAAQA,KAAD,CAAyB8T,GAAxB9T,KAAgC+T,SAAxC;AACD;AAED;AACA;AACA;;;AACO,MAAMC,SAAN,SAAwBlB,MAAxB,CAA+B;EACpC;;EAGA;AACF;AACA;AACA;EACE/S,WAAW,CAACC,KAAD,EAA2B;IACpC,MAAM,EAAN;IADoC,KANtC8T,GAMsC;;IAEpC,IAAID,eAAe,CAAC7T,KAAD,CAAnB,EAA4B;MAC1B,KAAK8T,GAAL,GAAW9T,KAAK,CAAC8T,GAAjB;IADF,OAEO;MACL,IAAI,OAAO9T,KAAP,KAAiB,QAArB,EAA+B;QAC7B;QACA,MAAMiU,OAAO,GAAGC,IAAI,CAACd,MAALc,CAAYlU,KAAZkU,CAAhB;;QACA,IAAID,OAAO,CAACvT,MAARuT,IAAkB,EAAtB,EAA0B;UACxB,MAAM,IAAI/U,KAAJ,CAAW,0BAAX,CAAN;QACD;;QACD,KAAK4U,GAAL,GAAW,IAAIK,EAAJ,CAAOF,OAAP,CAAX;MANF,OAOO;QACL,KAAKH,GAAL,GAAW,IAAIK,EAAJ,CAAOnU,KAAP,CAAX;MACD;;MAED,IAAI,KAAK8T,GAAL,CAASjV,UAAT,KAAwB,EAA5B,EAAgC;QAC9B,MAAM,IAAIK,KAAJ,CAAW,0BAAX,CAAN;MACD;IACF;EACF;EAED;AACF;AACA;;EAGE;AACF;AACA;;;EACEkV,MAAM,CAACC,SAAD,EAAgC;IACpC,OAAO,KAAKP,GAAL,CAASQ,EAAT,CAAYD,SAAS,CAACP,GAAtB,CAAP;EACD;EAED;AACF;AACA;;;EACES,QAAQ,GAAW;IACjB,OAAOL,IAAI,CAACjB,MAALiB,CAAY,KAAKM,OAAL,EAAZN,CAAP;EACD;;EAEDO,MAAM,GAAW;IACf,OAAO,KAAKF,QAAL,EAAP;EACD;EAED;AACF;AACA;;;EACEC,OAAO,GAAe;IACpB,OAAO,KAAKnW,QAAL,EAAP;EACD;EAED;AACF;AACA;;;EACEA,QAAQ,GAAW;IACjB,MAAMkE,CAAC,GAAG,KAAKuR,GAAL,CAASY,WAAT,CAAqBnW,MAArB,CAAV;;IACA,IAAIgE,CAAC,CAAC7B,MAAF6B,KAAa,EAAjB,EAAqB;MACnB,OAAOA,CAAP;IACD;;IAED,MAAMoS,OAAO,GAAGpW,MAAM,CAACqW,KAAPrW,CAAa,EAAbA,CAAhB;IACAgE,CAAC,CAACsS,IAAFtS,CAAOoS,OAAPpS,EAAgB,KAAKA,CAAC,CAAC7B,MAAvB6B;IACA,OAAOoS,OAAP;EACD;EAED;AACF;AACA;;;EACEnT,QAAQ,GAAW;IACjB,OAAO,KAAK+S,QAAL,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;EACE;;;EAC2B,aAAdO,cAAc,CACzBC,aADyB,EAEzBC,IAFyB,EAGzBC,SAHyB,EAIL;IACpB,MAAMtW,MAAM,GAAGJ,MAAM,CAAC+G,MAAP/G,CAAc,CAC3BwW,aAAa,CAAC1W,QAAd0W,EAD2B,EAE3BxW,MAAM,CAACG,IAAPH,CAAYyW,IAAZzW,CAF2B,EAG3B0W,SAAS,CAAC5W,QAAV4W,EAH2B,CAAd1W,CAAf;IAKA,MAAMqN,IAAI,GAAGY,MAAM,CAAC,IAAI/N,UAAJ,CAAeE,MAAf,CAAD,CAAN6N,CAA+BzL,KAA/ByL,CAAqC,CAArCA,CAAb;IACA,OAAO,IAAIwH,SAAJ,CAAczV,MAAM,CAACG,IAAPH,CAAYqN,IAAZrN,EAAkB,KAAlBA,CAAd,CAAP;EACD;EAED;AACF;AACA;;EACE;;;EACiC,aAApB2W,oBAAoB,CAC/BC,KAD+B,EAE/BF,SAF+B,EAGX;IACpB,IAAItW,MAAM,GAAGJ,MAAM,CAACqW,KAAPrW,CAAa,CAAbA,CAAb;IACA4W,KAAK,CAACzH,OAANyH,CAAc,UAAUH,IAAV,EAAgB;MAC5B,IAAIA,IAAI,CAACtU,MAALsU,GAAcpB,eAAlB,EAAmC;QACjC,MAAM,IAAIwB,SAAJ,CAAe,0BAAf,CAAN;MACD;;MACDzW,MAAM,GAAGJ,MAAM,CAAC+G,MAAP/G,CAAc,CAACI,MAAD,EAASN,QAAQ,CAAC2W,IAAD,CAAjB,CAAdzW,CAATI;IAJF;IAMAA,MAAM,GAAGJ,MAAM,CAAC+G,MAAP/G,CAAc,CACrBI,MADqB,EAErBsW,SAAS,CAAC5W,QAAV4W,EAFqB,EAGrB1W,MAAM,CAACG,IAAPH,CAAY,uBAAZA,CAHqB,CAAdA,CAATI;IAKA,IAAIiN,IAAI,GAAGY,MAAM,CAAC,IAAI/N,UAAJ,CAAeE,MAAf,CAAD,CAAN6N,CAA+BzL,KAA/ByL,CAAqC,CAArCA,CAAX;IACA,IAAI6I,cAAc,GAAG,IAAIlB,EAAJ,CAAOvI,IAAP,EAAa,EAAb,EAAiBjL,OAAjB,CAAyBoT,SAAzB,EAAoC,EAApC,CAArB;;IACA,IAAIuB,WAAW,CAACD,cAAD,CAAf,EAAiC;MAC/B,MAAM,IAAInW,KAAJ,CAAW,gDAAX,CAAN;IACD;;IACD,OAAO,IAAI8U,SAAJ,CAAcqB,cAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACiC,aAAlBE,kBAAkB,CAC7BJ,KAD6B,EAE7BF,SAF6B,EAGC;IAC9B,IAAIO,KAAK,GAAG,GAAZ;IACA,IAAIC,OAAJ;;IACA,OAAOD,KAAK,IAAI,CAAhB,EAAmB;MACjB,IAAI;QACF,MAAME,cAAc,GAAGP,KAAK,CAAC7P,MAAN6P,CAAa5W,MAAM,CAACG,IAAPH,CAAY,CAACiX,KAAD,CAAZjX,CAAb4W,CAAvB;QACAM,OAAO,GAAG,MAAM,KAAKP,oBAAL,CAA0BQ,cAA1B,EAA0CT,SAA1C,CAAhBQ;MAFF,EAGE,OAAOE,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYP,SAAnB,EAA8B;UAC5B,MAAMO,GAAN;QACD;;QACDH,KAAK;QACL;MACD;;MACD,OAAO,CAACC,OAAD,EAAUD,KAAV,CAAP;IACD;;IACD,MAAM,IAAItW,KAAJ,CAAW,+CAAX,CAAN;EACD;EAED;AACF;AACA;;;EACkB,OAAT0W,SAAS,CAACC,MAAD,EAA8B;IAC5C,OAAOP,WAAW,CAACO,MAAD,CAAXP,IAAuB,CAA9B;EACD;;AAnKmC;;AAAzBtB,UAiCJ8B,OAjCI9B,GAiCiB,IAAIA,SAAJ,CAAc,kCAAd,CAjCjBA;AAsKbb,aAAa,CAAC4C,GAAd5C,CAAkBa,SAAlBb,EAA6B;EAC3BhC,IAAI,EAAE,QADqB;EAE3B6E,MAAM,EAAE,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD;AAFmB,CAA7B7C,E,CAAA;;AAMA,IAAI8C,YAAY,GAAGC,IAAI,CAACC,QAAxB,C,CAAA;AAGA;AACA;;AACA,SAASb,WAAT,CAAqBrU,CAArB,EAA6B;EAC3B,IAAI3B,CAAC,GAAG,CACN2W,YAAY,CAACG,EAAbH,EADM,EAENA,YAAY,CAACG,EAAbH,EAFM,EAGNA,YAAY,CAACG,EAAbH,EAHM,EAINA,YAAY,CAACG,EAAbH,EAJM,CAAR;EAOA,IAAIpQ,CAAC,GAAGoQ,YAAY,CAACG,EAAbH,EAAR;EAAA,IACEI,GAAG,GAAGJ,YAAY,CAACG,EAAbH,EADR;EAAA,IAEE1R,GAAG,GAAG0R,YAAY,CAACG,EAAbH,EAFR;EAAA,IAGEK,GAAG,GAAGL,YAAY,CAACG,EAAbH,EAHR;EAAA,IAIEM,IAAI,GAAGN,YAAY,CAACG,EAAbH,EAJT;EAAA,IAKEO,IAAI,GAAGP,YAAY,CAACG,EAAbH,EALT;EAAA,IAMEQ,IAAI,GAAGR,YAAY,CAACG,EAAbH,EANT;EAQAA,YAAY,CAACS,QAAbT,CAAsB3W,CAAC,CAAC,CAAD,CAAvB2W,EAA4BU,GAA5BV;EACAA,YAAY,CAACW,WAAbX,CAAyB3W,CAAC,CAAC,CAAD,CAA1B2W,EAA+BhV,CAA/BgV;EACAA,YAAY,CAACY,CAAbZ,CAAe1R,GAAf0R,EAAoB3W,CAAC,CAAC,CAAD,CAArB2W;EACAA,YAAY,CAACa,CAAbb,CAAeK,GAAfL,EAAoB1R,GAApB0R,EAAyBA,YAAY,CAACnL,CAAtCmL;EACAA,YAAY,CAACc,CAAbd,CAAe1R,GAAf0R,EAAoB1R,GAApB0R,EAAyB3W,CAAC,CAAC,CAAD,CAA1B2W;EACAA,YAAY,CAACtL,CAAbsL,CAAeK,GAAfL,EAAoB3W,CAAC,CAAC,CAAD,CAArB2W,EAA0BK,GAA1BL;EAEAA,YAAY,CAACY,CAAbZ,CAAeM,IAAfN,EAAqBK,GAArBL;EACAA,YAAY,CAACY,CAAbZ,CAAeO,IAAfP,EAAqBM,IAArBN;EACAA,YAAY,CAACa,CAAbb,CAAeQ,IAAfR,EAAqBO,IAArBP,EAA2BM,IAA3BN;EACAA,YAAY,CAACa,CAAbb,CAAepQ,CAAfoQ,EAAkBQ,IAAlBR,EAAwB1R,GAAxB0R;EACAA,YAAY,CAACa,CAAbb,CAAepQ,CAAfoQ,EAAkBpQ,CAAlBoQ,EAAqBK,GAArBL;EAEAA,YAAY,CAACe,OAAbf,CAAqBpQ,CAArBoQ,EAAwBpQ,CAAxBoQ;EACAA,YAAY,CAACa,CAAbb,CAAepQ,CAAfoQ,EAAkBpQ,CAAlBoQ,EAAqB1R,GAArB0R;EACAA,YAAY,CAACa,CAAbb,CAAepQ,CAAfoQ,EAAkBpQ,CAAlBoQ,EAAqBK,GAArBL;EACAA,YAAY,CAACa,CAAbb,CAAepQ,CAAfoQ,EAAkBpQ,CAAlBoQ,EAAqBK,GAArBL;EACAA,YAAY,CAACa,CAAbb,CAAe3W,CAAC,CAAC,CAAD,CAAhB2W,EAAqBpQ,CAArBoQ,EAAwBK,GAAxBL;EAEAA,YAAY,CAACY,CAAbZ,CAAeI,GAAfJ,EAAoB3W,CAAC,CAAC,CAAD,CAArB2W;EACAA,YAAY,CAACa,CAAbb,CAAeI,GAAfJ,EAAoBI,GAApBJ,EAAyBK,GAAzBL;EACA,IAAIgB,QAAQ,CAACZ,GAAD,EAAM9R,GAAN,CAAZ,EAAwB0R,YAAY,CAACa,CAAbb,CAAe3W,CAAC,CAAC,CAAD,CAAhB2W,EAAqB3W,CAAC,CAAC,CAAD,CAAtB2W,EAA2BiB,CAA3BjB;EAExBA,YAAY,CAACY,CAAbZ,CAAeI,GAAfJ,EAAoB3W,CAAC,CAAC,CAAD,CAArB2W;EACAA,YAAY,CAACa,CAAbb,CAAeI,GAAfJ,EAAoBI,GAApBJ,EAAyBK,GAAzBL;EACA,IAAIgB,QAAQ,CAACZ,GAAD,EAAM9R,GAAN,CAAZ,EAAwB,OAAO,CAAP;EACxB,OAAO,CAAP;AACD;;AACD,IAAIoS,GAAG,GAAGV,YAAY,CAACG,EAAbH,CAAgB,CAAC,CAAD,CAAhBA,CAAV;AACA,IAAIiB,CAAC,GAAGjB,YAAY,CAACG,EAAbH,CAAgB,CACtB,MADsB,EACd,MADc,EACN,MADM,EACE,MADF,EACU,MADV,EACkB,MADlB,EAC0B,MAD1B,EACkC,MADlC,EAC0C,MAD1C,EAEtB,MAFsB,EAEd,MAFc,EAEN,MAFM,EAEE,MAFF,EAEU,MAFV,EAEkB,MAFlB,EAE0B,MAF1B,CAAhBA,CAAR;;AAIA,SAASgB,QAAT,CAAkBvU,CAAlB,EAA0BH,CAA1B,EAAkC;EAChC,IAAIrB,CAAC,GAAG,IAAIzC,UAAJ,CAAe,EAAf,CAAR;EAAA,IACEoE,CAAC,GAAG,IAAIpE,UAAJ,CAAe,EAAf,CADN;EAEAwX,YAAY,CAACkB,SAAblB,CAAuB/U,CAAvB+U,EAA0BvT,CAA1BuT;EACAA,YAAY,CAACkB,SAAblB,CAAuBpT,CAAvBoT,EAA0B1T,CAA1B0T;EACA,OAAOA,YAAY,CAACmB,gBAAbnB,CAA8B/U,CAA9B+U,EAAiC,CAAjCA,EAAoCpT,CAApCoT,EAAuC,CAAvCA,CAAP;AACD;ACzQD;AACA;AACA;AACA;AACA;;;AACO,MAAMoB,OAAN,CAAc;EACnB;;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEtX,WAAW,CAACuX,SAAD,EAAkD;IAAA,KAV7DC,QAU6D;;IAC3D,IAAID,SAAJ,EAAe;MACb,KAAKC,QAAL,GAAgBrB,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,CAAkBwB,aAAlBxB,CAAgC7X,QAAQ,CAACiZ,SAAD,CAAxCpB,CAAhB;IADF,OAEO;MACL,KAAKqB,QAAL,GAAgBrB,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,EAAhB;IACD;EACF;EAED;AACF;AACA;;;EACe,IAAT7B,SAAS,GAAc;IACzB,OAAO,IAAIL,SAAJ,CAAc,KAAKuD,QAAL,CAAclD,SAA5B,CAAP;EACD;EAED;AACF;AACA;;;EACe,IAATiD,SAAS,GAAW;IACtB,OAAOjZ,QAAQ,CAAC,KAAKkZ,QAAL,CAAcD,SAAf,CAAf;EACD;;AAhCkB;;MCVRK,gCAAgC,GAAG,IAAI3D,SAAJ,CAC9C,6CAD8C;ACChD;AACA;AACA;;AACO,MAAMK,SAAS,GAAG,YAEC;EAAA,IADxBuD,QACwB,uEADL,WACK;EACxB,OAAOC,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsBD,QAAtBC,CAAP;AAHK;AAaP;AACA;AACA;;;AACO,MAAME,UAAU,GAAG,YAAiC;EAAA,IAAhCH,QAAgC,uEAAb,QAAa;EACzD,MAAMI,GAAG,GAAGH,YAAY,CAACI,MAAbJ,CACV,CACEA,YAAY,CAACK,GAAbL,CAAiB,QAAjBA,CADF,EAEEA,YAAY,CAACK,GAAbL,CAAiB,eAAjBA,CAFF,EAGEA,YAAY,CAACC,IAAbD,CAAkBA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CAAlBA,EAA+D,OAA/DA,CAHF,CADUA,EAMVD,QANUC,CAAZ;;EAQA,MAAMO,OAAO,GAAGJ,GAAG,CAAC5E,MAAJ4E,CAAWK,IAAXL,CAAgBA,GAAhBA,CAAhB;;EACA,MAAMM,OAAO,GAAGN,GAAG,CAAC/E,MAAJ+E,CAAWK,IAAXL,CAAgBA,GAAhBA,CAAhB;;EAEAA,GAAG,CAAC5E,MAAJ4E,GAAa,CAACrZ,MAAD,EAAcwZ,MAAd,KAA8B;IACzC,MAAMtF,IAAI,GAAGuF,OAAO,CAACzZ,MAAD,EAASwZ,MAAT,CAApB;;IACA,OAAOtF,IAAI,CAAC,OAAD,CAAJA,CAAcrR,QAAdqR,CAAuB,MAAvBA,CAAP;EAFF;;EAKAmF,GAAG,CAAC/E,MAAJ+E,GAAa,CAACO,GAAD,EAAW5Z,MAAX,EAAwBwZ,MAAxB,KAAwC;IACnD,MAAMtF,IAAI,GAAG;MACX2F,KAAK,EAAEja,MAAM,CAACG,IAAPH,CAAYga,GAAZha,EAAiB,MAAjBA;IADI,CAAb;IAGA,OAAO+Z,OAAO,CAACzF,IAAD,EAAOlU,MAAP,EAAewZ,MAAf,CAAd;EAJF;;EAOCH,GAAD,CAAapD,KAAZoD,GAAqBO,GAAD,IAAc;IACjC,OACEV,YAAY,CAACK,GAAbL,GAAmBY,IAAnBZ,GACAA,YAAY,CAACK,GAAbL,GAAmBY,IADnBZ,GAEAtZ,MAAM,CAACG,IAAPH,CAAYga,GAAZha,EAAiB,MAAjBA,EAAyBmC,MAH3B;EADF,CAACsX;;EAQD,OAAOA,GAAP;AAhCK;AAmCP;AACA;AACA;;;AACO,MAAMU,UAAU,GAAG,YAAqC;EAAA,IAApCd,QAAoC,uEAAjB,YAAiB;EAC7D,OAAOC,YAAY,CAACI,MAAbJ,CACL,CAACxD,SAAS,CAAC,QAAD,CAAV,EAAsBA,SAAS,CAAC,YAAD,CAA/B,CADKwD,EAELD,QAFKC,CAAP;AADK;AAOP;AACA;AACA;;;AACO,MAAMc,MAAM,GAAG,YAAiC;EAAA,IAAhCf,QAAgC,uEAAb,QAAa;EACrD,OAAOC,YAAY,CAACI,MAAbJ,CACL,CACEA,YAAY,CAACe,IAAbf,CAAkB,eAAlBA,CADF,EAEEA,YAAY,CAACe,IAAbf,CAAkB,OAAlBA,CAFF,EAGExD,SAAS,CAAC,WAAD,CAHX,CADKwD,EAMLD,QANKC,CAAP;AADK;AAWP;AACA;AACA;;;AACO,MAAMgB,QAAQ,GAAG,YAAmC;EAAA,IAAlCjB,QAAkC,uEAAf,UAAe;EACzD,OAAOC,YAAY,CAACI,MAAbJ,CACL,CACExD,SAAS,CAAC,YAAD,CADX,EAEEA,SAAS,CAAC,iBAAD,CAFX,EAGEA,SAAS,CAAC,sBAAD,CAHX,EAIEwD,YAAY,CAACiB,EAAbjB,CAAgB,YAAhBA,CAJF,CADKA,EAOLD,QAPKC,CAAP;AADK;;AAYA,SAASkB,QAAT,CAAkBC,IAAlB,EAA6BhD,MAA7B,EAAkD;EACvD,IAAIpB,KAAK,GAAG,CAAZ;EACAoE,IAAI,CAACC,MAALD,CAAYhD,MAAZgD,CAAmBtL,OAAnBsL,CAA4BE,IAAD,IAAe;IACxC,IAAIA,IAAI,CAACT,IAALS,IAAa,CAAjB,EAAoB;MAClBtE,KAAK,IAAIsE,IAAI,CAACT,IAAd7D;IADF,OAEO,IAAI,OAAOsE,IAAI,CAACtE,KAAZ,KAAsB,UAA1B,EAAsC;MAC3CA,KAAK,IAAIsE,IAAI,CAACtE,KAALsE,CAAWlD,MAAM,CAACkD,IAAI,CAACtB,QAAN,CAAjBsB,CAATtE;IACD;EALH;EAOA,OAAOA,KAAP;AACD;;AC1GM,SAASuE,YAAT,CAAsBvT,KAAtB,EAAoD;EACzD,IAAI1D,GAAG,GAAG,CAAV;EACA,IAAIkX,IAAI,GAAG,CAAX;;EACA,SAAS;IACP,IAAIC,IAAI,GAAGzT,KAAK,CAAC0T,KAAN1T,EAAX;IACA1D,GAAG,IAAI,CAACmX,IAAI,GAAG,IAAR,KAAkBD,IAAI,GAAG,CAAhClX;IACAkX,IAAI,IAAI,CAARA;;IACA,IAAI,CAACC,IAAI,GAAG,IAAR,MAAkB,CAAtB,EAAyB;MACvB;IACD;EACF;;EACD,OAAOnX,GAAP;AACD;;AAEM,SAASqX,YAAT,CAAsB3T,KAAtB,EAA4C1D,GAA5C,EAAyD;EAC9D,IAAIsX,OAAO,GAAGtX,GAAd;;EACA,SAAS;IACP,IAAImX,IAAI,GAAGG,OAAO,GAAG,IAArB;IACAA,OAAO,KAAK,CAAZA;;IACA,IAAIA,OAAO,IAAI,CAAf,EAAkB;MAChB5T,KAAK,CAACxE,IAANwE,CAAWyT,IAAXzT;MACA;IAFF,OAGO;MACLyT,IAAI,IAAI,IAARA;MACAzT,KAAK,CAACxE,IAANwE,CAAWyT,IAAXzT;IACD;EACF;AACF;AChBD;AACA;AACA;;;AA2CA,MAAM6T,aAAa,GAAG,EAAtB;AAEA;AACA;AACA;;AACO,MAAMC,OAAN,CAAc;EAWnB3Z,WAAW,CAAC0O,IAAD,EAAoB;IAAA,KAV/BkL,MAU+B;IAAA,KAT/BC,WAS+B;IAAA,KAR/BC,eAQ+B;IAAA,KAP/BC,YAO+B;IAAA,KALvBC,iBAKuB,GALqB,IAAIpG,GAAJ,EAKrB;IAC7B,KAAKgG,MAAL,GAAclL,IAAI,CAACkL,MAAnB;IACA,KAAKC,WAAL,GAAmBnL,IAAI,CAACmL,WAALnL,CAAiBiF,GAAjBjF,CAAqBuL,OAAO,IAAI,IAAIhG,SAAJ,CAAcgG,OAAd,CAAhCvL,CAAnB;IACA,KAAKoL,eAAL,GAAuBpL,IAAI,CAACoL,eAA5B;IACA,KAAKC,YAAL,GAAoBrL,IAAI,CAACqL,YAAzB;IACA,KAAKA,YAAL,CAAkBpM,OAAlB,CAA0BuM,EAAE,IAC1B,KAAKF,iBAAL,CAAuBhE,GAAvB,CACEkE,EAAE,CAACC,cADL,EAEE,KAAKN,WAAL,CAAiBK,EAAE,CAACC,cAApB,CAFF,CADF;EAMD;;EAEDC,eAAe,CAACC,KAAD,EAAyB;IACtC,OAAOA,KAAK,GAAG,KAAKT,MAAL,CAAYU,qBAA3B;EACD;;EAEDC,iBAAiB,CAACF,KAAD,EAAyB;IACxC,OACEA,KAAK,GACH,KAAKT,MAAL,CAAYU,qBAAZ,GACE,KAAKV,MAAL,CAAYY,yBAFhBH,IAGCA,KAAK,IAAI,KAAKT,MAAL,CAAYU,qBAArBD,IACCA,KAAK,GACH,KAAKR,WAAL,CAAiBlZ,MAAjB,GAA0B,KAAKiZ,MAAL,CAAYa,2BAN5C;EAQD;;EAEDC,WAAW,CAACL,KAAD,EAAyB;IAClC,OAAO,KAAKL,iBAAL,CAAuBW,GAAvB,CAA2BN,KAA3B,CAAP;EACD;;EAEDO,UAAU,GAAgB;IACxB,OAAO,CAAC,GAAG,KAAKZ,iBAAL,CAAuBa,MAAvB,EAAJ,CAAP;EACD;;EAEDC,aAAa,GAAgB;IAC3B,OAAO,KAAKjB,WAAL,CAAiBkB,MAAjB,CAAwB,CAACC,CAAD,EAAIX,KAAJ,KAAc,CAAC,KAAKK,WAAL,CAAiBL,KAAjB,CAAvC,CAAP;EACD;;EAEDlH,SAAS,GAAW;IAClB,MAAM8H,OAAO,GAAG,KAAKpB,WAAL,CAAiBlZ,MAAjC;IAEA,IAAIua,QAAkB,GAAG,EAAzB;IACAC,aAAsBD,QAAtB,EAAgCD,OAAhC;IAEA,MAAMlB,YAAY,GAAG,KAAKA,YAAL,CAAkBpG,GAAlB,CAAsByH,WAAW,IAAI;MACxD,MAAM;QAACC,QAAD;QAAWlB;MAAX,IAA6BiB,WAAnC;MACA,MAAMtI,IAAI,GAAGqB,IAAI,CAACd,MAALc,CAAYiH,WAAW,CAACtI,IAAxBqB,CAAb;MAEA,IAAImH,eAAyB,GAAG,EAAhC;MACAH,aAAsBG,eAAtB,EAAuCD,QAAQ,CAAC1a,MAAhD;MAEA,IAAI4a,SAAmB,GAAG,EAA1B;MACAJ,aAAsBI,SAAtB,EAAiCzI,IAAI,CAACnS,MAAtC;MAEA,OAAO;QACLwZ,cADK;QAELmB,eAAe,EAAE9c,MAAM,CAACG,IAAPH,CAAY8c,eAAZ9c,CAFZ;QAGLgd,UAAU,EAAEhd,MAAM,CAACG,IAAPH,CAAY6c,QAAZ7c,CAHP;QAILid,UAAU,EAAEjd,MAAM,CAACG,IAAPH,CAAY+c,SAAZ/c,CAJP;QAKLsU;MALK,CAAP;IAVmB,EAArB;IAmBA,IAAI4I,gBAA0B,GAAG,EAAjC;IACAP,aAAsBO,gBAAtB,EAAwC3B,YAAY,CAACpZ,MAArD;IACA,IAAIgb,iBAAiB,GAAGnd,MAAM,CAACqW,KAAPrW,CAAaod,gBAAbpd,CAAxB;IACAA,MAAM,CAACG,IAAPH,CAAYkd,gBAAZld,EAA8BsW,IAA9BtW,CAAmCmd,iBAAnCnd;IACA,IAAIqd,uBAAuB,GAAGH,gBAAgB,CAAC/a,MAA/C;IAEAoZ,YAAY,CAACpM,OAAboM,CAAqBqB,WAAW,IAAI;MAClC,MAAMU,iBAAiB,GAAGhE,YAAY,CAACI,MAAbJ,CAAoB,CAC5CA,YAAY,CAACiB,EAAbjB,CAAgB,gBAAhBA,CAD4C,EAG5CA,YAAY,CAACC,IAAbD,CACEsD,WAAW,CAACE,eAAZF,CAA4Bza,MAD9BmX,EAEE,iBAFFA,CAH4C,EAO5CA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACiB,EAAbjB,CAAgB,UAAhBA,CADFA,EAEEsD,WAAW,CAACI,UAAZJ,CAAuBza,MAFzBmX,EAGE,YAHFA,CAP4C,EAY5CA,YAAY,CAACC,IAAbD,CAAkBsD,WAAW,CAACK,UAAZL,CAAuBza,MAAzCmX,EAAiD,YAAjDA,CAZ4C,EAa5CA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACiB,EAAbjB,CAAgB,WAAhBA,CADFA,EAEEsD,WAAW,CAACtI,IAAZsI,CAAiBza,MAFnBmX,EAGE,MAHFA,CAb4C,CAApBA,CAA1B;MAmBA,MAAMnX,MAAM,GAAGmb,iBAAiB,CAAC5I,MAAlB4I,CACbV,WADaU,EAEbH,iBAFaG,EAGbD,uBAHaC,CAAf;MAKAD,uBAAuB,IAAIlb,MAA3Bkb;IAzBF;IA2BAF,iBAAiB,GAAGA,iBAAiB,CAAC3a,KAAlB2a,CAAwB,CAAxBA,EAA2BE,uBAA3BF,CAApBA;IAEA,MAAMK,cAAc,GAAGlE,YAAY,CAACI,MAAbJ,CAAoB,CACzCA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,uBAArBA,CADyC,EAEzCA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,2BAArBA,CAFyC,EAGzCA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,6BAArBA,CAHyC,EAIzCA,YAAY,CAACC,IAAbD,CAAkBoD,QAAQ,CAACva,MAA3BmX,EAAmC,UAAnCA,CAJyC,EAKzCA,YAAY,CAACiE,GAAbjE,CAAiBmE,UAAiB,KAAjB,CAAjBnE,EAA0CmD,OAA1CnD,EAAmD,MAAnDA,CALyC,EAMzCmE,UAAiB,iBAAjB,CANyC,CAApBnE,CAAvB;IASA,MAAMoE,WAAW,GAAG;MAClB5B,qBAAqB,EAAE9b,MAAM,CAACG,IAAPH,CAAY,CAAC,KAAKob,MAAL,CAAYU,qBAAb,CAAZ9b,CADL;MAElBgc,yBAAyB,EAAEhc,MAAM,CAACG,IAAPH,CAAY,CACrC,KAAKob,MAAL,CAAYY,yBADyB,CAAZhc,CAFT;MAKlBic,2BAA2B,EAAEjc,MAAM,CAACG,IAAPH,CAAY,CACvC,KAAKob,MAAL,CAAYa,2BAD2B,CAAZjc,CALX;MAQlB0c,QAAQ,EAAE1c,MAAM,CAACG,IAAPH,CAAY0c,QAAZ1c,CARQ;MASlBoR,IAAI,EAAE,KAAKiK,WAAL,CAAiBlG,GAAjB,CAAqB7H,GAAG,IAAIxN,QAAQ,CAACwN,GAAG,CAAC2I,OAAJ3I,EAAD,CAApC,CATY;MAUlBgO,eAAe,EAAE3F,IAAI,CAACd,MAALc,CAAY,KAAK2F,eAAjB3F;IAVC,CAApB;IAaA,IAAIgI,QAAQ,GAAG3d,MAAM,CAACqW,KAAPrW,CAAa,IAAbA,CAAf;IACA,MAAMmC,MAAM,GAAGqb,cAAc,CAAC9I,MAAf8I,CAAsBE,WAAtBF,EAAmCG,QAAnCH,CAAf;IACAL,iBAAiB,CAAC7G,IAAlB6G,CAAuBQ,QAAvBR,EAAiChb,MAAjCgb;IACA,OAAOQ,QAAQ,CAACnb,KAATmb,CAAe,CAAfA,EAAkBxb,MAAM,GAAGgb,iBAAiB,CAAChb,MAA7Cwb,CAAP;EACD;EAED;AACF;AACA;;;EACa,OAAJxd,IAAI,CAACC,MAAD,EAAuD;IAChE;IACA,IAAIwd,SAAS,GAAG,CAAC,GAAGxd,MAAJ,CAAhB;IAEA,MAAM0b,qBAAqB,GAAG8B,SAAS,CAAC7C,KAAV6C,EAA9B;IACA,MAAM5B,yBAAyB,GAAG4B,SAAS,CAAC7C,KAAV6C,EAAlC;IACA,MAAM3B,2BAA2B,GAAG2B,SAAS,CAAC7C,KAAV6C,EAApC;IAEA,MAAMC,YAAY,GAAGlB,aAAsBiB,SAAtB,CAArB;IACA,IAAIvC,WAAW,GAAG,EAAlB;;IACA,KAAK,IAAIpZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4b,YAApB,EAAkC5b,CAAC,EAAnC,EAAuC;MACrC,MAAMwZ,OAAO,GAAGmC,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmB1C,aAAnB0C,CAAhB;MACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgB1C,aAAhB0C,CAAZA;MACAvC,WAAW,CAACxY,IAAZwY,CAAiB1F,IAAI,CAACjB,MAALiB,CAAY3V,MAAM,CAACG,IAAPH,CAAYyb,OAAZzb,CAAZ2V,CAAjB0F;IACD;;IAED,MAAMC,eAAe,GAAGsC,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmB1C,aAAnB0C,CAAxB;IACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgB1C,aAAhB0C,CAAZA;IAEA,MAAMV,gBAAgB,GAAGP,aAAsBiB,SAAtB,CAAzB;IACA,IAAIrC,YAAmC,GAAG,EAA1C;;IACA,KAAK,IAAItZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGib,gBAApB,EAAsCjb,CAAC,EAAvC,EAA2C;MACzC,MAAM0Z,cAAc,GAAGiC,SAAS,CAAC7C,KAAV6C,EAAvB;MACA,MAAMC,YAAY,GAAGlB,aAAsBiB,SAAtB,CAArB;MACA,MAAMf,QAAQ,GAAGe,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmBC,YAAnBD,CAAjB;MACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgBC,YAAhBD,CAAZA;MACA,MAAMX,UAAU,GAAGN,aAAsBiB,SAAtB,CAAnB;MACA,MAAME,SAAS,GAAGF,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmBX,UAAnBW,CAAlB;MACA,MAAMtJ,IAAI,GAAGqB,IAAI,CAACjB,MAALiB,CAAY3V,MAAM,CAACG,IAAPH,CAAY8d,SAAZ9d,CAAZ2V,CAAb;MACAiI,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgBX,UAAhBW,CAAZA;MACArC,YAAY,CAAC1Y,IAAb0Y,CAAkB;QAChBI,cADgB;QAEhBkB,QAFgB;QAGhBvI;MAHgB,CAAlBiH;IAKD;;IAED,MAAMwC,WAAW,GAAG;MAClB3C,MAAM,EAAE;QACNU,qBADM;QAENE,yBAFM;QAGNC;MAHM,CADU;MAMlBX,eAAe,EAAE3F,IAAI,CAACjB,MAALiB,CAAY3V,MAAM,CAACG,IAAPH,CAAYsb,eAAZtb,CAAZ2V,CANC;MAOlB0F,WAPkB;MAQlBE;IARkB,CAApB;IAWA,OAAO,IAAIJ,OAAJ,CAAY4C,WAAZ,CAAP;EACD;;AA/LkB;;AC7DN,gBACblM,SADa,EAEbpC,OAFa,EAGM;EACnB,IAAI,CAACoC,SAAL,EAAgB;IACd,MAAM,IAAIlR,KAAJ,CAAU8O,OAAO,IAAI,kBAArB,CAAN;EACD;AACF;ACWD;AACA;AACA;AACA;AACA;;;AACA,MAAMuO,iBAAiB,GAAGhe,MAAM,CAACqW,KAAPrW,CAAa,EAAbA,EAAiBie,IAAjBje,CAAsB,CAAtBA,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaod,gBAAgB,GAAG,OAAO,EAAP,GAAY;AAE5C,MAAMc,gBAAgB,GAAG,EAAzB;AAEA;AACA;AACA;;AA6BA;AACA;AACA;;AACO,MAAMC,sBAAN,CAA6B;EAClC;AACF;AACA;AACA;;EAGE;AACF;AACA;;EAGE;AACF;AACA;EAGE3c,WAAW,CAAC4c,IAAD,EAAyC;IAAA,KAZpDhN,IAYoD;IAAA,KAPpDsF,SAOoD;IAAA,KAFpDpC,IAEoD,GAFrCtU,MAAM,CAACqW,KAAPrW,CAAa,CAAbA,CAEqC;IAClD,KAAK0W,SAAL,GAAiB0H,IAAI,CAAC1H,SAAtB;IACA,KAAKtF,IAAL,GAAYgN,IAAI,CAAChN,IAAjB;;IACA,IAAIgN,IAAI,CAAC9J,IAAT,EAAe;MACb,KAAKA,IAAL,GAAY8J,IAAI,CAAC9J,IAAjB;IACD;EACF;;AAvBiC;AA0BpC;AACA;AACA;;AA+BA;AACA;AACA;;;AACO,MAAM+J,WAAN,CAAkB;EACvB;AACF;AACA;AACA;;EAGE;AACF;AACA;EACe,IAATC,SAAS,GAAkB;IAC7B,IAAI,KAAKC,UAAL,CAAgBpc,MAAhB,GAAyB,CAA7B,EAAgC;MAC9B,OAAO,KAAKoc,UAAL,CAAgB,CAAhB,EAAmBD,SAA1B;IACD;;IACD,OAAO,IAAP;EACD;EAED;AACF;AACA;;EAmBE;AACF;AACA;;;EACE9c,WAAW,CAAC4c,IAAD,EAA+B;IAAA,KApC1CG,UAoC0C,GApCD,EAoCC;IAAA,KArB1CC,QAqB0C;IAAA,KAhB1CjD,YAgB0C,GAhBI,EAgBJ;IAAA,KAX1CD,eAW0C;IAAA,KAL1CmD,SAK0C;IACxCL,IAAI,IAAIpd,MAAM,CAACyT,MAAPzT,CAAc,IAAdA,EAAoBod,IAApBpd,CAARod;EACD;EAED;AACF;AACA;;;EACEM,GAAG,GAIY;IAAA,mCAHVC,KAGU;MAHVA,KAGU;IAAA;;IACb,IAAIA,KAAK,CAACxc,MAANwc,KAAiB,CAArB,EAAwB;MACtB,MAAM,IAAIhe,KAAJ,CAAU,iBAAV,CAAN;IACD;;IAEDge,KAAK,CAACxP,OAANwP,CAAehE,IAAD,IAAe;MAC3B,IAAI,kBAAkBA,IAAtB,EAA4B;QAC1B,KAAKY,YAAL,GAAoB,KAAKA,YAAL,CAAkBxU,MAAlB,CAAyB4T,IAAI,CAACY,YAA9B,CAApB;MADF,OAEO,IAAI,UAAUZ,IAAV,IAAkB,eAAeA,IAAjC,IAAyC,UAAUA,IAAvD,EAA6D;QAClE,KAAKY,YAAL,CAAkB1Y,IAAlB,CAAuB8X,IAAvB;MADK,OAEA;QACL,KAAKY,YAAL,CAAkB1Y,IAAlB,CAAuB,IAAIsb,sBAAJ,CAA2BxD,IAA3B,CAAvB;MACD;IAPH;IASA,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEiE,cAAc,GAAY;IACxB,MAAM;MAACH;IAAD,IAAc,IAApB;;IACA,IAAIA,SAAS,IAAI,KAAKlD,YAAL,CAAkB,CAAlB,KAAwBkD,SAAS,CAACI,gBAAnD,EAAqE;MACnE,KAAKvD,eAAL,GAAuBmD,SAAS,CAACxH,KAAjC;MACA,KAAKsE,YAAL,CAAkBvH,OAAlB,CAA0ByK,SAAS,CAACI,gBAApC;IACD;;IACD,MAAM;MAACvD;IAAD,IAAoB,IAA1B;;IACA,IAAI,CAACA,eAAL,EAAsB;MACpB,MAAM,IAAI3a,KAAJ,CAAU,sCAAV,CAAN;IACD;;IAED,IAAI,KAAK4a,YAAL,CAAkBpZ,MAAlB,GAA2B,CAA/B,EAAkC;MAChCmO,OAAO,CAACM,IAARN,CAAa,0BAAbA;IACD;;IAED,IAAIkO,QAAJ;;IACA,IAAI,KAAKA,QAAT,EAAmB;MACjBA,QAAQ,GAAG,KAAKA,QAAhBA;IADF,OAEO,IAAI,KAAKD,UAAL,CAAgBpc,MAAhB,GAAyB,CAAzB,IAA8B,KAAKoc,UAAL,CAAgB,CAAhB,EAAmBzI,SAArD,EAAgE;MACrE;MACA0I,QAAQ,GAAG,KAAKD,UAAL,CAAgB,CAAhB,EAAmBzI,SAA9B0I;IAFK,OAGA;MACL,MAAM,IAAI7d,KAAJ,CAAU,gCAAV,CAAN;IACD;;IAED,KAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsZ,YAAL,CAAkBpZ,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;MACjD,IAAI,KAAKsZ,YAAL,CAAkBtZ,CAAlB,EAAqByU,SAArB,KAAmClB,SAAvC,EAAkD;QAChD,MAAM,IAAI7U,KAAJ,CACH,iCAAgCsB,CAAE,2BAD/B,CAAN;MAGD;IACF;;IAED,MAAMma,UAAoB,GAAG,EAA7B;IACA,MAAM0C,YAA2B,GAAG,EAApC;IACA,KAAKvD,YAAL,CAAkBpM,OAAlB,CAA0ByN,WAAW,IAAI;MACvCA,WAAW,CAACxL,IAAZwL,CAAiBzN,OAAjByN,CAAyBmC,WAAW,IAAI;QACtCD,YAAY,CAACjc,IAAbic,CAAkB,EAAC,GAAGC;QAAJ,CAAlBD;MADF;MAIA,MAAMpI,SAAS,GAAGkG,WAAW,CAAClG,SAAZkG,CAAsB3Z,QAAtB2Z,EAAlB;;MACA,IAAI,CAACR,UAAU,CAAC4C,QAAX5C,CAAoB1F,SAApB0F,CAAL,EAAqC;QACnCA,UAAU,CAACvZ,IAAXuZ,CAAgB1F,SAAhB0F;MACD;IARH,GAnCwB;;IA+CxBA,UAAU,CAACjN,OAAXiN,CAAmB1F,SAAS,IAAI;MAC9BoI,YAAY,CAACjc,IAAbic,CAAkB;QAChBxH,MAAM,EAAE,IAAI7B,SAAJ,CAAciB,SAAd,CADQ;QAEhBuI,QAAQ,EAAE,KAFM;QAGhBC,UAAU,EAAE;MAHI,CAAlBJ;IADF,GA/CwB;;IAwDxBA,YAAY,CAACK,IAAbL,CAAkB,UAAUrX,CAAV,EAAaC,CAAb,EAAgB;MAChC,MAAM0X,aAAa,GAAG3X,CAAC,CAAC6P,MAAF7P,CACnBuO,QADmBvO,GAEnB4X,aAFmB5X,CAELC,CAAC,CAAC4P,MAAF5P,CAASsO,QAATtO,EAFKD,CAAtB;MAGA,MAAM6X,WAAW,GAAG7X,CAAC,CAACwX,QAAFxX,KAAeC,CAAC,CAACuX,QAAjBxX,GAA4B,CAA5BA,GAAgCA,CAAC,CAACwX,QAAFxX,GAAa,CAAC,CAAdA,GAAkB,CAAtE;MACA,MAAM8X,aAAa,GACjB9X,CAAC,CAACyX,UAAFzX,KAAiBC,CAAC,CAACwX,UAAnBzX,GAAgC2X,aAAhC3X,GAAgDA,CAAC,CAACyX,UAAFzX,GAAe,CAAC,CAAhBA,GAAoB,CADtE;MAEA,OAAO6X,WAAW,IAAIC,aAAtB;IAPF,GAxDwB;;IAmExB,MAAMC,WAA0B,GAAG,EAAnC;IACAV,YAAY,CAAC3P,OAAb2P,CAAqBC,WAAW,IAAI;MAClC,MAAMU,YAAY,GAAGV,WAAW,CAACzH,MAAZyH,CAAmB9b,QAAnB8b,EAArB;MACA,MAAMW,WAAW,GAAGF,WAAW,CAACG,SAAZH,CAAsB/X,CAAC,IAAI;QAC7C,OAAOA,CAAC,CAAC6P,MAAF7P,CAASxE,QAATwE,OAAwBgY,YAA/B;MADkB,EAApB;;MAGA,IAAIC,WAAW,GAAG,CAAC,CAAnB,EAAsB;QACpBF,WAAW,CAACE,WAAD,CAAXF,CAAyBN,UAAzBM,GACEA,WAAW,CAACE,WAAD,CAAXF,CAAyBN,UAAzBM,IAAuCT,WAAW,CAACG,UADrDM;MADF,OAGO;QACLA,WAAW,CAAC3c,IAAZ2c,CAAiBT,WAAjBS;MACD;IAVH,GApEwB;;IAkFxB,MAAMI,aAAa,GAAGJ,WAAW,CAACG,SAAZH,CAAsB/X,CAAC,IAAI;MAC/C,OAAOA,CAAC,CAAC6P,MAAF7P,CAASoO,MAATpO,CAAgB+W,QAAhB/W,CAAP;IADoB,EAAtB;;IAGA,IAAImY,aAAa,GAAG,CAAC,CAArB,EAAwB;MACtB,MAAM,CAACC,SAAD,IAAcL,WAAW,CAACM,MAAZN,CAAmBI,aAAnBJ,EAAkC,CAAlCA,CAApB;MACAK,SAAS,CAACZ,QAAVY,GAAqB,IAArBA;MACAA,SAAS,CAACX,UAAVW,GAAuB,IAAvBA;MACAL,WAAW,CAACxL,OAAZwL,CAAoBK,SAApBL;IAJF,OAKO;MACLA,WAAW,CAACxL,OAAZwL,CAAoB;QAClBlI,MAAM,EAAEkH,QADU;QAElBS,QAAQ,EAAE,IAFQ;QAGlBC,UAAU,EAAE;MAHM,CAApBM;IA3FsB;;;IAmGxB,KAAK,MAAMlB,SAAX,IAAwB,KAAKC,UAA7B,EAAyC;MACvC,MAAMmB,WAAW,GAAGF,WAAW,CAACG,SAAZH,CAAsB/X,CAAC,IAAI;QAC7C,OAAOA,CAAC,CAAC6P,MAAF7P,CAASoO,MAATpO,CAAgB6W,SAAS,CAACxI,SAA1BrO,CAAP;MADkB,EAApB;;MAGA,IAAIiY,WAAW,GAAG,CAAC,CAAnB,EAAsB;QACpB,IAAI,CAACF,WAAW,CAACE,WAAD,CAAXF,CAAyBP,QAA9B,EAAwC;UACtCO,WAAW,CAACE,WAAD,CAAXF,CAAyBP,QAAzBO,GAAoC,IAApCA;UACAlP,OAAO,CAACM,IAARN,CACE,6DACE,gFADF,GAEE,wFAHJA;QAKD;MARH,OASO;QACL,MAAM,IAAI3P,KAAJ,CAAW,mBAAkB2d,SAAS,CAACxI,SAAVwI,CAAoBrb,QAApBqb,EAA+B,EAA5D,CAAN;MACD;IACF;;IAED,IAAIxC,qBAAqB,GAAG,CAA5B;IACA,IAAIE,yBAAyB,GAAG,CAAhC;IACA,IAAIC,2BAA2B,GAAG,CAAlC,CAvHwB;;IA0HxB,MAAM8D,UAAoB,GAAG,EAA7B;IACA,MAAMC,YAAsB,GAAG,EAA/B;IACAR,WAAW,CAACrQ,OAAZqQ,CAAoB,QAAoC;MAAA,IAAnC;QAAClI,MAAD;QAAS2H,QAAT;QAAmBC;MAAnB,CAAmC;;MACtD,IAAID,QAAJ,EAAc;QACZc,UAAU,CAACld,IAAXkd,CAAgBzI,MAAM,CAACrU,QAAPqU,EAAhByI;QACAjE,qBAAqB,IAAI,CAAzBA;;QACA,IAAI,CAACoD,UAAL,EAAiB;UACflD,yBAAyB,IAAI,CAA7BA;QACD;MALH,OAMO;QACLgE,YAAY,CAACnd,IAAbmd,CAAkB1I,MAAM,CAACrU,QAAPqU,EAAlB0I;;QACA,IAAI,CAACd,UAAL,EAAiB;UACfjD,2BAA2B,IAAI,CAA/BA;QACD;MACF;IAZH;IAeA,MAAMZ,WAAW,GAAG0E,UAAU,CAAChZ,MAAXgZ,CAAkBC,YAAlBD,CAApB;IACA,MAAMxE,YAAmC,GAAG,KAAKA,YAAL,CAAkBpG,GAAlB,CAC1CyH,WAAW,IAAI;MACb,MAAM;QAACtI,IAAD;QAAOoC;MAAP,IAAoBkG,WAA1B;MACA,OAAO;QACLjB,cAAc,EAAEN,WAAW,CAAC4E,OAAZ5E,CAAoB3E,SAAS,CAACzT,QAAVyT,EAApB2E,CADX;QAELwB,QAAQ,EAAED,WAAW,CAACxL,IAAZwL,CAAiBzH,GAAjByH,CAAqBsD,IAAI,IACjC7E,WAAW,CAAC4E,OAAZ5E,CAAoB6E,IAAI,CAAC5I,MAAL4I,CAAYjd,QAAZid,EAApB7E,CADQuB,CAFL;QAKLtI,IAAI,EAAEqB,IAAI,CAACjB,MAALiB,CAAYrB,IAAZqB;MALD,CAAP;IAHwC,EAA5C;IAaA4F,YAAY,CAACpM,OAAboM,CAAqBqB,WAAW,IAAI;MAClCuD,MAAS,CAACvD,WAAW,CAACjB,cAAZiB,IAA8B,CAA/B,CAATuD;MACAvD,WAAW,CAACC,QAAZD,CAAqBzN,OAArByN,CAA6BwD,QAAQ,IAAID,MAAS,CAACC,QAAQ,IAAI,CAAb,CAAlDxD;IAFF;IAKA,OAAO,IAAIzB,OAAJ,CAAY;MACjBC,MAAM,EAAE;QACNU,qBADM;QAENE,yBAFM;QAGNC;MAHM,CADS;MAMjBZ,WANiB;MAOjBC,eAPiB;MAQjBC;IARiB,CAAZ,CAAP;EAUD;EAED;AACF;AACA;;;EACE8E,QAAQ,GAAY;IAClB,MAAM5Q,OAAO,GAAG,KAAKmP,cAAL,EAAhB;IACA,MAAMmB,UAAU,GAAGtQ,OAAO,CAAC4L,WAAR5L,CAAoBjN,KAApBiN,CACjB,CADiBA,EAEjBA,OAAO,CAAC2L,MAAR3L,CAAeqM,qBAFErM,CAAnB;;IAKA,IAAI,KAAK8O,UAAL,CAAgBpc,MAAhB,KAA2B4d,UAAU,CAAC5d,MAA1C,EAAkD;MAChD,MAAMme,KAAK,GAAG,KAAK/B,UAAL,CAAgBgC,KAAhB,CAAsB,CAACC,IAAD,EAAO3E,KAAP,KAAiB;QACnD,OAAOkE,UAAU,CAAClE,KAAD,CAAVkE,CAAkBlK,MAAlBkK,CAAyBS,IAAI,CAAC1K,SAA9BiK,CAAP;MADY,EAAd;MAIA,IAAIO,KAAJ,EAAW,OAAO7Q,OAAP;IACZ;;IAED,KAAK8O,UAAL,GAAkBwB,UAAU,CAAC5K,GAAX4K,CAAejK,SAAS,KAAK;MAC7CwI,SAAS,EAAE,IADkC;MAE7CxI;IAF6C,CAAL,CAAxBiK,CAAlB;IAKA,OAAOtQ,OAAP;EACD;EAED;AACF;AACA;;;EACEgR,gBAAgB,GAAW;IACzB,OAAO,KAAKJ,QAAL,GAAgB1L,SAAhB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE+L,UAAU,GAA+B;IAAA,mCAA3BC,OAA2B;MAA3BA,OAA2B;IAAA;;IACvC,IAAIA,OAAO,CAACxe,MAARwe,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIhgB,KAAJ,CAAU,YAAV,CAAN;IACD;;IAED,MAAMigB,IAAI,GAAG,IAAIC,GAAJ,EAAb;IACA,KAAKtC,UAAL,GAAkBoC,OAAO,CACtBpE,MADeoE,CACR7K,SAAS,IAAI;MACnB,MAAMxI,GAAG,GAAGwI,SAAS,CAAC7S,QAAV6S,EAAZ;;MACA,IAAI8K,IAAI,CAACzE,GAALyE,CAAStT,GAATsT,CAAJ,EAAmB;QACjB,OAAO,KAAP;MADF,OAEO;QACLA,IAAI,CAAClC,GAALkC,CAAStT,GAATsT;QACA,OAAO,IAAP;MACD;IARa,GAUfzL,GAVewL,CAUX7K,SAAS,KAAK;MAACwI,SAAS,EAAE,IAAZ;MAAkBxI;IAAlB,CAAL,CAVE6K,CAAlB;EAWD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE1H,IAAI,GAA4B;IAAA,mCAAxB0H,OAAwB;MAAxBA,OAAwB;IAAA;;IAC9B,IAAIA,OAAO,CAACxe,MAARwe,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIhgB,KAAJ,CAAU,YAAV,CAAN;IAF4B;;;IAM9B,MAAMigB,IAAI,GAAG,IAAIC,GAAJ,EAAb;IACA,MAAMC,aAAa,GAAG,EAAtB;;IACA,KAAK,MAAMC,MAAX,IAAqBJ,OAArB,EAA8B;MAC5B,MAAMrT,GAAG,GAAGyT,MAAM,CAACjL,SAAPiL,CAAiB9d,QAAjB8d,EAAZ;;MACA,IAAIH,IAAI,CAACzE,GAALyE,CAAStT,GAATsT,CAAJ,EAAmB;QACjB;MADF,OAEO;QACLA,IAAI,CAAClC,GAALkC,CAAStT,GAATsT;QACAE,aAAa,CAACje,IAAdie,CAAmBC,MAAnBD;MACD;IACF;;IAED,KAAKvC,UAAL,GAAkBuC,aAAa,CAAC3L,GAAd2L,CAAkBC,MAAM,KAAK;MAC7CzC,SAAS,EAAE,IADkC;MAE7CxI,SAAS,EAAEiL,MAAM,CAACjL;IAF2B,CAAL,CAAxBgL,CAAlB;;IAKA,MAAMrR,OAAO,GAAG,KAAK4Q,QAAL,EAAhB;;IACA,KAAKW,YAAL,CAAkBvR,OAAlB,EAA2B,GAAGqR,aAA9B;;IACA,KAAKG,iBAAL,CAAuBxR,OAAO,CAACkF,SAARlF,EAAvB,EAA4C,IAA5C;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEyR,WAAW,GAA4B;IAAA,mCAAxBP,OAAwB;MAAxBA,OAAwB;IAAA;;IACrC,IAAIA,OAAO,CAACxe,MAARwe,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIhgB,KAAJ,CAAU,YAAV,CAAN;IAFmC;;;IAMrC,MAAMigB,IAAI,GAAG,IAAIC,GAAJ,EAAb;IACA,MAAMC,aAAa,GAAG,EAAtB;;IACA,KAAK,MAAMC,MAAX,IAAqBJ,OAArB,EAA8B;MAC5B,MAAMrT,GAAG,GAAGyT,MAAM,CAACjL,SAAPiL,CAAiB9d,QAAjB8d,EAAZ;;MACA,IAAIH,IAAI,CAACzE,GAALyE,CAAStT,GAATsT,CAAJ,EAAmB;QACjB;MADF,OAEO;QACLA,IAAI,CAAClC,GAALkC,CAAStT,GAATsT;QACAE,aAAa,CAACje,IAAdie,CAAmBC,MAAnBD;MACD;IACF;;IAED,MAAMrR,OAAO,GAAG,KAAK4Q,QAAL,EAAhB;;IACA,KAAKW,YAAL,CAAkBvR,OAAlB,EAA2B,GAAGqR,aAA9B;EACD;EAED;AACF;AACA;;;EACEE,YAAY,CAACvR,OAAD,EAA8C;IACxD,MAAMkO,QAAQ,GAAGlO,OAAO,CAACkF,SAARlF,EAAjB;;IADwD,mCAAxBkR,OAAwB;MAAxBA,OAAwB;IAAA;;IAExDA,OAAO,CAACxR,OAARwR,CAAgBI,MAAM,IAAI;MACxB,MAAMzC,SAAS,GAAG3G,IAAI,CAACsB,IAALtB,CAAUwJ,QAAVxJ,CAAmBgG,QAAnBhG,EAA6BoJ,MAAM,CAAChI,SAApCpB,CAAlB;;MACA,KAAKyJ,aAAL,CAAmBL,MAAM,CAACjL,SAA1B,EAAqChW,QAAQ,CAACwe,SAAD,CAA7C;IAFF;EAID;EAED;AACF;AACA;AACA;AACA;;;EACE+C,YAAY,CAAC/J,MAAD,EAAoBgH,SAApB,EAAuC;IACjD,KAAK+B,QAAL,GADiD;;;IAEjD,KAAKe,aAAL,CAAmB9J,MAAnB,EAA2BgH,SAA3B;EACD;EAED;AACF;AACA;;;EACE8C,aAAa,CAAC9J,MAAD,EAAoBgH,SAApB,EAAuC;IAClD6B,MAAS,CAAC7B,SAAS,CAACnc,MAAVmc,KAAqB,EAAtB,CAAT6B;IAEA,MAAMtE,KAAK,GAAG,KAAK0C,UAAL,CAAgBoB,SAAhB,CAA0B2B,OAAO,IAC7ChK,MAAM,CAACzB,MAAPyB,CAAcgK,OAAO,CAACxL,SAAtBwB,CADY,CAAd;;IAGA,IAAIuE,KAAK,GAAG,CAAZ,EAAe;MACb,MAAM,IAAIlb,KAAJ,CAAW,mBAAkB2W,MAAM,CAACrU,QAAPqU,EAAkB,EAA/C,CAAN;IACD;;IAED,KAAKiH,UAAL,CAAgB1C,KAAhB,EAAuByC,SAAvB,GAAmCte,MAAM,CAACG,IAAPH,CAAYse,SAAZte,CAAnC;EACD;EAED;AACF;AACA;;;EACEuhB,gBAAgB,GAAY;IAC1B,OAAO,KAAKN,iBAAL,CAAuB,KAAKR,gBAAL,EAAvB,EAAgD,IAAhD,CAAP;EACD;EAED;AACF;AACA;;;EACEQ,iBAAiB,CAACtD,QAAD,EAAmB6D,oBAAnB,EAA2D;IAC1E,KAAK,MAAM;MAAClD,SAAD;MAAYxI;IAAZ,CAAX,IAAqC,KAAKyI,UAA1C,EAAsD;MACpD,IAAID,SAAS,KAAK,IAAlB,EAAwB;QACtB,IAAIkD,oBAAJ,EAA0B;UACxB,OAAO,KAAP;QACD;MAHH,OAIO;QACL,IACE,CAAC7J,IAAI,CAACsB,IAALtB,CAAUwJ,QAAVxJ,CAAmB8J,MAAnB9J,CAA0BgG,QAA1BhG,EAAoC2G,SAApC3G,EAA+C7B,SAAS,CAAChW,QAAVgW,EAA/C6B,CADH,EAEE;UACA,OAAO,KAAP;QACD;MACF;IACF;;IACD,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEhD,SAAS,CAAC+M,MAAD,EAAmC;IAC1C,MAAM;MAACF,oBAAD;MAAuBD;IAAvB,IAA2CvgB,MAAM,CAACyT,MAAPzT,CAC/C;MAACwgB,oBAAoB,EAAE,IAAvB;MAA6BD,gBAAgB,EAAE;IAA/C,CAD+CvgB,EAE/C0gB,MAF+C1gB,CAAjD;IAKA,MAAM2c,QAAQ,GAAG,KAAK8C,gBAAL,EAAjB;;IACA,IACEc,gBAAgB,IAChB,CAAC,KAAKN,iBAAL,CAAuBtD,QAAvB,EAAiC6D,oBAAjC,CAFH,EAGE;MACA,MAAM,IAAI7gB,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,OAAO,KAAKghB,UAAL,CAAgBhE,QAAhB,CAAP;EACD;EAED;AACF;AACA;;;EACEgE,UAAU,CAAChE,QAAD,EAA2B;IACnC,MAAM;MAACY;IAAD,IAAe,IAArB;IACA,MAAMqD,cAAwB,GAAG,EAAjC;IACAjF,aAAsBiF,cAAtB,EAAsCrD,UAAU,CAACpc,MAAjD;IACA,MAAM0f,iBAAiB,GACrBD,cAAc,CAACzf,MAAfyf,GAAwBrD,UAAU,CAACpc,MAAXoc,GAAoB,EAA5CqD,GAAiDjE,QAAQ,CAACxb,MAD5D;IAEA,MAAM2f,eAAe,GAAG9hB,MAAM,CAACqW,KAAPrW,CAAa6hB,iBAAb7hB,CAAxB;IACAmgB,MAAS,CAAC5B,UAAU,CAACpc,MAAXoc,GAAoB,GAArB,CAAT4B;IACAngB,MAAM,CAACG,IAAPH,CAAY4hB,cAAZ5hB,EAA4BsW,IAA5BtW,CAAiC8hB,eAAjC9hB,EAAkD,CAAlDA;IACAue,UAAU,CAACpP,OAAXoP,CAAmB,QAAc1C,KAAd,KAAwB;MAAA,IAAvB;QAACyC;MAAD,CAAuB;;MACzC,IAAIA,SAAS,KAAK,IAAlB,EAAwB;QACtB6B,MAAS,CAAC7B,SAAS,CAACnc,MAAVmc,KAAqB,EAAtB,EAA2B,8BAA3B,CAAT6B;QACAngB,MAAM,CAACG,IAAPH,CAAYse,SAAZte,EAAuBsW,IAAvBtW,CACE8hB,eADF9hB,EAEE4hB,cAAc,CAACzf,MAAfyf,GAAwB/F,KAAK,GAAG,EAFlC7b;MAID;IAPH;IASA2d,QAAQ,CAACrH,IAATqH,CACEmE,eADFnE,EAEEiE,cAAc,CAACzf,MAAfyf,GAAwBrD,UAAU,CAACpc,MAAXoc,GAAoB,EAF9CZ;IAIAwC,MAAS,CACP2B,eAAe,CAAC3f,MAAhB2f,IAA0B1E,gBADnB,EAEN,0BAAyB0E,eAAe,CAAC3f,MAAO,MAAKib,gBAAiB,EAFhE,CAAT+C;IAIA,OAAO2B,eAAP;EACD;EAED;AACF;AACA;AACA;;;EACU,IAAJ1Q,IAAI,GAAqB;IAC3B+O,MAAS,CAAC,KAAK5E,YAAL,CAAkBpZ,MAAlB,KAA6B,CAA9B,CAATge;IACA,OAAO,KAAK5E,YAAL,CAAkB,CAAlB,EAAqBnK,IAArB,CAA0B+D,GAA1B,CAA8B4M,MAAM,IAAIA,MAAM,CAACzK,MAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACe,IAATZ,SAAS,GAAc;IACzByJ,MAAS,CAAC,KAAK5E,YAAL,CAAkBpZ,MAAlB,KAA6B,CAA9B,CAATge;IACA,OAAO,KAAK5E,YAAL,CAAkB,CAAlB,EAAqB7E,SAA5B;EACD;EAED;AACF;AACA;AACA;;;EACU,IAAJpC,IAAI,GAAW;IACjB6L,MAAS,CAAC,KAAK5E,YAAL,CAAkBpZ,MAAlB,KAA6B,CAA9B,CAATge;IACA,OAAO,KAAK5E,YAAL,CAAkB,CAAlB,EAAqBjH,IAA5B;EACD;EAED;AACF;AACA;;;EACa,OAAJnU,IAAI,CAACC,MAAD,EAA2D;IACpE;IACA,IAAIwd,SAAS,GAAG,CAAC,GAAGxd,MAAJ,CAAhB;IAEA,MAAMwhB,cAAc,GAAGjF,aAAsBiB,SAAtB,CAAvB;IACA,IAAIW,UAAU,GAAG,EAAjB;;IACA,KAAK,IAAItc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2f,cAApB,EAAoC3f,CAAC,EAArC,EAAyC;MACvC,MAAMqc,SAAS,GAAGV,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmBM,gBAAnBN,CAAlB;MACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgBM,gBAAhBN,CAAZA;MACAW,UAAU,CAAC1b,IAAX0b,CAAgB5I,IAAI,CAACjB,MAALiB,CAAY3V,MAAM,CAACG,IAAPH,CAAYse,SAAZte,CAAZ2V,CAAhB4I;IACD;;IAED,OAAOF,WAAW,CAAC2D,QAAZ3D,CAAqBlD,OAAO,CAAChb,IAARgb,CAAayC,SAAbzC,CAArBkD,EAA8CE,UAA9CF,CAAP;EACD;EAED;AACF;AACA;;;EACiB,OAAR2D,QAAQ,CACbvS,OADa,EAGA;IAAA,IADb8O,UACa,uEADe,EACf;IACb,MAAMb,WAAW,GAAG,IAAIW,WAAJ,EAApB;IACAX,WAAW,CAACpC,eAAZoC,GAA8BjO,OAAO,CAAC6L,eAAtCoC;;IACA,IAAIjO,OAAO,CAAC2L,MAAR3L,CAAeqM,qBAAfrM,GAAuC,CAA3C,EAA8C;MAC5CiO,WAAW,CAACc,QAAZd,GAAuBjO,OAAO,CAAC4L,WAAR5L,CAAoB,CAApBA,CAAvBiO;IACD;;IACDa,UAAU,CAACpP,OAAXoP,CAAmB,CAACD,SAAD,EAAYzC,KAAZ,KAAsB;MACvC,MAAMoG,aAAa,GAAG;QACpB3D,SAAS,EACPA,SAAS,IAAI3I,IAAI,CAACjB,MAALiB,CAAYqI,iBAAZrI,CAAb2I,GACI,IADJA,GAEI3I,IAAI,CAACd,MAALc,CAAY2I,SAAZ3I,CAJc;QAKpBG,SAAS,EAAErG,OAAO,CAAC4L,WAAR5L,CAAoBoM,KAApBpM;MALS,CAAtB;MAOAiO,WAAW,CAACa,UAAZb,CAAuB7a,IAAvB6a,CAA4BuE,aAA5BvE;IARF;IAWAjO,OAAO,CAAC8L,YAAR9L,CAAqBN,OAArBM,CAA6BmN,WAAW,IAAI;MAC1C,MAAMxL,IAAI,GAAGwL,WAAW,CAACC,QAAZD,CAAqBzH,GAArByH,CAAyBnB,OAAO,IAAI;QAC/C,MAAMnE,MAAM,GAAG7H,OAAO,CAAC4L,WAAR5L,CAAoBgM,OAApBhM,CAAf;QACA,OAAO;UACL6H,MADK;UAEL2H,QAAQ,EACNvB,WAAW,CAACa,UAAZb,CAAuBwE,IAAvBxE,CACEqE,MAAM,IAAIA,MAAM,CAACjM,SAAPiM,CAAiB9e,QAAjB8e,OAAgCzK,MAAM,CAACrU,QAAPqU,EAD5CoG,KAEKjO,OAAO,CAACmM,eAARnM,CAAwBgM,OAAxBhM,CALF;UAMLyP,UAAU,EAAEzP,OAAO,CAACsM,iBAARtM,CAA0BgM,OAA1BhM;QANP,CAAP;MAFW,EAAb;MAYAiO,WAAW,CAACnC,YAAZmC,CAAyB7a,IAAzB6a,CACE,IAAIS,sBAAJ,CAA2B;QACzB/M,IADyB;QAEzBsF,SAAS,EAAEjH,OAAO,CAAC4L,WAAR5L,CAAoBmN,WAAW,CAACjB,cAAhClM,CAFc;QAGzB6E,IAAI,EAAEqB,IAAI,CAACd,MAALc,CAAYiH,WAAW,CAACtI,IAAxBqB;MAHmB,CAA3B,CADF+H;IAbF;IAsBA,OAAOA,WAAP;EACD;;AAtkBsB;;MClIZyE,mBAAmB,GAAG,IAAI1M,SAAJ,CACjC,6CADiC;MAItB2M,4BAA4B,GAAG,IAAI3M,SAAJ,CAC1C,6CAD0C;MAI/B4M,0BAA0B,GAAG,IAAI5M,SAAJ,CACxC,6CADwC;MAI7B6M,gCAAgC,GAAG,IAAI7M,SAAJ,CAC9C,6CAD8C;MAInC8M,kBAAkB,GAAG,IAAI9M,SAAJ,CAChC,6CADgC;MAIrB+M,qBAAqB,GAAG,IAAI/M,SAAJ,CACnC,6CADmC;MAIxBgN,yBAAyB,GAAG,IAAIhN,SAAJ,CACvC,6CADuC;MAI5BiN,0BAA0B,GAAG,IAAIjN,SAAJ,CACxC,6CADwC;MAI7BkN,2BAA2B,GAAG,IAAIlN,SAAJ,CACzC,6CADyC;AC5B3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAemN,yBAAf,CACLC,UADK,EAELnF,WAFK,EAGLiD,OAHK,EAIL7M,OAJK,EAK0B;EAC/B,MAAMgP,WAAW,GAAGhP,OAAO,IAAI;IAC7BiP,aAAa,EAAEjP,OAAO,CAACiP,aADM;IAE7BC,mBAAmB,EAAElP,OAAO,CAACkP,mBAARlP,IAA+BA,OAAO,CAACmP,UAF/B;IAG7BC,UAAU,EAAEpP,OAAO,CAACoP;EAHS,CAA/B;EAMA,MAAM5E,SAAS,GAAG,MAAMuE,UAAU,CAACM,eAAXN,CACtBnF,WADsBmF,EAEtBlC,OAFsBkC,EAGtBC,WAHsBD,CAAxB;EAMA,MAAMO,MAAM,GAAG,CACb,MAAMP,UAAU,CAACQ,kBAAXR,CACJvE,SADIuE,EAEJ/O,OAAO,IAAIA,OAAO,CAACmP,UAFfJ,CADO,EAKbphB,KALF;;EAOA,IAAI2hB,MAAM,CAAChM,GAAX,EAAgB;IACd,MAAM,IAAIzW,KAAJ,CACH,eAAc2d,SAAU,YAAWhN,IAAI,CAACC,SAALD,CAAe8R,MAAf9R,CAAuB,GADvD,CAAN;EAGD;;EAED,OAAOgN,SAAP;AACD,C,CCjDD;;;AACO,SAASgF,KAAT,CAAeC,EAAf,EAA0C;EAC/C,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;ACED;AACA;AACA;;AAQA;AACA;AACA;AACA;;;AACO,SAASI,UAAT,CAAoBlJ,IAApB,EAA2ChD,MAA3C,EAAiE;EACtE,MAAMmM,WAAW,GACfnJ,IAAI,CAACC,MAALD,CAAYP,IAAZO,IAAoB,CAApBA,GAAwBA,IAAI,CAACC,MAALD,CAAYP,IAApCO,GAA2CgD,SAAgBhD,IAAhB,EAAsBhD,MAAtB,CAD7C;EAEA,MAAMnD,IAAI,GAAGtU,MAAM,CAACqW,KAAPrW,CAAa4jB,WAAb5jB,CAAb;EACA,MAAM6jB,YAAY,GAAG7iB,MAAM,CAACyT,MAAPzT,CAAc;IAAC4b,WAAW,EAAEnC,IAAI,CAACoB;EAAnB,CAAd7a,EAAyCyW,MAAzCzW,CAArB;EACAyZ,IAAI,CAACC,MAALD,CAAY/F,MAAZ+F,CAAmBoJ,YAAnBpJ,EAAiCnG,IAAjCmG;EACA,OAAOnG,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASwP,UAAT,CAAoBrJ,IAApB,EAA2Cra,MAA3C,EAAgE;EACrE,IAAIkU,IAAJ;;EACA,IAAI;IACFA,IAAI,GAAGmG,IAAI,CAACC,MAALD,CAAY5F,MAAZ4F,CAAmBra,MAAnBqa,CAAPnG;EADF,EAEE,OAAO8C,GAAP,EAAY;IACZ,MAAM,IAAIzW,KAAJ,CAAU,0BAA0ByW,GAApC,CAAN;EACD;;EAED,IAAI9C,IAAI,CAACsI,WAALtI,KAAqBmG,IAAI,CAACoB,KAA9B,EAAqC;IACnC,MAAM,IAAIlb,KAAJ,CACH,mDAAkD2T,IAAI,CAACsI,WAAY,OAAMnC,IAAI,CAACoB,KAAM,EADjF,CAAN;EAGD;;EAED,OAAOvH,IAAP;AACD;AC7CD;AACA;AACA;AACA;AACA;;;MACayP,mBAAmB,GAAGzK,YAAY,CAAC0K,IAAb1K,CAAkB,sBAAlBA;AAEnC;AACA;AACA;;ACDA;AACA;AACA;AACA;AACA;;AACA,MAAM2K,kBAAkB,GAAG3K,YAAY,CAACI,MAAbJ,CAAoB,CAC7CA,YAAY,CAACK,GAAbL,CAAiB,SAAjBA,CAD6C,EAE7CA,YAAY,CAACK,GAAbL,CAAiB,OAAjBA,CAF6C,EAG7CmE,UAAiB,kBAAjB,CAH6C,EAI7CA,UAAiB,OAAjB,CAJ6C,EAK7CnE,YAAY,CAACI,MAAbJ,CAAoB,CAACyK,mBAAD,CAApBzK,EAA2C,eAA3CA,CAL6C,CAApBA,CAA3B;MAQa4K,oBAAoB,GAAGD,kBAAkB,CAAC/J;AAQvD;AACA;AACA;;AACO,MAAMiK,YAAN,CAAmB;EAKxB;AACF;AACA;EACE3iB,WAAW,CAAC0O,IAAD,EAAyB;IAAA,KAPpCkU,gBAOoC;IAAA,KANpCnN,KAMoC;IAAA,KALpCoN,aAKoC;IAClC,KAAKD,gBAAL,GAAwBlU,IAAI,CAACkU,gBAA7B;IACA,KAAKnN,KAAL,GAAa/G,IAAI,CAAC+G,KAAlB;IACA,KAAKoN,aAAL,GAAqBnU,IAAI,CAACmU,aAA1B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACwB,OAAfC,eAAe,CACpBlkB,MADoB,EAEN;IACd,MAAMmkB,YAAY,GAAGN,kBAAkB,CAACpP,MAAnBoP,CAA0BnkB,QAAQ,CAACM,MAAD,CAAlC6jB,EAA4C,CAA5CA,CAArB;IACA,OAAO,IAAIE,YAAJ,CAAiB;MACtBC,gBAAgB,EAAE,IAAI3O,SAAJ,CAAc8O,YAAY,CAACH,gBAA3B,CADI;MAEtBnN,KAAK,EAAE,IAAIxB,SAAJ,CAAc8O,YAAY,CAACtN,KAA3B,EAAkChU,QAAlC,EAFe;MAGtBohB,aAAa,EAAEE,YAAY,CAACF;IAHN,CAAjB,CAAP;EAKD;;AA7BuB;ACxB1B;AACA;AACA;;AAgMA;AACA;AACA;;;AACO,MAAMG,iBAAN,CAAwB;EAC7B;AACF;AACA;EACEhjB,WAAW,GAAG;EAEd;AACF;AACA;;;EAC8B,OAArBijB,qBAAqB,CAC1B7H,WAD0B,EAEH;IACvB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IAEA,MAAMiO,qBAAqB,GAAGrL,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;IACA,MAAMsL,SAAS,GAAGD,qBAAqB,CAAC9P,MAAtB8P,CAA6B/H,WAAW,CAACtI,IAAzCqQ,CAAlB;IAEA,IAAIlK,IAAJ;;IACA,KAAK,MAAM,CAACoK,MAAD,EAASnK,MAAT,CAAX,IAA+B1Z,MAAM,CAAC8jB,OAAP9jB,CAAe+jB,0BAAf/jB,CAA/B,EAA2E;MACzE,IAAI0Z,MAAM,CAACmB,KAAPnB,IAAgBkK,SAApB,EAA+B;QAC7BnK,IAAI,GAAGoK,MAAPpK;QACA;MACD;IACF;;IAED,IAAI,CAACA,IAAL,EAAW;MACT,MAAM,IAAI9Z,KAAJ,CAAU,qDAAV,CAAN;IACD;;IAED,OAAO8Z,IAAP;EACD;EAED;AACF;AACA;;;EAC4B,OAAnBuK,mBAAmB,CACxBpI,WADwB,EAEH;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC8T,QAAD;MAAWC,KAAX;MAAkBzO;IAAlB,IAA+BoN,UAAU,CAC7CiB,0BAA0B,CAACK,MADkB,EAE7CxI,WAAW,CAACtI,IAFiC,CAA/C;IAKA,OAAO;MACL+Q,UAAU,EAAEzI,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELgO,gBAAgB,EAAE1I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFjC;MAGL4N,QAHK;MAILC,KAJK;MAKLzO,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IALN,CAAP;EAOD;EAED;AACF;AACA;;;EACuB,OAAd6O,cAAc,CAAC3I,WAAD,EAAsD;IACzE,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC8T;IAAD,IAAapB,UAAU,CAC3BiB,0BAA0B,CAACS,QADA,EAE3B5I,WAAW,CAACtI,IAFe,CAA7B;IAKA,OAAO;MACL+Q,UAAU,EAAEzI,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELmO,QAAQ,EAAE7I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFzB;MAGL4N;IAHK,CAAP;EAKD;EAED;AACF;AACA;;;EAC+B,OAAtBQ,sBAAsB,CAC3B9I,WAD2B,EAEH;IACxB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC8T,QAAD;MAAWzO,IAAX;MAAiBC;IAAjB,IAA8BoN,UAAU,CAC5CiB,0BAA0B,CAACY,gBADiB,EAE5C/I,WAAW,CAACtI,IAFgC,CAA9C;IAKA,OAAO;MACL+Q,UAAU,EAAEzI,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELsO,UAAU,EAAEhJ,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAF3B;MAGLmO,QAAQ,EAAE7I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAHzB;MAIL4N,QAJK;MAKLzO,IALK;MAMLC,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IANN,CAAP;EAQD;EAED;AACF;AACA;;;EACuB,OAAdmP,cAAc,CAACjJ,WAAD,EAAsD;IACzE,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC+T;IAAD,IAAUrB,UAAU,CACxBiB,0BAA0B,CAACe,QADH,EAExBlJ,WAAW,CAACtI,IAFY,CAA1B;IAKA,OAAO;MACLyR,aAAa,EAAEnJ,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD9B;MAEL6N;IAFK,CAAP;EAID;EAED;AACF;AACA;;;EAC+B,OAAtBa,sBAAsB,CAC3BpJ,WAD2B,EAEH;IACxB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC6U,IAAD;MAAOxP,IAAP;MAAa0O,KAAb;MAAoBzO;IAApB,IAAiCoN,UAAU,CAC/CiB,0BAA0B,CAACmB,gBADoB,EAE/CtJ,WAAW,CAACtI,IAFmC,CAAjD;IAKA,OAAO;MACLyR,aAAa,EAAEnJ,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD9B;MAELsO,UAAU,EAAE,IAAInQ,SAAJ,CAAcwQ,IAAd,CAFP;MAGLxP,IAHK;MAIL0O,KAJK;MAKLzO,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IALN,CAAP;EAOD;EAED;AACF;AACA;;;EACqB,OAAZyP,YAAY,CAACvJ,WAAD,EAAoD;IACrE,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAACsF;IAAD,IAAcoN,UAAU,CAC5BiB,0BAA0B,CAACqB,MADC,EAE5BxJ,WAAW,CAACtI,IAFgB,CAA9B;IAKA,OAAO;MACLyR,aAAa,EAAEnJ,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD9B;MAELZ,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IAFN,CAAP;EAID;EAED;AACF;AACA;;;EAC6B,OAApB2P,oBAAoB,CACzBzJ,WADyB,EAEH;IACtB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC6U,IAAD;MAAOxP,IAAP;MAAaC;IAAb,IAA0BoN,UAAU,CACxCiB,0BAA0B,CAACuB,cADa,EAExC1J,WAAW,CAACtI,IAF4B,CAA1C;IAKA,OAAO;MACLyR,aAAa,EAAEnJ,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD9B;MAELsO,UAAU,EAAE,IAAInQ,SAAJ,CAAcwQ,IAAd,CAFP;MAGLxP,IAHK;MAILC,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IAJN,CAAP;EAMD;EAED;AACF;AACA;;;EAC6B,OAApB6P,oBAAoB,CACzB3J,WADyB,EAEI;IAC7B,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC6U,IAAD;MAAOxP,IAAP;MAAayO,QAAb;MAAuBC,KAAvB;MAA8BzO;IAA9B,IAA2CoN,UAAU,CACzDiB,0BAA0B,CAACyB,cAD8B,EAEzD5J,WAAW,CAACtI,IAF6C,CAA3D;IAKA,OAAO;MACL+Q,UAAU,EAAEzI,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELgO,gBAAgB,EAAE1I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFjC;MAGLsO,UAAU,EAAE,IAAInQ,SAAJ,CAAcwQ,IAAd,CAHP;MAILxP,IAJK;MAKLyO,QALK;MAMLC,KANK;MAOLzO,SAAS,EAAE,IAAIjB,SAAJ,CAAciB,SAAd;IAPN,CAAP;EASD;EAED;AACF;AACA;;;EAC8B,OAArB+P,qBAAqB,CAC1B7J,WAD0B,EAEH;IACvB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC+I;IAAD,IAAe2J,UAAU,CAC7BiB,0BAA0B,CAAC2B,sBADE,EAE7B9J,WAAW,CAACtI,IAFiB,CAA/B;IAKA,OAAO;MACLqS,WAAW,EAAE/J,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAEL8M,gBAAgB,EAAE,IAAI3O,SAAJ,CAAc0E,UAAd;IAFb,CAAP;EAID;EAED;AACF;AACA;;;EAC2B,OAAlByM,kBAAkB,CACvBhK,WADuB,EAEH;IACpB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA0S,UAAU,CACRiB,0BAA0B,CAAC8B,mBADnB,EAERjK,WAAW,CAACtI,IAFJ,CAAVwP;IAKA,OAAO;MACL6C,WAAW,EAAE/J,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAEL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF;IAFjC,CAAP;EAID;EAED;AACF;AACA;;;EAC4B,OAAnBwP,mBAAmB,CACxBlK,WADwB,EAEH;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC8T;IAAD,IAAapB,UAAU,CAC3BiB,0BAA0B,CAACgC,oBADA,EAE3BnK,WAAW,CAACtI,IAFe,CAA7B;IAKA,OAAO;MACLqS,WAAW,EAAE/J,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAELmO,QAAQ,EAAE7I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFzB;MAGL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAHjC;MAIL4N;IAJK,CAAP;EAMD;EAED;AACF;AACA;;;EAC6B,OAApB8B,oBAAoB,CACzBpK,WADyB,EAEH;IACtB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC+I;IAAD,IAAe2J,UAAU,CAC7BiB,0BAA0B,CAACkC,qBADE,EAE7BrK,WAAW,CAACtI,IAFiB,CAA/B;IAKA,OAAO;MACLqS,WAAW,EAAE/J,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAEL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFjC;MAGL4P,mBAAmB,EAAE,IAAIzR,SAAJ,CAAc0E,UAAd;IAHhB,CAAP;EAKD;EAED;AACF;AACA;;;EACuB,OAAduK,cAAc,CAAChO,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACb,MAAVa,CAAiByQ,aAAa,CAACzQ,SAA/BA,CAAL,EAAgD;MAC9C,MAAM,IAAI/V,KAAJ,CAAU,qDAAV,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACuB,OAAdskB,cAAc,CAAC7T,IAAD,EAAmBgW,cAAnB,EAA2C;IAC9D,IAAIhW,IAAI,CAACjP,MAALiP,GAAcgW,cAAlB,EAAkC;MAChC,MAAM,IAAIzmB,KAAJ,CACH,8BAA6ByQ,IAAI,CAACjP,MAAO,4BAA2BilB,cAAe,EADhF,CAAN;IAGD;EACF;;AAjT4B;AAoT/B;AACA;AACA;;AAeA;AACA;AACA;AACA;;;MACarC,0BAEZ,GAAG/jB,MAAM,CAACqmB,MAAPrmB,CAAc;EAChBokB,MAAM,EAAE;IACNvJ,KAAK,EAAE,CADD;IAENnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,EAG1BA,YAAY,CAACe,IAAbf,CAAkB,OAAlBA,CAH0B,EAI1BmE,UAAiB,WAAjB,CAJ0B,CAApBnE;EAFF,CADQ;EAUhB8M,MAAM,EAAE;IACNvK,KAAK,EAAE,CADD;IAENnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,WAAjB,CAF0B,CAApBnE;EAFF,CAVQ;EAiBhBkM,QAAQ,EAAE;IACR3J,KAAK,EAAE,CADC;IAERnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,CAApBA;EAFA,CAjBM;EAwBhBkN,cAAc,EAAE;IACd3K,KAAK,EAAE,CADO;IAEdnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,MAAjB,CAF0B,EAG1BA,WAAkB,MAAlB,CAH0B,EAI1BnE,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAJ0B,EAK1BA,YAAY,CAACe,IAAbf,CAAkB,OAAlBA,CAL0B,EAM1BmE,UAAiB,WAAjB,CAN0B,CAApBnE;EAFM,CAxBA;EAmChBuN,mBAAmB,EAAE;IACnBhL,KAAK,EAAE,CADY;IAEnBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAApBA;EAFW,CAnCL;EAuChByN,oBAAoB,EAAE;IACpBlL,KAAK,EAAE,CADa;IAEpBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,CAApBA;EAFY,CAvCN;EA8ChBoN,sBAAsB,EAAE;IACtB7K,KAAK,EAAE,CADe;IAEtBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,YAAjB,CAF0B,CAApBnE;EAFc,CA9CR;EAqDhB2N,qBAAqB,EAAE;IACrBpL,KAAK,EAAE,CADc;IAErBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,YAAjB,CAF0B,CAApBnE;EAFa,CArDP;EA4DhBwM,QAAQ,EAAE;IACRjK,KAAK,EAAE,CADC;IAERnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,OAAlBA,CAF0B,CAApBA;EAFA,CA5DM;EAmEhB4M,gBAAgB,EAAE;IAChBrK,KAAK,EAAE,CADS;IAEhBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,MAAjB,CAF0B,EAG1BA,WAAkB,MAAlB,CAH0B,EAI1BnE,YAAY,CAACe,IAAbf,CAAkB,OAAlBA,CAJ0B,EAK1BmE,UAAiB,WAAjB,CAL0B,CAApBnE;EAFQ,CAnEF;EA6EhBgN,cAAc,EAAE;IACdzK,KAAK,EAAE,EADO;IAEdnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,MAAjB,CAF0B,EAG1BA,WAAkB,MAAlB,CAH0B,EAI1BA,UAAiB,WAAjB,CAJ0B,CAApBnE;EAFM,CA7EA;EAsFhBqM,gBAAgB,EAAE;IAChB9J,KAAK,EAAE,EADS;IAEhBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,EAG1BmE,WAAkB,MAAlB,CAH0B,EAI1BA,UAAiB,WAAjB,CAJ0B,CAApBnE;EAFQ;AAtFF,CAAdtY;AAiGJ;AACA;AACA;;AACO,MAAMmmB,aAAN,CAAoB;EACzB;AACF;AACA;EACE3lB,WAAW,GAAG;EAEd;AACF;AACA;;EAKE;AACF;AACA;;;EACsB,OAAb8lB,aAAa,CAACtW,MAAD,EAAsD;IACxE,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACK,MAAxC;IACA,MAAM9Q,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5ByK,QAAQ,EAAElU,MAAM,CAACkU,QADW;MAE5BC,KAAK,EAAEnU,MAAM,CAACmU,KAFc;MAG5BzO,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;IAHS,CAAP,CAAvB;IAMA,OAAO,IAAImN,sBAAJ,CAA2B;MAChC/M,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEtG,MAAM,CAACqU,UAAhB;QAA4BpG,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CADI,EAEJ;QAAC5H,MAAM,EAAEtG,MAAM,CAACsU,gBAAhB;QAAkCrG,QAAQ,EAAE,IAA5C;QAAkDC,UAAU,EAAE;MAA9D,CAFI,CAD0B;MAKhCxI,SAAS,EAAE,KAAKA,SALgB;MAMhCpC;IANgC,CAA3B,CAAP;EAQD;EAED;AACF;AACA;;;EACiB,OAARiT,QAAQ,CACbvW,MADa,EAEW;IACxB,IAAIsD,IAAJ;IACA,IAAIlD,IAAJ;;IACA,IAAI,gBAAgBJ,MAApB,EAA4B;MAC1B,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACY,gBAAxC;MACArR,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QACtByK,QAAQ,EAAElU,MAAM,CAACkU,QADK;QAEtBzO,IAAI,EAAEzF,MAAM,CAACyF,IAFS;QAGtBC,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;MAHG,CAAP,CAAjBsD;MAKAlD,IAAI,GAAG,CACL;QAACkG,MAAM,EAAEtG,MAAM,CAACqU,UAAhB;QAA4BpG,QAAQ,EAAE,KAAtC;QAA6CC,UAAU,EAAE;MAAzD,CADK,EAEL;QAAC5H,MAAM,EAAEtG,MAAM,CAAC4U,UAAhB;QAA4B3G,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CAFK,EAGL;QAAC5H,MAAM,EAAEtG,MAAM,CAACyU,QAAhB;QAA0BxG,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAHK,CAAP9N;IAPF,OAYO;MACL,MAAMqJ,IAAI,GAAGsK,0BAA0B,CAACS,QAAxC;MACAlR,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QAACyK,QAAQ,EAAElU,MAAM,CAACkU;MAAlB,CAAP,CAAjB5Q;MACAlD,IAAI,GAAG,CACL;QAACkG,MAAM,EAAEtG,MAAM,CAACqU,UAAhB;QAA4BpG,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CADK,EAEL;QAAC5H,MAAM,EAAEtG,MAAM,CAACyU,QAAhB;QAA0BxG,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAFK,CAAP9N;IAID;;IAED,OAAO,IAAI+M,sBAAJ,CAA2B;MAChC/M,IADgC;MAEhCsF,SAAS,EAAE,KAAKA,SAFgB;MAGhCpC;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;;;EACe,OAANG,MAAM,CACXzD,MADW,EAEa;IACxB,IAAIsD,IAAJ;IACA,IAAIlD,IAAJ;;IACA,IAAI,gBAAgBJ,MAApB,EAA4B;MAC1B,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACuB,cAAxC;MACAhS,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QACtBwL,IAAI,EAAEnmB,QAAQ,CAACkR,MAAM,CAAC4U,UAAP5U,CAAkBlR,QAAlBkR,EAAD,CADQ;QAEtByF,IAAI,EAAEzF,MAAM,CAACyF,IAFS;QAGtBC,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;MAHG,CAAP,CAAjBsD;MAKAlD,IAAI,GAAG,CACL;QAACkG,MAAM,EAAEtG,MAAM,CAAC+U,aAAhB;QAA+B9G,QAAQ,EAAE,KAAzC;QAAgDC,UAAU,EAAE;MAA5D,CADK,EAEL;QAAC5H,MAAM,EAAEtG,MAAM,CAAC4U,UAAhB;QAA4B3G,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CAFK,CAAP9N;IAPF,OAWO;MACL,MAAMqJ,IAAI,GAAGsK,0BAA0B,CAACqB,MAAxC;MACA9R,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QACtB/D,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;MADG,CAAP,CAAjBsD;MAGAlD,IAAI,GAAG,CAAC;QAACkG,MAAM,EAAEtG,MAAM,CAAC+U,aAAhB;QAA+B9G,QAAQ,EAAE,IAAzC;QAA+CC,UAAU,EAAE;MAA3D,CAAD,CAAP9N;IACD;;IAED,OAAO,IAAI+M,sBAAJ,CAA2B;MAChC/M,IADgC;MAEhCsF,SAAS,EAAE,KAAKA,SAFgB;MAGhCpC;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;;;EAC8B,OAArBkT,qBAAqB,CAC1BxW,MAD0B,EAEF;IACxB,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACyB,cAAxC;IACA,MAAMlS,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5BwL,IAAI,EAAEnmB,QAAQ,CAACkR,MAAM,CAAC4U,UAAP5U,CAAkBlR,QAAlBkR,EAAD,CADc;MAE5ByF,IAAI,EAAEzF,MAAM,CAACyF,IAFe;MAG5ByO,QAAQ,EAAElU,MAAM,CAACkU,QAHW;MAI5BC,KAAK,EAAEnU,MAAM,CAACmU,KAJc;MAK5BzO,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;IALS,CAAP,CAAvB;IAOA,IAAII,IAAI,GAAG,CACT;MAACkG,MAAM,EAAEtG,MAAM,CAACqU,UAAhB;MAA4BpG,QAAQ,EAAE,IAAtC;MAA4CC,UAAU,EAAE;IAAxD,CADS,EAET;MAAC5H,MAAM,EAAEtG,MAAM,CAACsU,gBAAhB;MAAkCrG,QAAQ,EAAE,KAA5C;MAAmDC,UAAU,EAAE;IAA/D,CAFS,CAAX;;IAIA,IAAIlO,MAAM,CAAC4U,UAAP5U,IAAqBA,MAAM,CAACqU,UAAhC,EAA4C;MAC1CjU,IAAI,CAACvO,IAALuO,CAAU;QAACkG,MAAM,EAAEtG,MAAM,CAAC4U,UAAhB;QAA4B3G,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CAAV9N;IACD;;IAED,OAAO,IAAI+M,sBAAJ,CAA2B;MAChC/M,IADgC;MAEhCsF,SAAS,EAAE,KAAKA,SAFgB;MAGhCpC;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;;;EAC2B,OAAlBmT,kBAAkB,CACvBzW,MADuB,EAEV;IACb,MAAM0M,WAAW,GAAG,IAAIW,WAAJ,EAApB;;IACA,IAAI,gBAAgBrN,MAAhB,IAA0B,UAAUA,MAAxC,EAAgD;MAC9C0M,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACK,qBAAdL,CAAoC;QAClC9B,UAAU,EAAErU,MAAM,CAACqU,UADe;QAElCC,gBAAgB,EAAEtU,MAAM,CAAC2V,WAFS;QAGlCf,UAAU,EAAE5U,MAAM,CAAC4U,UAHe;QAIlCnP,IAAI,EAAEzF,MAAM,CAACyF,IAJqB;QAKlCyO,QAAQ,EAAElU,MAAM,CAACkU,QALiB;QAMlCC,KAAK,EAAEjB,oBAN2B;QAOlCxN,SAAS,EAAE,KAAKA;MAPkB,CAApCyQ,CADFzJ;IADF,OAYO;MACLA,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACG,aAAdH,CAA4B;QAC1B9B,UAAU,EAAErU,MAAM,CAACqU,UADO;QAE1BC,gBAAgB,EAAEtU,MAAM,CAAC2V,WAFC;QAG1BzB,QAAQ,EAAElU,MAAM,CAACkU,QAHS;QAI1BC,KAAK,EAAEjB,oBAJmB;QAK1BxN,SAAS,EAAE,KAAKA;MALU,CAA5ByQ,CADFzJ;IASD;;IAED,MAAMgK,UAAU,GAAG;MACjBf,WAAW,EAAE3V,MAAM,CAAC2V,WADH;MAEjBvC,gBAAgB,EAAEpT,MAAM,CAACoT;IAFR,CAAnB;IAKA1G,WAAW,CAACgB,GAAZhB,CAAgB,KAAKiK,eAAL,CAAqBD,UAArB,CAAhBhK;IACA,OAAOA,WAAP;EACD;EAED;AACF;AACA;;;EACwB,OAAfiK,eAAe,CACpB3W,MADoB,EAEI;IACxB,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAAC2B,sBAAxC;IACA,MAAMpS,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5BN,UAAU,EAAEra,QAAQ,CAACkR,MAAM,CAACoT,gBAAPpT,CAAwBlR,QAAxBkR,EAAD;IADQ,CAAP,CAAvB;IAGA,MAAM4W,eAAe,GAAG;MACtBxW,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEtG,MAAM,CAAC2V,WAAhB;QAA6B1H,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CADI,EAEJ;QACE5H,MAAM,EAAEgL,gCADV;QAEErD,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CAFI,EAOJ;QAAC5H,MAAM,EAAEiL,kBAAT;QAA6BtD,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CAPI,CADgB;MAUtBxI,SAAS,EAAE,KAAKA,SAVM;MAWtBpC;IAXsB,CAAxB;IAaA,OAAO,IAAI6J,sBAAJ,CAA2ByJ,eAA3B,CAAP;EACD;EAED;AACF;AACA;;;EACqB,OAAZC,YAAY,CAAC7W,MAAD,EAAqD;IACtE,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAAC8B,mBAAxC;IACA,MAAMvS,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,CAAvB;IACA,MAAMmN,eAAe,GAAG;MACtBxW,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEtG,MAAM,CAAC2V,WAAhB;QAA6B1H,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CADI,EAEJ;QACE5H,MAAM,EAAEgL,gCADV;QAEErD,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CAFI,EAOJ;QAAC5H,MAAM,EAAEtG,MAAM,CAACoT,gBAAhB;QAAkCnF,QAAQ,EAAE,IAA5C;QAAkDC,UAAU,EAAE;MAA9D,CAPI,CADgB;MAUtBxI,SAAS,EAAE,KAAKA,SAVM;MAWtBpC;IAXsB,CAAxB;IAaA,OAAO,IAAI6J,sBAAJ,CAA2ByJ,eAA3B,CAAP;EACD;EAED;AACF;AACA;;;EACsB,OAAbE,aAAa,CAAC9W,MAAD,EAAsD;IACxE,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACgC,oBAAxC;IACA,MAAMzS,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAACyK,QAAQ,EAAElU,MAAM,CAACkU;IAAlB,CAAP,CAAvB;IAEA,OAAO,IAAI/G,sBAAJ,CAA2B;MAChC/M,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEtG,MAAM,CAAC2V,WAAhB;QAA6B1H,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CADI,EAEJ;QAAC5H,MAAM,EAAEtG,MAAM,CAACyU,QAAhB;QAA0BxG,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAFI,EAGJ;QACE5H,MAAM,EAAEgL,gCADV;QAEErD,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CAHI,EAQJ;QACE5H,MAAM,EAAEiL,kBADV;QAEEtD,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CARI,EAaJ;QAAC5H,MAAM,EAAEtG,MAAM,CAACoT,gBAAhB;QAAkCnF,QAAQ,EAAE,IAA5C;QAAkDC,UAAU,EAAE;MAA9D,CAbI,CAD0B;MAgBhCxI,SAAS,EAAE,KAAKA,SAhBgB;MAiBhCpC;IAjBgC,CAA3B,CAAP;EAmBD;EAED;AACF;AACA;AACA;;;EACuB,OAAdyT,cAAc,CAAC/W,MAAD,EAAuD;IAC1E,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACkC,qBAAxC;IACA,MAAM3S,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5BN,UAAU,EAAEra,QAAQ,CAACkR,MAAM,CAACkW,mBAAPlW,CAA2BlR,QAA3BkR,EAAD;IADQ,CAAP,CAAvB;IAIA,OAAO,IAAImN,sBAAJ,CAA2B;MAChC/M,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEtG,MAAM,CAAC2V,WAAhB;QAA6B1H,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CADI,EAEJ;QAAC5H,MAAM,EAAEtG,MAAM,CAACoT,gBAAhB;QAAkCnF,QAAQ,EAAE,IAA5C;QAAkDC,UAAU,EAAE;MAA9D,CAFI,CAD0B;MAKhCxI,SAAS,EAAE,KAAKA,SALgB;MAMhCpC;IANgC,CAA3B,CAAP;EAQD;EAED;AACF;AACA;;;EACiB,OAAR0T,QAAQ,CACbhX,MADa,EAEW;IACxB,IAAIsD,IAAJ;IACA,IAAIlD,IAAJ;;IACA,IAAI,gBAAgBJ,MAApB,EAA4B;MAC1B,MAAMyJ,IAAI,GAAGsK,0BAA0B,CAACmB,gBAAxC;MACA5R,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QACtBwL,IAAI,EAAEnmB,QAAQ,CAACkR,MAAM,CAAC4U,UAAP5U,CAAkBlR,QAAlBkR,EAAD,CADQ;QAEtByF,IAAI,EAAEzF,MAAM,CAACyF,IAFS;QAGtB0O,KAAK,EAAEnU,MAAM,CAACmU,KAHQ;QAItBzO,SAAS,EAAE5W,QAAQ,CAACkR,MAAM,CAAC0F,SAAP1F,CAAiBlR,QAAjBkR,EAAD;MAJG,CAAP,CAAjBsD;MAMAlD,IAAI,GAAG,CACL;QAACkG,MAAM,EAAEtG,MAAM,CAAC+U,aAAhB;QAA+B9G,QAAQ,EAAE,KAAzC;QAAgDC,UAAU,EAAE;MAA5D,CADK,EAEL;QAAC5H,MAAM,EAAEtG,MAAM,CAAC4U,UAAhB;QAA4B3G,QAAQ,EAAE,IAAtC;QAA4CC,UAAU,EAAE;MAAxD,CAFK,CAAP9N;IARF,OAYO;MACL,MAAMqJ,IAAI,GAAGsK,0BAA0B,CAACe,QAAxC;MACAxR,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;QACtB0K,KAAK,EAAEnU,MAAM,CAACmU;MADQ,CAAP,CAAjB7Q;MAGAlD,IAAI,GAAG,CAAC;QAACkG,MAAM,EAAEtG,MAAM,CAAC+U,aAAhB;QAA+B9G,QAAQ,EAAE,IAAzC;QAA+CC,UAAU,EAAE;MAA3D,CAAD,CAAP9N;IACD;;IAED,OAAO,IAAI+M,sBAAJ,CAA2B;MAChC/M,IADgC;MAEhCsF,SAAS,EAAE,KAAKA,SAFgB;MAGhCpC;IAHgC,CAA3B,CAAP;EAKD;;AA/SwB;;AAAd6S,cASJzQ,SATIyQ,GASmB,IAAI1R,SAAJ,CAC5B,kCAD4B,CATnB0R,C,CCjnBb;AACA;AACA;AACA;;AACA,MAAMc,UAAU,GAAG7K,gBAAgB,GAAG,GAAtC;AAEA;AACA;AACA;;AACO,MAAM8K,MAAN,CAAa;EAClB;AACF;AACA;EACE1mB,WAAW,GAAG;EAEd;AACF;AACA;;EAGE;AACF;AACA;AACA;AACA;AACA;;;EAC4B,OAAnB2mB,mBAAmB,CAAClL,UAAD,EAA6B;IACrD,OACE;IACCmL,IAAI,CAACC,IAALD,CAAUnL,UAAU,GAAGiL,MAAM,CAACI,SAA9BF,IACC,CADDA;IAEC,CAHF,CADF;IAAA;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,aAAJG,IAAI,CACf1F,UADe,EAEf2F,KAFe,EAGfC,OAHe,EAIf/R,SAJe,EAKfpC,IALe,EAMG;IAClB;MACE,MAAMoU,aAAa,GAAG,MAAM7F,UAAU,CAAC8F,iCAAX9F,CAC1BvO,IAAI,CAACnS,MADqB0gB,CAA5B,CADF;;MAME,MAAM+F,WAAW,GAAG,MAAM/F,UAAU,CAACgG,cAAXhG,CACxB4F,OAAO,CAAC3S,SADgB+M,EAExB,WAFwBA,CAA1B;MAKA,IAAInF,WAA+B,GAAG,IAAtC;;MACA,IAAIkL,WAAW,KAAK,IAApB,EAA0B;QACxB,IAAIA,WAAW,CAACE,UAAhB,EAA4B;UAC1BxY,OAAO,CAACzB,KAARyB,CAAc,oDAAdA;UACA,OAAO,KAAP;QACD;;QAED,IAAIsY,WAAW,CAACtU,IAAZsU,CAAiBzmB,MAAjBymB,KAA4BtU,IAAI,CAACnS,MAArC,EAA6C;UAC3Cub,WAAW,GAAGA,WAAW,IAAI,IAAIW,WAAJ,EAA7BX;UACAA,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACa,QAAdb,CAAuB;YACrBpB,aAAa,EAAE0C,OAAO,CAAC3S,SADF;YAErBqP,KAAK,EAAE7Q,IAAI,CAACnS;UAFS,CAAvBglB,CADFzJ;QAMD;;QAED,IAAI,CAACkL,WAAW,CAACG,KAAZH,CAAkB/S,MAAlB+S,CAAyBlS,SAAzBkS,CAAL,EAA0C;UACxClL,WAAW,GAAGA,WAAW,IAAI,IAAIW,WAAJ,EAA7BX;UACAA,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAAC1S,MAAd0S,CAAqB;YACnBpB,aAAa,EAAE0C,OAAO,CAAC3S,SADJ;YAEnBY;UAFmB,CAArByQ,CADFzJ;QAMD;;QAED,IAAIkL,WAAW,CAAC1D,QAAZ0D,GAAuBF,aAA3B,EAA0C;UACxChL,WAAW,GAAGA,WAAW,IAAI,IAAIW,WAAJ,EAA7BX;UACAA,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACI,QAAdJ,CAAuB;YACrB9B,UAAU,EAAEmD,KAAK,CAAC1S,SADG;YAErB2P,QAAQ,EAAEgD,OAAO,CAAC3S,SAFG;YAGrBoP,QAAQ,EAAEwD,aAAa,GAAGE,WAAW,CAAC1D;UAHjB,CAAvBiC,CADFzJ;QAOD;MAnCH,OAoCO;QACLA,WAAW,GAAG,IAAIW,WAAJ,GAAkBK,GAAlB,CACZyI,aAAa,CAACG,aAAdH,CAA4B;UAC1B9B,UAAU,EAAEmD,KAAK,CAAC1S,SADQ;UAE1BwP,gBAAgB,EAAEmD,OAAO,CAAC3S,SAFA;UAG1BoP,QAAQ,EAAEwD,aAAa,GAAG,CAAhBA,GAAoBA,aAApBA,GAAoC,CAHpB;UAI1BvD,KAAK,EAAE7Q,IAAI,CAACnS,MAJc;UAK1BuU;QAL0B,CAA5ByQ,CADY,CAAdzJ;MAjDJ;MA6DE;;;MACA,IAAIA,WAAW,KAAK,IAApB,EAA0B;QACxB,MAAMkF,yBAAyB,CAC7BC,UAD6B,EAE7BnF,WAF6B,EAG7B,CAAC8K,KAAD,EAAQC,OAAR,CAH6B,EAI7B;UACExF,UAAU,EAAE;QADd,CAJ6B,CAA/B;MAQD;IACF;IAED,MAAM+F,UAAU,GAAG1P,YAAY,CAACI,MAAbJ,CAAoB,CACrCA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADqC,EAErCA,YAAY,CAACK,GAAbL,CAAiB,QAAjBA,CAFqC,EAGrCA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAHqC,EAIrCA,YAAY,CAACK,GAAbL,CAAiB,oBAAjBA,CAJqC,EAKrCA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACiB,EAAbjB,CAAgB,MAAhBA,CADFA,EAEEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CAFFA,EAGE,OAHFA,CALqC,CAApBA,CAAnB;IAYA,MAAMgP,SAAS,GAAGJ,MAAM,CAACI,SAAzB;IACA,IAAI1O,MAAM,GAAG,CAAb;IACA,IAAIpG,KAAK,GAAGc,IAAZ;IACA,IAAI2U,YAAY,GAAG,EAAnB;;IACA,OAAOzV,KAAK,CAACrR,MAANqR,GAAe,CAAtB,EAAyB;MACvB,MAAMnM,KAAK,GAAGmM,KAAK,CAAChR,KAANgR,CAAY,CAAZA,EAAe8U,SAAf9U,CAAd;MACA,MAAMc,IAAI,GAAGtU,MAAM,CAACqW,KAAPrW,CAAasoB,SAAS,GAAG,EAAzBtoB,CAAb;MACAgpB,UAAU,CAACtU,MAAXsU,CACE;QACEpM,WAAW,EAAE,CADf;QACkB;QAChBhD,MAFF;QAGEvS;MAHF,CADF2hB,EAME1U,IANF0U;MASA,MAAMtL,WAAW,GAAG,IAAIW,WAAJ,GAAkBK,GAAlB,CAAsB;QACxCtN,IAAI,EAAE,CAAC;UAACkG,MAAM,EAAEmR,OAAO,CAAC3S,SAAjB;UAA4BmJ,QAAQ,EAAE,IAAtC;UAA4CC,UAAU,EAAE;QAAxD,CAAD,CADkC;QAExCxI,SAFwC;QAGxCpC;MAHwC,CAAtB,CAApB;MAKA2U,YAAY,CAACpmB,IAAbomB,CACErG,yBAAyB,CAACC,UAAD,EAAanF,WAAb,EAA0B,CAAC8K,KAAD,EAAQC,OAAR,CAA1B,EAA4C;QACnExF,UAAU,EAAE;MADuD,CAA5C,CAD3BgG,EAjBuB;;MAwBvB,IAAIpG,UAAU,CAACqG,YAAXrG,CAAwB7D,QAAxB6D,CAAiC,YAAjCA,CAAJ,EAAoD;QAClD,MAAMsG,mBAAmB,GAAG,CAA5B;QACA,MAAM7F,KAAK,CAAC,OAAO6F,mBAAR,CAAX;MACD;;MAEDvP,MAAM,IAAI0O,SAAV1O;MACApG,KAAK,GAAGA,KAAK,CAAChR,KAANgR,CAAY8U,SAAZ9U,CAARA;IACD;;IACD,MAAMgQ,OAAO,CAAC4F,GAAR5F,CAAYyF,YAAZzF,CAAN,CA3HkB;;IA8HlB;MACE,MAAMwF,UAAU,GAAG1P,YAAY,CAACI,MAAbJ,CAAoB,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAApBA,CAAnB;MAEA,MAAMhF,IAAI,GAAGtU,MAAM,CAACqW,KAAPrW,CAAagpB,UAAU,CAAC9O,IAAxBla,CAAb;MACAgpB,UAAU,CAACtU,MAAXsU,CACE;QACEpM,WAAW,EAAE,CADf;;MAAA,CADFoM,EAIE1U,IAJF0U;MAOA,MAAMtL,WAAW,GAAG,IAAIW,WAAJ,GAAkBK,GAAlB,CAAsB;QACxCtN,IAAI,EAAE,CACJ;UAACkG,MAAM,EAAEmR,OAAO,CAAC3S,SAAjB;UAA4BmJ,QAAQ,EAAE,IAAtC;UAA4CC,UAAU,EAAE;QAAxD,CADI,EAEJ;UAAC5H,MAAM,EAAEiL,kBAAT;UAA6BtD,QAAQ,EAAE,KAAvC;UAA8CC,UAAU,EAAE;QAA1D,CAFI,CADkC;QAKxCxI,SALwC;QAMxCpC;MANwC,CAAtB,CAApB;MAQA,MAAMsO,yBAAyB,CAC7BC,UAD6B,EAE7BnF,WAF6B,EAG7B,CAAC8K,KAAD,EAAQC,OAAR,CAH6B,EAI7B;QACExF,UAAU,EAAE;MADd,CAJ6B,CAA/B;IAjJgB;;IA4JlB,OAAO,IAAP;EACD;;AAvMiB;;AAAPiF,OASJI,SATIJ,GASgBD,UAThBC;MCfAmB,qBAAqB,GAAG,IAAI5T,SAAJ,CACnC,6CADmC;AAIrC;AACA;AACA;;AACO,MAAM6T,SAAN,CAAgB;EACrB;AACF;AACA;AACA;AACA;AACA;EAC4B,OAAnBnB,mBAAmB,CAAClL,UAAD,EAA6B;IACrD,OAAOiL,MAAM,CAACC,mBAAPD,CAA2BjL,UAA3BiL,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACa,OAAJK,IAAI,CACT1F,UADS,EAET2F,KAFS,EAGTC,OAHS,EAITc,GAJS,EAKTC,eALS,EAMS;IAClB,OAAOtB,MAAM,CAACK,IAAPL,CAAYrF,UAAZqF,EAAwBM,KAAxBN,EAA+BO,OAA/BP,EAAwCsB,eAAxCtB,EAAyDqB,GAAzDrB,CAAP;EACD;;AA7BoB;;;;;;;ECdvB,IAAIuB,MAAM,GAAG,OAAOC,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GAAqCC,cAAlD;;EACA,IAAIC,QAAQ,GAAI,YAAY;IAC5B,SAASC,CAAT,GAAa;MACb,KAAKC,KAAL,GAAa,KAAb;MACA,KAAKC,YAAL,GAAoBN,MAAM,CAACM,YAA3B;IACC;;IACDF,CAAC,CAACtoB,SAAF,GAAckoB,MAAd;IACA,OAAO,IAAII,CAAJ,EAAP;EACC,CAPc,EAAf;;EAQA,CAAC,UAASH,IAAT,EAAe;KAEE,UAAU7b,OAAV,EAAmB;MAEnC,IAAImc,OAAO,GAAG;QACZC,YAAY,EAAE,qBAAqBP,IADvB;QAEZQ,QAAQ,EAAE,YAAYR,IAAZ,IAAoB,cAAcS,MAFhC;QAGZ5Q,IAAI,EACF,gBAAgBmQ,IAAhB,IACA,UAAUA,IADV,IAEC,YAAW;UACV,IAAI;YACF,IAAIU,IAAJ;YACA,OAAO,IAAP;UACD,CAHD,CAGE,OAAO5lB,CAAP,EAAU;YACV,OAAO,KAAP;UACD;QACF,CAPD,EANU;QAcZ6lB,QAAQ,EAAE,cAAcX,IAdZ;QAeZY,WAAW,EAAE,iBAAiBZ;MAflB,CAAd;;MAkBA,SAASa,UAAT,CAAoBC,GAApB,EAAyB;QACvB,OAAOA,GAAG,IAAIC,QAAQ,CAAClpB,SAAT,CAAmBmpB,aAAnB,CAAiCF,GAAjC,CAAd;MACD;;MAED,IAAIR,OAAO,CAACM,WAAZ,EAAyB;QACvB,IAAIK,WAAW,GAAG,CAChB,oBADgB,EAEhB,qBAFgB,EAGhB,4BAHgB,EAIhB,qBAJgB,EAKhB,sBALgB,EAMhB,qBANgB,EAOhB,sBAPgB,EAQhB,uBARgB,EAShB,uBATgB,CAAlB;;QAYA,IAAIC,iBAAiB,GACnBC,WAAW,CAACC,MAAZ,IACA,UAASN,GAAT,EAAc;UACZ,OAAOA,GAAG,IAAIG,WAAW,CAAC1K,OAAZ,CAAoBjf,MAAM,CAACO,SAAP,CAAiB0B,QAAjB,CAA0BuF,IAA1B,CAA+BgiB,GAA/B,CAApB,IAA2D,CAAC,CAA1E;QACD,CAJH;MAKD;;MAED,SAASO,aAAT,CAAuBrZ,IAAvB,EAA6B;QAC3B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;UAC5BA,IAAI,GAAGnC,MAAM,CAACmC,IAAD,CAAb;QACD;;QACD,IAAI,4BAA4BsZ,IAA5B,CAAiCtZ,IAAjC,CAAJ,EAA4C;UAC1C,MAAM,IAAImF,SAAJ,CAAc,wCAAd,CAAN;QACD;;QACD,OAAOnF,IAAI,CAACtB,WAAL,EAAP;MACD;;MAED,SAAS6a,cAAT,CAAwBxpB,KAAxB,EAA+B;QAC7B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;UAC7BA,KAAK,GAAG8N,MAAM,CAAC9N,KAAD,CAAd;QACD;;QACD,OAAOA,KAAP;MACD,CA3DkC,CA6DrC;;;MACE,SAASypB,WAAT,CAAqBvM,KAArB,EAA4B;QAC1B,IAAIwM,QAAQ,GAAG;UACbC,IAAI,EAAE,YAAW;YACf,IAAI3pB,KAAK,GAAGkd,KAAK,CAAC5D,KAAN,EAAZ;YACA,OAAO;cAACsQ,IAAI,EAAE5pB,KAAK,KAAK+T,SAAjB;cAA4B/T,KAAK,EAAEA;YAAnC,CAAP;UACD;QAJY,CAAf;;QAOA,IAAIuoB,OAAO,CAACE,QAAZ,EAAsB;UACpBiB,QAAQ,CAAChB,MAAM,CAACgB,QAAR,CAAR,GAA4B,YAAW;YACrC,OAAOA,QAAP;UACD,CAFD;QAGD;;QAED,OAAOA,QAAP;MACD;;MAED,SAASG,OAAT,CAAiBC,OAAjB,EAA0B;QACxB,KAAKpW,GAAL,GAAW,EAAX;;QAEA,IAAIoW,OAAO,YAAYD,OAAvB,EAAgC;UAC9BC,OAAO,CAACpc,OAAR,CAAgB,UAAS1N,KAAT,EAAgBiQ,IAAhB,EAAsB;YACpC,KAAK8Z,MAAL,CAAY9Z,IAAZ,EAAkBjQ,KAAlB;UACD,CAFD,EAEG,IAFH;QAGD,CAJD,MAIO,IAAIa,KAAK,CAACC,OAAN,CAAcgpB,OAAd,CAAJ,EAA4B;UACjCA,OAAO,CAACpc,OAAR,CAAgB,UAASiM,MAAT,EAAiB;YAC/B,KAAKoQ,MAAL,CAAYpQ,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B;UACD,CAFD,EAEG,IAFH;QAGD,CAJM,MAIA,IAAImQ,OAAJ,EAAa;UAClBvqB,MAAM,CAACyqB,mBAAP,CAA2BF,OAA3B,EAAoCpc,OAApC,CAA4C,UAASuC,IAAT,EAAe;YACzD,KAAK8Z,MAAL,CAAY9Z,IAAZ,EAAkB6Z,OAAO,CAAC7Z,IAAD,CAAzB;UACD,CAFD,EAEG,IAFH;QAGD;MACF;;MAED4Z,OAAO,CAAC/pB,SAAR,CAAkBiqB,MAAlB,GAA2B,UAAS9Z,IAAT,EAAejQ,KAAf,EAAsB;QAC/CiQ,IAAI,GAAGqZ,aAAa,CAACrZ,IAAD,CAApB;QACAjQ,KAAK,GAAGwpB,cAAc,CAACxpB,KAAD,CAAtB;QACA,IAAIiqB,QAAQ,GAAG,KAAKvW,GAAL,CAASzD,IAAT,CAAf;QACA,KAAKyD,GAAL,CAASzD,IAAT,IAAiBga,QAAQ,GAAGA,QAAQ,GAAG,IAAX,GAAkBjqB,KAArB,GAA6BA,KAAtD;MACD,CALD;;MAOA6pB,OAAO,CAAC/pB,SAAR,CAAkB,QAAlB,IAA8B,UAASmQ,IAAT,EAAe;QAC3C,OAAO,KAAKyD,GAAL,CAAS4V,aAAa,CAACrZ,IAAD,CAAtB,CAAP;MACD,CAFD;;MAIA4Z,OAAO,CAAC/pB,SAAR,CAAkBoqB,GAAlB,GAAwB,UAASja,IAAT,EAAe;QACrCA,IAAI,GAAGqZ,aAAa,CAACrZ,IAAD,CAApB;QACA,OAAO,KAAKyK,GAAL,CAASzK,IAAT,IAAiB,KAAKyD,GAAL,CAASzD,IAAT,CAAjB,GAAkC,IAAzC;MACD,CAHD;;MAKA4Z,OAAO,CAAC/pB,SAAR,CAAkB4a,GAAlB,GAAwB,UAASzK,IAAT,EAAe;QACrC,OAAO,KAAKyD,GAAL,CAASyW,cAAT,CAAwBb,aAAa,CAACrZ,IAAD,CAArC,CAAP;MACD,CAFD;;MAIA4Z,OAAO,CAAC/pB,SAAR,CAAkBiW,GAAlB,GAAwB,UAAS9F,IAAT,EAAejQ,KAAf,EAAsB;QAC5C,KAAK0T,GAAL,CAAS4V,aAAa,CAACrZ,IAAD,CAAtB,IAAgCuZ,cAAc,CAACxpB,KAAD,CAA9C;MACD,CAFD;;MAIA6pB,OAAO,CAAC/pB,SAAR,CAAkB4N,OAAlB,GAA4B,UAAS0c,QAAT,EAAmBC,OAAnB,EAA4B;QACtD,KAAK,IAAIpa,IAAT,IAAiB,KAAKyD,GAAtB,EAA2B;UACzB,IAAI,KAAKA,GAAL,CAASyW,cAAT,CAAwBla,IAAxB,CAAJ,EAAmC;YACjCma,QAAQ,CAACrjB,IAAT,CAAcsjB,OAAd,EAAuB,KAAK3W,GAAL,CAASzD,IAAT,CAAvB,EAAuCA,IAAvC,EAA6C,IAA7C;UACD;QACF;MACF,CAND;;MAQA4Z,OAAO,CAAC/pB,SAAR,CAAkB6P,IAAlB,GAAyB,YAAW;QAClC,IAAIuN,KAAK,GAAG,EAAZ;QACA,KAAKxP,OAAL,CAAa,UAAS1N,KAAT,EAAgBiQ,IAAhB,EAAsB;UACjCiN,KAAK,CAAC9b,IAAN,CAAW6O,IAAX;QACD,CAFD;QAGA,OAAOwZ,WAAW,CAACvM,KAAD,CAAlB;MACD,CAND;;MAQA2M,OAAO,CAAC/pB,SAAR,CAAkB8a,MAAlB,GAA2B,YAAW;QACpC,IAAIsC,KAAK,GAAG,EAAZ;QACA,KAAKxP,OAAL,CAAa,UAAS1N,KAAT,EAAgB;UAC3Bkd,KAAK,CAAC9b,IAAN,CAAWpB,KAAX;QACD,CAFD;QAGA,OAAOypB,WAAW,CAACvM,KAAD,CAAlB;MACD,CAND;;MAQA2M,OAAO,CAAC/pB,SAAR,CAAkBujB,OAAlB,GAA4B,YAAW;QACrC,IAAInG,KAAK,GAAG,EAAZ;QACA,KAAKxP,OAAL,CAAa,UAAS1N,KAAT,EAAgBiQ,IAAhB,EAAsB;UACjCiN,KAAK,CAAC9b,IAAN,CAAW,CAAC6O,IAAD,EAAOjQ,KAAP,CAAX;QACD,CAFD;QAGA,OAAOypB,WAAW,CAACvM,KAAD,CAAlB;MACD,CAND;;MAQA,IAAIqL,OAAO,CAACE,QAAZ,EAAsB;QACpBoB,OAAO,CAAC/pB,SAAR,CAAkB4oB,MAAM,CAACgB,QAAzB,IAAqCG,OAAO,CAAC/pB,SAAR,CAAkBujB,OAAvD;MACD;;MAED,SAASiH,QAAT,CAAkBC,IAAlB,EAAwB;QACtB,IAAIA,IAAI,CAACC,QAAT,EAAmB;UACjB,OAAOzI,OAAO,CAAC0I,MAAR,CAAe,IAAIrV,SAAJ,CAAc,cAAd,CAAf,CAAP;QACD;;QACDmV,IAAI,CAACC,QAAL,GAAgB,IAAhB;MACD;;MAED,SAASE,eAAT,CAAyBC,MAAzB,EAAiC;QAC/B,OAAO,IAAI5I,OAAJ,CAAY,UAASC,OAAT,EAAkByI,MAAlB,EAA0B;UAC3CE,MAAM,CAACC,MAAP,GAAgB,YAAW;YACzB5I,OAAO,CAAC2I,MAAM,CAACrY,MAAR,CAAP;UACD,CAFD;;UAGAqY,MAAM,CAACE,OAAP,GAAiB,YAAW;YAC1BJ,MAAM,CAACE,MAAM,CAACvd,KAAR,CAAN;UACD,CAFD;QAGD,CAPM,CAAP;MAQD;;MAED,SAAS0d,qBAAT,CAA+BhT,IAA/B,EAAqC;QACnC,IAAI6S,MAAM,GAAG,IAAII,UAAJ,EAAb;QACA,IAAIC,OAAO,GAAGN,eAAe,CAACC,MAAD,CAA7B;QACAA,MAAM,CAACM,iBAAP,CAAyBnT,IAAzB;QACA,OAAOkT,OAAP;MACD;;MAED,SAASE,cAAT,CAAwBpT,IAAxB,EAA8B;QAC5B,IAAI6S,MAAM,GAAG,IAAII,UAAJ,EAAb;QACA,IAAIC,OAAO,GAAGN,eAAe,CAACC,MAAD,CAA7B;QACAA,MAAM,CAACQ,UAAP,CAAkBrT,IAAlB;QACA,OAAOkT,OAAP;MACD;;MAED,SAASI,qBAAT,CAA+BnoB,GAA/B,EAAoC;QAClC,IAAIooB,IAAI,GAAG,IAAI5sB,UAAJ,CAAewE,GAAf,CAAX;QACA,IAAIuV,KAAK,GAAG,IAAI3X,KAAJ,CAAUwqB,IAAI,CAAC3qB,MAAf,CAAZ;;QAEA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6qB,IAAI,CAAC3qB,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;UACpCgY,KAAK,CAAChY,CAAD,CAAL,GAAWsN,MAAM,CAACC,YAAP,CAAoBsd,IAAI,CAAC7qB,CAAD,CAAxB,CAAX;QACD;;QACD,OAAOgY,KAAK,CAAC3K,IAAN,CAAW,EAAX,CAAP;MACD;;MAED,SAASyd,WAAT,CAAqBroB,GAArB,EAA0B;QACxB,IAAIA,GAAG,CAAClC,KAAR,EAAe;UACb,OAAOkC,GAAG,CAAClC,KAAJ,CAAU,CAAV,CAAP;QACD,CAFD,MAEO;UACL,IAAIsqB,IAAI,GAAG,IAAI5sB,UAAJ,CAAewE,GAAG,CAACpE,UAAnB,CAAX;UACAwsB,IAAI,CAACtV,GAAL,CAAS,IAAItX,UAAJ,CAAewE,GAAf,CAAT;UACA,OAAOooB,IAAI,CAAC1sB,MAAZ;QACD;MACF;;MAED,SAAS4sB,IAAT,GAAgB;QACd,KAAKf,QAAL,GAAgB,KAAhB;;QAEA,KAAKgB,SAAL,GAAiB,UAASjB,IAAT,EAAe;UAC9B,KAAKkB,SAAL,GAAiBlB,IAAjB;;UACA,IAAI,CAACA,IAAL,EAAW;YACT,KAAKmB,SAAL,GAAiB,EAAjB;UACD,CAFD,MAEO,IAAI,OAAOnB,IAAP,KAAgB,QAApB,EAA8B;YACnC,KAAKmB,SAAL,GAAiBnB,IAAjB;UACD,CAFM,MAEA,IAAIhC,OAAO,CAACzQ,IAAR,IAAgB6Q,IAAI,CAAC7oB,SAAL,CAAempB,aAAf,CAA6BsB,IAA7B,CAApB,EAAwD;YAC7D,KAAKoB,SAAL,GAAiBpB,IAAjB;UACD,CAFM,MAEA,IAAIhC,OAAO,CAACK,QAAR,IAAoBgD,QAAQ,CAAC9rB,SAAT,CAAmBmpB,aAAnB,CAAiCsB,IAAjC,CAAxB,EAAgE;YACrE,KAAKsB,aAAL,GAAqBtB,IAArB;UACD,CAFM,MAEA,IAAIhC,OAAO,CAACC,YAAR,IAAwBsD,eAAe,CAAChsB,SAAhB,CAA0BmpB,aAA1B,CAAwCsB,IAAxC,CAA5B,EAA2E;YAChF,KAAKmB,SAAL,GAAiBnB,IAAI,CAAC/oB,QAAL,EAAjB;UACD,CAFM,MAEA,IAAI+mB,OAAO,CAACM,WAAR,IAAuBN,OAAO,CAACzQ,IAA/B,IAAuCgR,UAAU,CAACyB,IAAD,CAArD,EAA6D;YAClE,KAAKwB,gBAAL,GAAwBT,WAAW,CAACf,IAAI,CAAC5rB,MAAN,CAAnC,CADkE,CAE1E;;YACQ,KAAK8sB,SAAL,GAAiB,IAAI9C,IAAJ,CAAS,CAAC,KAAKoD,gBAAN,CAAT,CAAjB;UACD,CAJM,MAIA,IAAIxD,OAAO,CAACM,WAAR,KAAwBO,WAAW,CAACtpB,SAAZ,CAAsBmpB,aAAtB,CAAoCsB,IAApC,KAA6CpB,iBAAiB,CAACoB,IAAD,CAAtF,CAAJ,EAAmG;YACxG,KAAKwB,gBAAL,GAAwBT,WAAW,CAACf,IAAD,CAAnC;UACD,CAFM,MAEA;YACL,KAAKmB,SAAL,GAAiBnB,IAAI,GAAGhrB,MAAM,CAACO,SAAP,CAAiB0B,QAAjB,CAA0BuF,IAA1B,CAA+BwjB,IAA/B,CAAxB;UACD;;UAED,IAAI,CAAC,KAAKT,OAAL,CAAaI,GAAb,CAAiB,cAAjB,CAAL,EAAuC;YACrC,IAAI,OAAOK,IAAP,KAAgB,QAApB,EAA8B;cAC5B,KAAKT,OAAL,CAAa/T,GAAb,CAAiB,cAAjB,EAAiC,0BAAjC;YACD,CAFD,MAEO,IAAI,KAAK4V,SAAL,IAAkB,KAAKA,SAAL,CAAe3S,IAArC,EAA2C;cAChD,KAAK8Q,OAAL,CAAa/T,GAAb,CAAiB,cAAjB,EAAiC,KAAK4V,SAAL,CAAe3S,IAAhD;YACD,CAFM,MAEA,IAAIuP,OAAO,CAACC,YAAR,IAAwBsD,eAAe,CAAChsB,SAAhB,CAA0BmpB,aAA1B,CAAwCsB,IAAxC,CAA5B,EAA2E;cAChF,KAAKT,OAAL,CAAa/T,GAAb,CAAiB,cAAjB,EAAiC,iDAAjC;YACD;UACF;QACF,CA/BD;;QAiCA,IAAIwS,OAAO,CAACzQ,IAAZ,EAAkB;UAChB,KAAKA,IAAL,GAAY,YAAW;YACrB,IAAIkU,QAAQ,GAAG1B,QAAQ,CAAC,IAAD,CAAvB;;YACA,IAAI0B,QAAJ,EAAc;cACZ,OAAOA,QAAP;YACD;;YAED,IAAI,KAAKL,SAAT,EAAoB;cAClB,OAAO5J,OAAO,CAACC,OAAR,CAAgB,KAAK2J,SAArB,CAAP;YACD,CAFD,MAEO,IAAI,KAAKI,gBAAT,EAA2B;cAChC,OAAOhK,OAAO,CAACC,OAAR,CAAgB,IAAI2G,IAAJ,CAAS,CAAC,KAAKoD,gBAAN,CAAT,CAAhB,CAAP;YACD,CAFM,MAEA,IAAI,KAAKF,aAAT,EAAwB;cAC7B,MAAM,IAAI3sB,KAAJ,CAAU,sCAAV,CAAN;YACD,CAFM,MAEA;cACL,OAAO6iB,OAAO,CAACC,OAAR,CAAgB,IAAI2G,IAAJ,CAAS,CAAC,KAAK+C,SAAN,CAAT,CAAhB,CAAP;YACD;UACF,CAfD;;UAiBA,KAAK7C,WAAL,GAAmB,YAAW;YAC5B,IAAI,KAAKkD,gBAAT,EAA2B;cACzB,OAAOzB,QAAQ,CAAC,IAAD,CAAR,IAAkBvI,OAAO,CAACC,OAAR,CAAgB,KAAK+J,gBAArB,CAAzB;YACD,CAFD,MAEO;cACL,OAAO,KAAKjU,IAAL,GAAYmU,IAAZ,CAAiBnB,qBAAjB,CAAP;YACD;UACF,CAND;QAOD;;QAED,KAAKoB,IAAL,GAAY,YAAW;UACrB,IAAIF,QAAQ,GAAG1B,QAAQ,CAAC,IAAD,CAAvB;;UACA,IAAI0B,QAAJ,EAAc;YACZ,OAAOA,QAAP;UACD;;UAED,IAAI,KAAKL,SAAT,EAAoB;YAClB,OAAOT,cAAc,CAAC,KAAKS,SAAN,CAArB;UACD,CAFD,MAEO,IAAI,KAAKI,gBAAT,EAA2B;YAChC,OAAOhK,OAAO,CAACC,OAAR,CAAgBoJ,qBAAqB,CAAC,KAAKW,gBAAN,CAArC,CAAP;UACD,CAFM,MAEA,IAAI,KAAKF,aAAT,EAAwB;YAC7B,MAAM,IAAI3sB,KAAJ,CAAU,sCAAV,CAAN;UACD,CAFM,MAEA;YACL,OAAO6iB,OAAO,CAACC,OAAR,CAAgB,KAAK0J,SAArB,CAAP;UACD;QACF,CAfD;;QAiBA,IAAInD,OAAO,CAACK,QAAZ,EAAsB;UACpB,KAAKA,QAAL,GAAgB,YAAW;YACzB,OAAO,KAAKsD,IAAL,GAAYD,IAAZ,CAAiB7Y,MAAjB,CAAP;UACD,CAFD;QAGD;;QAED,KAAK+Y,IAAL,GAAY,YAAW;UACrB,OAAO,KAAKD,IAAL,GAAYD,IAAZ,CAAiBpc,IAAI,CAACuc,KAAtB,CAAP;QACD,CAFD;;QAIA,OAAO,IAAP;MACD,CA5SkC,CA8SrC;;;MACE,IAAIC,OAAO,GAAG,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,KAA7C,CAAd;;MAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;QAC/B,IAAIC,OAAO,GAAGD,MAAM,CAACE,WAAP,EAAd;QACA,OAAOJ,OAAO,CAAC7N,OAAR,CAAgBgO,OAAhB,IAA2B,CAAC,CAA5B,GAAgCA,OAAhC,GAA0CD,MAAjD;MACD;;MAED,SAASG,OAAT,CAAiBC,KAAjB,EAAwBta,OAAxB,EAAiC;QAC/BA,OAAO,GAAGA,OAAO,IAAI,EAArB;QACA,IAAIkY,IAAI,GAAGlY,OAAO,CAACkY,IAAnB;;QAEA,IAAIoC,KAAK,YAAYD,OAArB,EAA8B;UAC5B,IAAIC,KAAK,CAACnC,QAAV,EAAoB;YAClB,MAAM,IAAIpV,SAAJ,CAAc,cAAd,CAAN;UACD;;UACD,KAAKwX,GAAL,GAAWD,KAAK,CAACC,GAAjB;UACA,KAAKC,WAAL,GAAmBF,KAAK,CAACE,WAAzB;;UACA,IAAI,CAACxa,OAAO,CAACyX,OAAb,EAAsB;YACpB,KAAKA,OAAL,GAAe,IAAID,OAAJ,CAAY8C,KAAK,CAAC7C,OAAlB,CAAf;UACD;;UACD,KAAKyC,MAAL,GAAcI,KAAK,CAACJ,MAApB;UACA,KAAKO,IAAL,GAAYH,KAAK,CAACG,IAAlB;UACA,KAAKC,MAAL,GAAcJ,KAAK,CAACI,MAApB;;UACA,IAAI,CAACxC,IAAD,IAASoC,KAAK,CAAClB,SAAN,IAAmB,IAAhC,EAAsC;YACpClB,IAAI,GAAGoC,KAAK,CAAClB,SAAb;YACAkB,KAAK,CAACnC,QAAN,GAAiB,IAAjB;UACD;QACF,CAhBD,MAgBO;UACL,KAAKoC,GAAL,GAAW9e,MAAM,CAAC6e,KAAD,CAAjB;QACD;;QAED,KAAKE,WAAL,GAAmBxa,OAAO,CAACwa,WAAR,IAAuB,KAAKA,WAA5B,IAA2C,aAA9D;;QACA,IAAIxa,OAAO,CAACyX,OAAR,IAAmB,CAAC,KAAKA,OAA7B,EAAsC;UACpC,KAAKA,OAAL,GAAe,IAAID,OAAJ,CAAYxX,OAAO,CAACyX,OAApB,CAAf;QACD;;QACD,KAAKyC,MAAL,GAAcD,eAAe,CAACja,OAAO,CAACka,MAAR,IAAkB,KAAKA,MAAvB,IAAiC,KAAlC,CAA7B;QACA,KAAKO,IAAL,GAAYza,OAAO,CAACya,IAAR,IAAgB,KAAKA,IAArB,IAA6B,IAAzC;QACA,KAAKC,MAAL,GAAc1a,OAAO,CAAC0a,MAAR,IAAkB,KAAKA,MAArC;QACA,KAAKC,QAAL,GAAgB,IAAhB;;QAEA,IAAI,CAAC,KAAKT,MAAL,KAAgB,KAAhB,IAAyB,KAAKA,MAAL,KAAgB,MAA1C,KAAqDhC,IAAzD,EAA+D;UAC7D,MAAM,IAAInV,SAAJ,CAAc,2CAAd,CAAN;QACD;;QACD,KAAKoW,SAAL,CAAejB,IAAf;MACD;;MAEDmC,OAAO,CAAC5sB,SAAR,CAAkBmtB,KAAlB,GAA0B,YAAW;QACnC,OAAO,IAAIP,OAAJ,CAAY,IAAZ,EAAkB;UAACnC,IAAI,EAAE,KAAKkB;QAAZ,CAAlB,CAAP;MACD,CAFD;;MAIA,SAASrY,MAAT,CAAgBmX,IAAhB,EAAsB;QACpB,IAAI5c,IAAI,GAAG,IAAIie,QAAJ,EAAX;QACArB,IAAI,CACD2C,IADH,GAEGC,KAFH,CAES,GAFT,EAGGzf,OAHH,CAGW,UAAS9H,KAAT,EAAgB;UACvB,IAAIA,KAAJ,EAAW;YACT,IAAIunB,KAAK,GAAGvnB,KAAK,CAACunB,KAAN,CAAY,GAAZ,CAAZ;YACA,IAAIld,IAAI,GAAGkd,KAAK,CAAC7T,KAAN,GAAcnY,OAAd,CAAsB,KAAtB,EAA6B,GAA7B,CAAX;YACA,IAAInB,KAAK,GAAGmtB,KAAK,CAACtf,IAAN,CAAW,GAAX,EAAgB1M,OAAhB,CAAwB,KAAxB,EAA+B,GAA/B,CAAZ;YACAwM,IAAI,CAACoc,MAAL,CAAYqD,kBAAkB,CAACnd,IAAD,CAA9B,EAAsCmd,kBAAkB,CAACptB,KAAD,CAAxD;UACD;QACF,CAVH;QAWA,OAAO2N,IAAP;MACD;;MAED,SAAS0f,YAAT,CAAsBC,UAAtB,EAAkC;QAChC,IAAIxD,OAAO,GAAG,IAAID,OAAJ,EAAd,CADgC,CAEpC;QACA;;QACI,IAAI0D,mBAAmB,GAAGD,UAAU,CAACnsB,OAAX,CAAmB,cAAnB,EAAmC,GAAnC,CAA1B;QACAosB,mBAAmB,CAACJ,KAApB,CAA0B,OAA1B,EAAmCzf,OAAnC,CAA2C,UAAS8f,IAAT,EAAe;UACxD,IAAIC,KAAK,GAAGD,IAAI,CAACL,KAAL,CAAW,GAAX,CAAZ;UACA,IAAIthB,GAAG,GAAG4hB,KAAK,CAACnU,KAAN,GAAc4T,IAAd,EAAV;;UACA,IAAIrhB,GAAJ,EAAS;YACP,IAAI7L,KAAK,GAAGytB,KAAK,CAAC5f,IAAN,CAAW,GAAX,EAAgBqf,IAAhB,EAAZ;YACApD,OAAO,CAACC,MAAR,CAAele,GAAf,EAAoB7L,KAApB;UACD;QACF,CAPD;QAQA,OAAO8pB,OAAP;MACD;;MAEDyB,IAAI,CAACxkB,IAAL,CAAU2lB,OAAO,CAAC5sB,SAAlB;;MAEA,SAAS4tB,QAAT,CAAkBC,QAAlB,EAA4Btb,OAA5B,EAAqC;QACnC,IAAI,CAACA,OAAL,EAAc;UACZA,OAAO,GAAG,EAAV;QACD;;QAED,KAAK2G,IAAL,GAAY,SAAZ;QACA,KAAK2I,MAAL,GAActP,OAAO,CAACsP,MAAR,KAAmB5N,SAAnB,GAA+B,GAA/B,GAAqC1B,OAAO,CAACsP,MAA3D;QACA,KAAKiM,EAAL,GAAU,KAAKjM,MAAL,IAAe,GAAf,IAAsB,KAAKA,MAAL,GAAc,GAA9C;QACA,KAAKkM,UAAL,GAAkB,gBAAgBxb,OAAhB,GAA0BA,OAAO,CAACwb,UAAlC,GAA+C,IAAjE;QACA,KAAK/D,OAAL,GAAe,IAAID,OAAJ,CAAYxX,OAAO,CAACyX,OAApB,CAAf;QACA,KAAK8C,GAAL,GAAWva,OAAO,CAACua,GAAR,IAAe,EAA1B;;QACA,KAAKpB,SAAL,CAAemC,QAAf;MACD;;MAEDpC,IAAI,CAACxkB,IAAL,CAAU2mB,QAAQ,CAAC5tB,SAAnB;;MAEA4tB,QAAQ,CAAC5tB,SAAT,CAAmBmtB,KAAnB,GAA2B,YAAW;QACpC,OAAO,IAAIS,QAAJ,CAAa,KAAKjC,SAAlB,EAA6B;UAClC9J,MAAM,EAAE,KAAKA,MADqB;UAElCkM,UAAU,EAAE,KAAKA,UAFiB;UAGlC/D,OAAO,EAAE,IAAID,OAAJ,CAAY,KAAKC,OAAjB,CAHyB;UAIlC8C,GAAG,EAAE,KAAKA;QAJwB,CAA7B,CAAP;MAMD,CAPD;;MASAc,QAAQ,CAACtgB,KAAT,GAAiB,YAAW;QAC1B,IAAI0gB,QAAQ,GAAG,IAAIJ,QAAJ,CAAa,IAAb,EAAmB;UAAC/L,MAAM,EAAE,CAAT;UAAYkM,UAAU,EAAE;QAAxB,CAAnB,CAAf;QACAC,QAAQ,CAAC9U,IAAT,GAAgB,OAAhB;QACA,OAAO8U,QAAP;MACD,CAJD;;MAMA,IAAIC,gBAAgB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAvB;;MAEAL,QAAQ,CAACM,QAAT,GAAoB,UAASpB,GAAT,EAAcjL,MAAd,EAAsB;QACxC,IAAIoM,gBAAgB,CAACvP,OAAjB,CAAyBmD,MAAzB,MAAqC,CAAC,CAA1C,EAA6C;UAC3C,MAAM,IAAIsM,UAAJ,CAAe,qBAAf,CAAN;QACD;;QAED,OAAO,IAAIP,QAAJ,CAAa,IAAb,EAAmB;UAAC/L,MAAM,EAAEA,MAAT;UAAiBmI,OAAO,EAAE;YAACoE,QAAQ,EAAEtB;UAAX;QAA1B,CAAnB,CAAP;MACD,CAND;;MAQAxgB,OAAO,CAACkc,YAAR,GAAuBL,IAAI,CAACK,YAA5B;;MACA,IAAI;QACF,IAAIlc,OAAO,CAACkc,YAAZ;MACD,CAFD,CAEE,OAAO3S,GAAP,EAAY;QACZvJ,OAAO,CAACkc,YAAR,GAAuB,UAASta,OAAT,EAAkBiC,IAAlB,EAAwB;UAC7C,KAAKjC,OAAL,GAAeA,OAAf;UACA,KAAKiC,IAAL,GAAYA,IAAZ;UACA,IAAI7C,KAAK,GAAGlO,KAAK,CAAC8O,OAAD,CAAjB;UACA,KAAKmgB,KAAL,GAAa/gB,KAAK,CAAC+gB,KAAnB;QACD,CALD;;QAMA/hB,OAAO,CAACkc,YAAR,CAAqBxoB,SAArB,GAAiCP,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACY,SAApB,CAAjC;QACAsM,OAAO,CAACkc,YAAR,CAAqBxoB,SAArB,CAA+BC,WAA/B,GAA6CqM,OAAO,CAACkc,YAArD;MACD;;MAED,SAASD,KAAT,CAAesE,KAAf,EAAsBxgB,IAAtB,EAA4B;QAC1B,OAAO,IAAI4V,OAAJ,CAAY,UAASC,OAAT,EAAkByI,MAAlB,EAA0B;UAC3C,IAAI2D,OAAO,GAAG,IAAI1B,OAAJ,CAAYC,KAAZ,EAAmBxgB,IAAnB,CAAd;;UAEA,IAAIiiB,OAAO,CAACrB,MAAR,IAAkBqB,OAAO,CAACrB,MAAR,CAAesB,OAArC,EAA8C;YAC5C,OAAO5D,MAAM,CAAC,IAAIre,OAAO,CAACkc,YAAZ,CAAyB,SAAzB,EAAoC,YAApC,CAAD,CAAb;UACD;;UAED,IAAIgG,GAAG,GAAG,IAAIC,cAAJ,EAAV;;UAEA,SAASC,QAAT,GAAoB;YAClBF,GAAG,CAACG,KAAJ;UACD;;UAEDH,GAAG,CAAC1D,MAAJ,GAAa,YAAW;YACtB,IAAIvY,OAAO,GAAG;cACZsP,MAAM,EAAE2M,GAAG,CAAC3M,MADA;cAEZkM,UAAU,EAAES,GAAG,CAACT,UAFJ;cAGZ/D,OAAO,EAAEuD,YAAY,CAACiB,GAAG,CAACI,qBAAJ,MAA+B,EAAhC;YAHT,CAAd;YAKArc,OAAO,CAACua,GAAR,GAAc,iBAAiB0B,GAAjB,GAAuBA,GAAG,CAACK,WAA3B,GAAyCtc,OAAO,CAACyX,OAAR,CAAgBI,GAAhB,CAAoB,eAApB,CAAvD;YACA,IAAIK,IAAI,GAAG,cAAc+D,GAAd,GAAoBA,GAAG,CAACR,QAAxB,GAAmCQ,GAAG,CAACM,YAAlD;YACA5M,OAAO,CAAC,IAAI0L,QAAJ,CAAanD,IAAb,EAAmBlY,OAAnB,CAAD,CAAP;UACD,CATD;;UAWAic,GAAG,CAACzD,OAAJ,GAAc,YAAW;YACvBJ,MAAM,CAAC,IAAIrV,SAAJ,CAAc,wBAAd,CAAD,CAAN;UACD,CAFD;;UAIAkZ,GAAG,CAACO,SAAJ,GAAgB,YAAW;YACzBpE,MAAM,CAAC,IAAIrV,SAAJ,CAAc,wBAAd,CAAD,CAAN;UACD,CAFD;;UAIAkZ,GAAG,CAACQ,OAAJ,GAAc,YAAW;YACvBrE,MAAM,CAAC,IAAIre,OAAO,CAACkc,YAAZ,CAAyB,SAAzB,EAAoC,YAApC,CAAD,CAAN;UACD,CAFD;;UAIAgG,GAAG,CAACS,IAAJ,CAASX,OAAO,CAAC7B,MAAjB,EAAyB6B,OAAO,CAACxB,GAAjC,EAAsC,IAAtC;;UAEA,IAAIwB,OAAO,CAACvB,WAAR,KAAwB,SAA5B,EAAuC;YACrCyB,GAAG,CAACU,eAAJ,GAAsB,IAAtB;UACD,CAFD,MAEO,IAAIZ,OAAO,CAACvB,WAAR,KAAwB,MAA5B,EAAoC;YACzCyB,GAAG,CAACU,eAAJ,GAAsB,KAAtB;UACD;;UAED,IAAI,kBAAkBV,GAAlB,IAAyB/F,OAAO,CAACzQ,IAArC,EAA2C;YACzCwW,GAAG,CAACW,YAAJ,GAAmB,MAAnB;UACD;;UAEDb,OAAO,CAACtE,OAAR,CAAgBpc,OAAhB,CAAwB,UAAS1N,KAAT,EAAgBiQ,IAAhB,EAAsB;YAC5Cqe,GAAG,CAACY,gBAAJ,CAAqBjf,IAArB,EAA2BjQ,KAA3B;UACD,CAFD;;UAIA,IAAIouB,OAAO,CAACrB,MAAZ,EAAoB;YAClBqB,OAAO,CAACrB,MAAR,CAAeoC,gBAAf,CAAgC,OAAhC,EAAyCX,QAAzC;;YAEAF,GAAG,CAACc,kBAAJ,GAAyB,YAAW;cAC5C;cACU,IAAId,GAAG,CAACe,UAAJ,KAAmB,CAAvB,EAA0B;gBACxBjB,OAAO,CAACrB,MAAR,CAAeuC,mBAAf,CAAmC,OAAnC,EAA4Cd,QAA5C;cACD;YACF,CALD;UAMD;;UAEDF,GAAG,CAACiB,IAAJ,CAAS,OAAOnB,OAAO,CAAC3C,SAAf,KAA6B,WAA7B,GAA2C,IAA3C,GAAkD2C,OAAO,CAAC3C,SAAnE;QACD,CAhEM,CAAP;MAiED;;MAEDpD,KAAK,CAACmH,QAAN,GAAiB,IAAjB;;MAEA,IAAI,CAACvH,IAAI,CAACI,KAAV,EAAiB;QACfJ,IAAI,CAACI,KAAL,GAAaA,KAAb;QACAJ,IAAI,CAAC4B,OAAL,GAAeA,OAAf;QACA5B,IAAI,CAACyE,OAAL,GAAeA,OAAf;QACAzE,IAAI,CAACyF,QAAL,GAAgBA,QAAhB;MACD;;MAEDthB,OAAO,CAACyd,OAAR,GAAkBA,OAAlB;MACAzd,OAAO,CAACsgB,OAAR,GAAkBA,OAAlB;MACAtgB,OAAO,CAACshB,QAAR,GAAmBA,QAAnB;MACAthB,OAAO,CAACic,KAAR,GAAgBA,KAAhB;MAEA9oB,MAAM,CAAC+O,cAAP,CAAsBlC,OAAtB,EAA+B,YAA/B,EAA6C;QAAEpM,KAAK,EAAE;MAAT,CAA7C;MAEA,OAAOoM,OAAP;IAEF,GAAE;EACD,CAnhBD,EAmhBG+b,QAnhBH;;EAohBAA,QAAQ,CAACE,KAAT,CAAeoH,QAAf,GAA0B,IAA1B,EACA;;EACA,OAAOtH,QAAQ,CAACE,KAAT,CAAemH,QAAtB,EACA;EACA;;EACA,IAAIE,GAAG,GAAGvH,QAAV,EAAmB;;EACnB/b,OAAO,GAAGsjB,GAAG,CAACrH,KAAd,EAAmB;;EACnBjc,kBAAkBsjB,GAAG,CAACrH,KAAtB,EAA2B;;EAC3Bjc,gBAAgBsjB,GAAG,CAACrH,KAApB,EAAyB;;EACzBjc,kBAAkBsjB,GAAG,CAAC7F,OAAtB;EACAzd,kBAAkBsjB,GAAG,CAAChD,OAAtB;EACAtgB,mBAAmBsjB,GAAG,CAAChC,QAAvB;EACAiC,iBAAiBvjB,OAAjB;;;;ACziBA,MAAMwjB,sBAAsB,GAAG,EAA/B,C,CAAA;;AAGA,SAASC,aAAT,CAAuBC,CAAvB,EAAkC;EAChC,IAAID,aAAa,GAAG,CAApB;;EACA,OAAOC,CAAC,GAAG,CAAX,EAAc;IACZA,CAAC,IAAI,CAALA;IACAD,aAAa;EACd;;EACD,OAAOA,aAAP;AACD,C,CAAA;;;AAGD,SAASE,cAAT,CAAwBD,CAAxB,EAAmC;EACjC,IAAIA,CAAC,KAAK,CAAV,EAAa,OAAO,CAAP;EACbA,CAAC;EACDA,CAAC,IAAIA,CAAC,IAAI,CAAVA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;EACAA,CAAC,IAAIA,CAAC,IAAI,EAAVA;EACAA,CAAC,IAAIA,CAAC,IAAI,EAAVA;EACA,OAAOA,CAAC,GAAG,CAAX;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,MAAME,aAAN,CAAoB;EACzB;;EAEA;;EAEA;;EAEA;;EAEA;EAGAjwB,WAAW,CACTkwB,aADS,EAETC,wBAFS,EAGTC,MAHS,EAITC,gBAJS,EAKTC,eALS,EAMT;IAAA,KAhBKJ,aAgBL;IAAA,KAdKC,wBAcL;IAAA,KAZKC,MAYL;IAAA,KAVKC,gBAUL;IAAA,KARKC,eAQL;IACA,KAAKJ,aAAL,GAAqBA,aAArB;IACA,KAAKC,wBAAL,GAAgCA,wBAAhC;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,eAAL,GAAuBA,eAAvB;EACD;;EAEDC,QAAQ,CAACC,IAAD,EAAuB;IAC7B,OAAO,KAAKC,oBAAL,CAA0BD,IAA1B,EAAgC,CAAhC,CAAP;EACD;;EAEDC,oBAAoB,CAACD,IAAD,EAAiC;IACnD,IAAIA,IAAI,GAAG,KAAKF,eAAhB,EAAiC;MAC/B,MAAMI,KAAK,GACTZ,aAAa,CAACE,cAAc,CAACQ,IAAI,GAAGX,sBAAPW,GAAgC,CAAjC,CAAf,CAAbV,GACAA,aAAa,CAACD,sBAAD,CADbC,GAEA,CAHF;MAKA,MAAMa,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,KAArB,CAAjB;MACA,MAAMG,SAAS,GAAGL,IAAI,IAAIG,QAAQ,GAAGd,sBAAf,CAAtB;MACA,OAAO,CAACa,KAAD,EAAQG,SAAR,CAAP;IARF,OASO;MACL,MAAMC,eAAe,GAAGN,IAAI,GAAG,KAAKF,eAApC;MACA,MAAMS,gBAAgB,GAAGnK,IAAI,CAACoK,KAALpK,CAAWkK,eAAe,GAAG,KAAKZ,aAAlCtJ,CAAzB;MACA,MAAM8J,KAAK,GAAG,KAAKL,gBAAL,GAAwBU,gBAAtC;MACA,MAAMF,SAAS,GAAGC,eAAe,GAAG,KAAKZ,aAAzC;MACA,OAAO,CAACQ,KAAD,EAAQG,SAAR,CAAP;IACD;EACF;;EAEDI,mBAAmB,CAACP,KAAD,EAAwB;IACzC,IAAIA,KAAK,IAAI,KAAKL,gBAAlB,EAAoC;MAClC,OAAO,CAACzJ,IAAI,CAACsK,GAALtK,CAAS,CAATA,EAAY8J,KAAZ9J,IAAqB,CAAtB,IAA2BiJ,sBAAlC;IADF,OAEO;MACL,OACE,CAACa,KAAK,GAAG,KAAKL,gBAAd,IAAkC,KAAKH,aAAvC,GACA,KAAKI,eAFP;IAID;EACF;;EAEDa,kBAAkB,CAACT,KAAD,EAAwB;IACxC,OAAO,KAAKO,mBAAL,CAAyBP,KAAzB,IAAkC,KAAKE,eAAL,CAAqBF,KAArB,CAAlC,GAAgE,CAAvE;EACD;;EAEDE,eAAe,CAACF,KAAD,EAAgB;IAC7B,IAAIA,KAAK,GAAG,KAAKL,gBAAjB,EAAmC;MACjC,OAAOzJ,IAAI,CAACsK,GAALtK,CAAS,CAATA,EAAY8J,KAAK,GAAGZ,aAAa,CAACD,sBAAD,CAAjCjJ,CAAP;IADF,OAEO;MACL,OAAO,KAAKsJ,aAAZ;IACD;EACF;;AAtEwB;;AC9BpB,MAAMkB,oBAAN,SAAmCjyB,KAAnC,CAAyC;EAG9Ca,WAAW,CAACiO,OAAD,EAAkBojB,IAAlB,EAAmC;IAC5C,MAAMpjB,OAAN;IAD4C,KAF9CojB,IAE8C;IAG5C,KAAKA,IAAL,GAAYA,IAAZ;EACD;;AAP6C,C,CCAhD;AACA;;AAEA;AACA;AACA;;;AACO,MAAMC,oBAAoB,GAAG,GAA7B;AAEP;AACA;AACA;;AACO,MAAMC,sBAAsB,GAAG,EAA/B;AAEP;AACA;AACA;;AACO,MAAMC,oBAAoB,GAC/BF,oBAAoB,GAAGC,sBADlB;AAGP;AACA;AACA;;AACO,MAAME,WAAW,GAAG,OAAOD,oBAA3B;;ACtBA,SAASE,cAAT,CACLzG,OADK,EAEL0G,SAFK,EAGc;EACnB,IAAIC,SAAJ;EACA,MAAMC,cAA6B,GAAG,IAAI7P,OAAJ,CAAYC,OAAO,IAAI;IAC3D2P,SAAS,GAAG1P,UAAU,CAAC,MAAMD,OAAO,CAAC,IAAD,CAAd,EAAsB0P,SAAtB,CAAtBC;EADoC,EAAtC;EAIA,OAAO5P,OAAO,CAAC8P,IAAR9P,CAAa,CAACiJ,OAAD,EAAU4G,cAAV,CAAb7P,EAAwCkK,IAAxClK,CAA8CzP,MAAD,IAAsB;IACxEwf,YAAY,CAACH,SAAD,CAAZG;IACA,OAAOxf,MAAP;EAFK,EAAP;AAID;;ACbM,SAASyf,gBAAT,CAA0BC,QAA1B,EAA4C;EACjD,IAAIpF,GAAG,GAAG,IAAIqF,GAAJ,CAAQD,QAAR,CAAV;EACA,MAAME,QAAQ,GAAGtF,GAAG,CAACuF,QAAJvF,KAAiB,QAAlC;EAEAA,GAAG,CAACuF,QAAJvF,GAAesF,QAAQ,GAAG,MAAH,GAAY,KAAnCtF;EACAA,GAAG,CAACwF,IAAJxF,GAAW,EAAXA,CALiD;EAQjD;EACA;EACA;EACA;EACA;;EACA,IAAIA,GAAG,CAACyF,IAAJzF,KAAa,EAAjB,EAAqB;IACnBA,GAAG,CAACyF,IAAJzF,GAAW9e,MAAM,CAACwkB,MAAM,CAAC1F,GAAG,CAACyF,IAAL,CAANC,GAAmB,CAApB,CAAjB1F;EACD;;EACD,OAAOA,GAAG,CAACprB,QAAJorB,EAAP;AACD;;AC6BD,MAAM2F,mBAAmB,GAAGC,MAAM,CAChCC,QAAQ,CAACze,SAAD,CADwB,EAEhC0e,MAAM,EAF0B,EAGhC1yB,KAAK,IAAI,IAAIgU,SAAJ,CAAchU,KAAd,CAHuB,CAAlC;AAMA,MAAM2yB,oBAAoB,GAAGC,KAAK,CAAC,CAACF,MAAM,EAAP,EAAWG,OAAO,CAAC,QAAD,CAAlB,CAAD,CAAlC;AAEA,MAAMC,wBAAwB,GAAGN,MAAM,CACrCC,QAAQ,CAACl0B,MAAD,CAD6B,EAErCo0B,oBAFqC,EAGrC3yB,KAAK,IAAIzB,MAAM,CAACG,IAAPH,CAAYyB,KAAK,CAAC,CAAD,CAAjBzB,EAAsB,QAAtBA,CAH4B,CAAvC;AAMA;AACA;AACA;AACA;;MACaw0B,0BAA0B,GAAG,KAAK;AA+F/C;AACA;AACA;;AACA,SAASC,eAAT,CAA+B1gB,MAA/B,EAAqD;EACnD,OAAO2gB,KAAK,CAAC,CACXC,IAAI,CAAC;IACHC,OAAO,EAAEN,OAAO,CAAC,KAAD,CADb;IAEHO,EAAE,EAAEV,MAAM,EAFP;IAGHpgB;EAHG,CAAD,CADO,EAMX4gB,IAAI,CAAC;IACHC,OAAO,EAAEN,OAAO,CAAC,KAAD,CADb;IAEHO,EAAE,EAAEV,MAAM,EAFP;IAGHtlB,KAAK,EAAE8lB,IAAI,CAAC;MACV5jB,IAAI,EAAE+jB,OAAO,EADH;MAEVrlB,OAAO,EAAE0kB,MAAM,EAFL;MAGV7f,IAAI,EAAEygB,QAAQ,CAACC,GAAG,EAAJ;IAHJ,CAAD;EAHR,CAAD,CANO,CAAD,CAAZ;AAgBD;;AAED,MAAMC,gBAAgB,GAAGR,eAAe,CAACK,OAAO,EAAR,CAAxC;AAEA;AACA;AACA;;AACA,SAASI,aAAT,CAA6BC,MAA7B,EAAmD;EACjD,OAAOlB,MAAM,CAACQ,eAAe,CAACU,MAAD,CAAhB,EAA0BF,gBAA1B,EAA4CxzB,KAAK,IAAI;IAChE,IAAI,WAAWA,KAAf,EAAsB;MACpB,OAAOA,KAAP;IADF,OAEO;MACL,OAAO,EACL,GAAGA,KADE;QAELsS,MAAM,EAAE9S,MAAM,CAACQ,KAAK,CAACsS,MAAP,EAAeohB,MAAf;MAFT,CAAP;IAID;EARU,EAAb;AAUD;AAED;AACA;AACA;;;AACA,SAASC,uBAAT,CAAuC3zB,KAAvC,EAA4D;EAC1D,OAAOyzB,aAAa,CAClBP,IAAI,CAAC;IACHU,OAAO,EAAEV,IAAI,CAAC;MACZ3C,IAAI,EAAEsD,MAAM;IADA,CAAD,CADV;IAIH7zB;EAJG,CAAD,CADc,CAApB;AAQD;AAED;AACA;AACA;;;AACA,SAAS8zB,4BAAT,CAA4C9zB,KAA5C,EAAiE;EAC/D,OAAOkzB,IAAI,CAAC;IACVU,OAAO,EAAEV,IAAI,CAAC;MACZ3C,IAAI,EAAEsD,MAAM;IADA,CAAD,CADH;IAIV7zB;EAJU,CAAD,CAAX;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAmHA,MAAM+zB,0BAA0B,GAAGb,IAAI,CAAC;EACtCc,UAAU,EAAEH,MAAM,EADoB;EAEtCI,cAAc,EAAEJ,MAAM,EAFgB;EAGtCK,OAAO,EAAEL,MAAM,EAHuB;EAItCM,KAAK,EAAEN,MAAM,EAJyB;EAKtCO,QAAQ,EAAEP,MAAM;AALsB,CAAD,CAAvC;AAQA;AACA;AACA;;AAYA;AACA;AACA;;AACA,MAAMQ,wBAAwB,GAAGZ,aAAa,CAC5C1hB,KAAK,CACHuiB,QAAQ,CACNpB,IAAI,CAAC;EACHzC,KAAK,EAAEoD,MAAM,EADV;EAEHU,aAAa,EAAEV,MAAM,EAFlB;EAGHW,MAAM,EAAEX,MAAM,EAHX;EAIHY,WAAW,EAAEZ,MAAM;AAJhB,CAAD,CADE,CADL,CADuC,CAA9C;AAaA;AACA;AACA;;AAUA,MAAMa,kBAAkB,GAAGxB,IAAI,CAAC;EAC9BzC,KAAK,EAAEoD,MAAM,EADiB;EAE9BjD,SAAS,EAAEiD,MAAM,EAFa;EAG9Bc,YAAY,EAAEd,MAAM,EAHU;EAI9Be,YAAY,EAAEf,MAAM,EAJU;EAK9BgB,WAAW,EAAEvB,QAAQ,CAACO,MAAM,EAAP,CALS;EAM9BiB,gBAAgB,EAAExB,QAAQ,CAACO,MAAM,EAAP;AANI,CAAD,CAA/B;AASA,MAAMkB,sBAAsB,GAAG7B,IAAI,CAAC;EAClCjD,aAAa,EAAE4D,MAAM,EADa;EAElC3D,wBAAwB,EAAE2D,MAAM,EAFE;EAGlC1D,MAAM,EAAE6E,OAAO,EAHmB;EAIlC5E,gBAAgB,EAAEyD,MAAM,EAJU;EAKlCxD,eAAe,EAAEwD,MAAM;AALW,CAAD,CAAnC;AAQA;AACA;AACA;AACA;;AAKA,MAAMoB,uBAAuB,GAAGC,MAAM,CAACxC,MAAM,EAAP,EAAW3gB,KAAK,CAAC8hB,MAAM,EAAP,CAAhB,CAAtC;AAEA;AACA;AACA;;AACA,MAAMsB,sBAAsB,GAAGb,QAAQ,CAACrB,KAAK,CAAC,CAACC,IAAI,CAAC,EAAD,CAAL,EAAWR,MAAM,EAAjB,CAAD,CAAN,CAAvC;AAEA;AACA;AACA;;AACA,MAAM0C,qBAAqB,GAAGlC,IAAI,CAAC;EACjCvd,GAAG,EAAEwf;AAD4B,CAAD,CAAlC;AAIA;AACA;AACA;;AACA,MAAME,uBAAuB,GAAGxC,OAAO,CAAC,mBAAD,CAAvC;AAEA;AACA;AACA;;AAOA,MAAMyC,aAAa,GAAGpC,IAAI,CAAC;EACzB,eAAeR,MAAM,EADI;EAEzB,eAAeY,QAAQ,CAACO,MAAM,EAAP;AAFE,CAAD,CAA1B;AAyBA,MAAM0B,kCAAkC,GAAG5B,uBAAuB,CAChET,IAAI,CAAC;EACHvd,GAAG,EAAE2e,QAAQ,CAACrB,KAAK,CAAC,CAACC,IAAI,CAAC,EAAD,CAAL,EAAWR,MAAM,EAAjB,CAAD,CAAN,CADV;EAEHtB,IAAI,EAAEkD,QAAQ,CAACviB,KAAK,CAAC2gB,MAAM,EAAP,CAAN,CAFX;EAGHtX,QAAQ,EAAEkY,QAAQ,CAChBgB,QAAQ,CACNviB,KAAK,CACHmhB,IAAI,CAAC;IACH7L,UAAU,EAAE2N,OAAO,EADhB;IAEH1N,KAAK,EAAEoL,MAAM,EAFV;IAGHjP,QAAQ,EAAEoQ,MAAM,EAHb;IAIHhhB,IAAI,EAAEd,KAAK,CAAC2gB,MAAM,EAAP,CAJR;IAKH8C,SAAS,EAAElC,QAAQ,CAACO,MAAM,EAAP;EALhB,CAAD,CADD,CADC,CADQ,CAHf;EAgBH4B,aAAa,EAAEnC,QAAQ,CAACO,MAAM,EAAP;AAhBpB,CAAD,CAD4D,CAAlE;;AAsSA,SAAS6B,eAAT,CACE9I,GADF,EAEEsF,QAFF,EAGEyD,WAHF,EAIEC,eAJF,EAKEC,uBALF,EAMa;EAMX,IAAIC,mBAAJ;;EAIA,IAAIF,eAAJ,EAAqB;IACnBE,mBAAmB,GAAG,OAAOlJ,GAAP,EAAoBva,OAApB,KAAqC;MACzD,MAAM0jB,iBAAiB,GAAG,MAAM,IAAIhU,OAAJ,CAC9B,CAACC,OAAD,EAAUyI,MAAV,KAAqB;QACnB,IAAI;UACFmL,eAAe,CAAChJ,GAAD,EAAMva,OAAN,EAAe,CAAC2jB,WAAD,EAAcC,eAAd,KAC5BjU,OAAO,CAAC,CAACgU,WAAD,EAAcC,eAAd,CAAD,CADM,CAAfL;QADF,EAIE,OAAOxoB,KAAP,EAAc;UACdqd,MAAM,CAACrd,KAAD,CAANqd;QACD;MAR2B,EAAhC;MAWA,OAAO,MAAMpC,KAAK,CAAC,GAAG0N,iBAAJ,CAAlB;IAZF;EAcD;;EAED,MAAMG,aAAa,GAAG,IAAIC,SAAJ,CAAc,OAAO/H,OAAP,EAAgBhE,QAAhB,KAA6B;IAC/D,MAAMgM,KAAK,GAAgDriB,SAA3D;IACA,MAAM1B,OAAO,GAAG;MACdka,MAAM,EAAE,MADM;MAEdhC,IAAI,EAAE6D,OAFQ;MAGdgI,KAHc;MAIdtM,OAAO,EAAEvqB,MAAM,CAACyT,MAAPzT,CACP;QACE,gBAAgB;MADlB,CADOA,EAIPo2B,WAAW,IAAI,EAJRp2B;IAJK,CAAhB;;IAYA,IAAI;MACF,IAAI82B,yBAAyB,GAAG,CAAhC;MACA,IAAIr1B,GAAJ;MACA,IAAIs1B,QAAQ,GAAG,GAAf;;MACA,SAAS;QACP,IAAIR,mBAAJ,EAAyB;UACvB90B,GAAG,GAAG,MAAM80B,mBAAmB,CAAClJ,GAAD,EAAMva,OAAN,CAA/BrR;QADF,OAEO;UACLA,GAAG,GAAG,MAAMqnB,KAAK,CAACuE,GAAD,EAAMva,OAAN,CAAjBrR;QACD;;QAED,IAAIA,GAAG,CAAC2gB,MAAJ3gB,KAAe;QAAI;QAAvB,EAAgD;UAC9C;QACD;;QACD,IAAI60B,uBAAuB,KAAK,IAAhC,EAAsC;UACpC;QACD;;QACDQ,yBAAyB,IAAI,CAA7BA;;QACA,IAAIA,yBAAyB,KAAK,CAAlC,EAAqC;UACnC;QACD;;QACDxnB,OAAO,CAACC,GAARD,CACG,yBAAwB7N,GAAG,CAAC2gB,MAAO,IAAG3gB,GAAG,CAAC6sB,UAAW,qBAAoByI,QAAS,aADrFznB;QAGA,MAAMgT,KAAK,CAACyU,QAAD,CAAX;QACAA,QAAQ,IAAI,CAAZA;MACD;;MAED,MAAMpK,IAAI,GAAG,MAAMlrB,GAAG,CAACkrB,IAAJlrB,EAAnB;;MACA,IAAIA,GAAG,CAAC4sB,EAAR,EAAY;QACVxD,QAAQ,CAAC,IAAD,EAAO8B,IAAP,CAAR9B;MADF,OAEO;QACLA,QAAQ,CAAC,IAAIlrB,KAAJ,CAAW,GAAE8B,GAAG,CAAC2gB,MAAO,IAAG3gB,GAAG,CAAC6sB,UAAW,KAAI3B,IAAK,EAAnD,CAAD,CAAR9B;MACD;IAjCH,EAkCE,OAAOzU,GAAP,EAAY;MACZ,IAAIA,GAAG,YAAYzW,KAAnB,EAA0BkrB,QAAQ,CAACzU,GAAD,CAARyU;IAnC5B,UAoCU,CAET;EApDmB,GAqDnB,EArDmB,CAAtB;EAuDA,OAAO8L,aAAP;AACD;;AAED,SAASK,gBAAT,CAA0BC,MAA1B,EAAyD;EACvD,OAAO,CAACjK,MAAD,EAAS9d,IAAT,KAAkB;IACvB,OAAO,IAAIsT,OAAJ,CAAY,CAACC,OAAD,EAAUyI,MAAV,KAAqB;MACtC+L,MAAM,CAACpI,OAAPoI,CAAejK,MAAfiK,EAAuB/nB,IAAvB+nB,EAA6B,CAAC7gB,GAAD,EAAWmY,QAAX,KAA6B;QACxD,IAAInY,GAAJ,EAAS;UACP8U,MAAM,CAAC9U,GAAD,CAAN8U;UACA;QACD;;QACDzI,OAAO,CAAC8L,QAAD,CAAP9L;MALF;IADK,EAAP;EADF;AAWD;;AAED,SAASyU,qBAAT,CAA+BD,MAA/B,EAAmE;EACjE,OAAQE,QAAD,IAA2B;IAChC,OAAO,IAAI3U,OAAJ,CAAY,CAACC,OAAD,EAAUyI,MAAV,KAAqB;MACtC;MACA,IAAIiM,QAAQ,CAACh2B,MAATg2B,KAAoB,CAAxB,EAA2B1U,OAAO,CAAC,EAAD,CAAPA;MAE3B,MAAM2U,KAAK,GAAGD,QAAQ,CAAChjB,GAATgjB,CAAcnnB,MAAD,IAAuB;QAChD,OAAOinB,MAAM,CAACpI,OAAPoI,CAAejnB,MAAM,CAACqnB,UAAtBJ,EAAkCjnB,MAAM,CAACd,IAAzC+nB,CAAP;MADY,EAAd;MAIAA,MAAM,CAACpI,OAAPoI,CAAeG,KAAfH,EAAsB,CAAC7gB,GAAD,EAAWmY,QAAX,KAA6B;QACjD,IAAInY,GAAJ,EAAS;UACP8U,MAAM,CAAC9U,GAAD,CAAN8U;UACA;QACD;;QACDzI,OAAO,CAAC8L,QAAD,CAAP9L;MALF;IARK,EAAP;EADF;AAkBD;AAED;AACA;AACA;;;AACA,MAAM6U,6BAA6B,GAAGpD,aAAa,CAACM,0BAAD,CAAnD;AAEA;AACA;AACA;;AACA,MAAM+C,qBAAqB,GAAGrD,aAAa,CAACiB,kBAAD,CAA3C;AAEA;AACA;AACA;;AACA,MAAMqC,yBAAyB,GAAGtD,aAAa,CAACsB,sBAAD,CAA/C;AAEA;AACA;AACA;;AACA,MAAMiC,0BAA0B,GAAGvD,aAAa,CAACwB,uBAAD,CAAhD;AAEA;AACA;AACA;;AACA,MAAMgC,aAAa,GAAGxD,aAAa,CAACI,MAAM,EAAP,CAAnC;AAEA;AACA;AACA;;AAYA;AACA;AACA;;AACA,MAAMqD,kBAAkB,GAAGvD,uBAAuB,CAChDT,IAAI,CAAC;EACHiE,KAAK,EAAEtD,MAAM,EADV;EAEHuD,WAAW,EAAEvD,MAAM,EAFhB;EAGHwD,cAAc,EAAExD,MAAM,EAHnB;EAIHyD,sBAAsB,EAAEvlB,KAAK,CAACwgB,mBAAD;AAJ1B,CAAD,CAD4C,CAAlD;AASA;AACA;AACA;AACA;;AAYA;AACA;AACA;;AACA,MAAMgF,iBAAiB,GAAGrE,IAAI,CAAC;EAC7BsB,MAAM,EAAE9B,MAAM,EADe;EAE7B8E,QAAQ,EAAElD,QAAQ,CAACT,MAAM,EAAP,CAFW;EAG7B4D,QAAQ,EAAE5D,MAAM,EAHa;EAI7B6D,cAAc,EAAEpE,QAAQ,CAACZ,MAAM,EAAP;AAJK,CAAD,CAA9B;AAOA;AACA;AACA;;AAcA;AACA;AACA;;AACA,MAAMiF,6BAA6B,GAAGhE,uBAAuB,CAC3D5hB,KAAK,CACHmhB,IAAI,CAAC;EACHzd,OAAO,EAAE8c,mBADN;EAEHiC,MAAM,EAAE9B,MAAM,EAFX;EAGH8E,QAAQ,EAAElD,QAAQ,CAACT,MAAM,EAAP,CAHf;EAIH4D,QAAQ,EAAE5D,MAAM,EAJb;EAKH6D,cAAc,EAAEpE,QAAQ,CAACZ,MAAM,EAAP;AALrB,CAAD,CADD,CADsD,CAA7D;AAYA;AACA;AACA;;AACA,MAAMkF,uBAAuB,GAAGjE,uBAAuB,CACrD5hB,KAAK,CACHmhB,IAAI,CAAC;EACHrd,MAAM,EAAE0c,mBADL;EAEHvY,OAAO,EAAEkZ,IAAI,CAAC;IACZ7L,UAAU,EAAE2N,OAAO,EADP;IAEZ1N,KAAK,EAAEiL,mBAFK;IAGZ9O,QAAQ,EAAEoQ,MAAM,EAHJ;IAIZhhB,IAAI,EAAEigB,wBAJM;IAKZ0C,SAAS,EAAE3B,MAAM;EALL,CAAD;AAFV,CAAD,CADD,CADgD,CAAvD;AAeA,MAAMgE,uBAAuB,GAAG3E,IAAI,CAAC;EACnClM,OAAO,EAAE0L,MAAM,EADoB;EAEnCoF,MAAM,EAAEzE,OAAO,EAFoB;EAGnC3P,KAAK,EAAEmQ,MAAM;AAHsB,CAAD,CAApC;AAMA;AACA;AACA;;AACA,MAAMkE,6BAA6B,GAAGpE,uBAAuB,CAC3D5hB,KAAK,CACHmhB,IAAI,CAAC;EACHrd,MAAM,EAAE0c,mBADL;EAEHvY,OAAO,EAAEkZ,IAAI,CAAC;IACZ7L,UAAU,EAAE2N,OAAO,EADP;IAEZ1N,KAAK,EAAEiL,mBAFK;IAGZ9O,QAAQ,EAAEoQ,MAAM,EAHJ;IAIZhhB,IAAI,EAAEglB,uBAJM;IAKZrC,SAAS,EAAE3B,MAAM;EALL,CAAD;AAFV,CAAD,CADD,CADsD,CAA7D;AAeA;AACA;AACA;;AAMA;AACA;AACA;;AACA,MAAMmE,2BAA2B,GAAGrE,uBAAuB,CACzD5hB,KAAK,CACHmhB,IAAI,CAAC;EACHzP,QAAQ,EAAEoQ,MAAM,EADb;EAEHpe,OAAO,EAAE8c;AAFN,CAAD,CADD,CADoD,CAA3D;AASA;AACA;AACA;;AACA,MAAM0F,iBAAiB,GAAG/E,IAAI,CAAC;EAC7B7L,UAAU,EAAE2N,OAAO,EADU;EAE7B1N,KAAK,EAAEiL,mBAFsB;EAG7B9O,QAAQ,EAAEoQ,MAAM,EAHa;EAI7BhhB,IAAI,EAAEigB,wBAJuB;EAK7B0C,SAAS,EAAE3B,MAAM;AALY,CAAD,CAA9B;AAQA;AACA;AACA;;AACA,MAAMqE,sBAAsB,GAAGhF,IAAI,CAAC;EAClCrd,MAAM,EAAE0c,mBAD0B;EAElCvY,OAAO,EAAEie;AAFyB,CAAD,CAAnC;AAKA,MAAME,sBAAsB,GAAG3F,MAAM,CACnCS,KAAK,CAAC,CAACR,QAAQ,CAACl0B,MAAD,CAAT,EAAmBs5B,uBAAnB,CAAD,CAD8B,EAEnC5E,KAAK,CAAC,CAACN,oBAAD,EAAuBkF,uBAAvB,CAAD,CAF8B,EAGnC73B,KAAK,IAAI;EACP,IAAIa,KAAK,CAACC,OAAND,CAAcb,KAAda,CAAJ,EAA0B;IACxB,OAAOrB,MAAM,CAACQ,KAAD,EAAQ8yB,wBAAR,CAAb;EADF,OAEO;IACL,OAAO9yB,KAAP;EACD;AARgC,EAArC;AAYA;AACA;AACA;;AACA,MAAMo4B,uBAAuB,GAAGlF,IAAI,CAAC;EACnC7L,UAAU,EAAE2N,OAAO,EADgB;EAEnC1N,KAAK,EAAEiL,mBAF4B;EAGnC9O,QAAQ,EAAEoQ,MAAM,EAHmB;EAInChhB,IAAI,EAAEslB,sBAJ6B;EAKnC3C,SAAS,EAAE3B,MAAM;AALkB,CAAD,CAApC;AAQA,MAAMwE,4BAA4B,GAAGnF,IAAI,CAAC;EACxCrd,MAAM,EAAE0c,mBADgC;EAExCvY,OAAO,EAAEoe;AAF+B,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,MAAME,qBAAqB,GAAGpF,IAAI,CAAC;EACjCqF,KAAK,EAAEtF,KAAK,CAAC,CACXJ,OAAO,CAAC,QAAD,CADI,EAEXA,OAAO,CAAC,UAAD,CAFI,EAGXA,OAAO,CAAC,YAAD,CAHI,EAIXA,OAAO,CAAC,cAAD,CAJI,CAAD,CADqB;EAOjC2F,MAAM,EAAE3E,MAAM,EAPmB;EAQjC4E,QAAQ,EAAE5E,MAAM;AARiB,CAAD,CAAlC;AAWA;AACA;AACA;;AAEA,MAAM6E,0CAA0C,GAAGjF,aAAa,CAC9D1hB,KAAK,CACHmhB,IAAI,CAAC;EACHrW,SAAS,EAAE6V,MAAM,EADd;EAEHnC,IAAI,EAAEsD,MAAM,EAFT;EAGHle,GAAG,EAAEwf,sBAHF;EAIHwD,IAAI,EAAErE,QAAQ,CAAC5B,MAAM,EAAP,CAJX;EAKHkG,SAAS,EAAEtF,QAAQ,CAACgB,QAAQ,CAACT,MAAM,EAAP,CAAT;AALhB,CAAD,CADD,CADyD,CAAhE;AAYA;AACA;AACA;;AACA,MAAMgF,gCAAgC,GAAGpF,aAAa,CACpD1hB,KAAK,CACHmhB,IAAI,CAAC;EACHrW,SAAS,EAAE6V,MAAM,EADd;EAEHnC,IAAI,EAAEsD,MAAM,EAFT;EAGHle,GAAG,EAAEwf,sBAHF;EAIHwD,IAAI,EAAErE,QAAQ,CAAC5B,MAAM,EAAP,CAJX;EAKHkG,SAAS,EAAEtF,QAAQ,CAACgB,QAAQ,CAACT,MAAM,EAAP,CAAT;AALhB,CAAD,CADD,CAD+C,CAAtD;AAYA;AACA;AACA;;AACA,MAAMiF,yBAAyB,GAAG5F,IAAI,CAAC;EACrC6F,YAAY,EAAElF,MAAM,EADiB;EAErCvhB,MAAM,EAAEwhB,4BAA4B,CAACmE,iBAAD;AAFC,CAAD,CAAtC;AAKA;AACA;AACA;;AACA,MAAMe,wBAAwB,GAAG9F,IAAI,CAAC;EACpCrd,MAAM,EAAE0c,mBAD4B;EAEpCvY,OAAO,EAAEie;AAF2B,CAAD,CAArC;AAKA;AACA;AACA;;AACA,MAAMgB,gCAAgC,GAAG/F,IAAI,CAAC;EAC5C6F,YAAY,EAAElF,MAAM,EADwB;EAE5CvhB,MAAM,EAAEwhB,4BAA4B,CAACkF,wBAAD;AAFQ,CAAD,CAA7C;AAKA;AACA;AACA;;AACA,MAAME,cAAc,GAAGhG,IAAI,CAAC;EAC1BiG,MAAM,EAAEtF,MAAM,EADY;EAE1BtD,IAAI,EAAEsD,MAAM,EAFc;EAG1BuF,IAAI,EAAEvF,MAAM;AAHc,CAAD,CAA3B;AAMA;AACA;AACA;;AACA,MAAMwF,sBAAsB,GAAGnG,IAAI,CAAC;EAClC6F,YAAY,EAAElF,MAAM,EADc;EAElCvhB,MAAM,EAAE4mB;AAF0B,CAAD,CAAnC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AACA;AACA;;AACA,MAAMI,gBAAgB,GAAGrG,KAAK,CAAC,CAC7BC,IAAI,CAAC;EACHla,IAAI,EAAEia,KAAK,CAAC,CACVJ,OAAO,CAAC,oBAAD,CADG,EAEVA,OAAO,CAAC,WAAD,CAFG,EAGVA,OAAO,CAAC,wBAAD,CAHG,EAIVA,OAAO,CAAC,MAAD,CAJG,CAAD,CADR;EAOHtC,IAAI,EAAEsD,MAAM,EAPT;EAQH0F,SAAS,EAAE1F,MAAM;AARd,CAAD,CADyB,EAW7BX,IAAI,CAAC;EACHla,IAAI,EAAE6Z,OAAO,CAAC,aAAD,CADV;EAEHsG,MAAM,EAAEtF,MAAM,EAFX;EAGHtD,IAAI,EAAEsD,MAAM,EAHT;EAIH0F,SAAS,EAAE1F,MAAM;AAJd,CAAD,CAXyB,EAiB7BX,IAAI,CAAC;EACHla,IAAI,EAAE6Z,OAAO,CAAC,QAAD,CADV;EAEHtC,IAAI,EAAEsD,MAAM,EAFT;EAGH0F,SAAS,EAAE1F,MAAM,EAHd;EAIH2F,KAAK,EAAEtG,IAAI,CAAC;IACVuG,qBAAqB,EAAE5F,MAAM,EADnB;IAEV6F,yBAAyB,EAAE7F,MAAM,EAFvB;IAGV8F,qBAAqB,EAAE9F,MAAM,EAHnB;IAIV+F,uBAAuB,EAAE/F,MAAM;EAJrB,CAAD;AAJR,CAAD,CAjByB,EA4B7BX,IAAI,CAAC;EACHla,IAAI,EAAE6Z,OAAO,CAAC,MAAD,CADV;EAEHtC,IAAI,EAAEsD,MAAM,EAFT;EAGH0F,SAAS,EAAE1F,MAAM,EAHd;EAIHle,GAAG,EAAE+c,MAAM;AAJR,CAAD,CA5ByB,CAAD,CAA9B;AAoCA;AACA;AACA;;AACA,MAAMmH,4BAA4B,GAAG3G,IAAI,CAAC;EACxC6F,YAAY,EAAElF,MAAM,EADoB;EAExCvhB,MAAM,EAAEgnB;AAFgC,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,MAAMQ,2BAA2B,GAAG5G,IAAI,CAAC;EACvC6F,YAAY,EAAElF,MAAM,EADmB;EAEvCvhB,MAAM,EAAEwhB,4BAA4B,CAClCb,KAAK,CAAC,CAACmC,qBAAD,EAAwBC,uBAAxB,CAAD,CAD6B;AAFG,CAAD,CAAxC;AAOA;AACA;AACA;;AACA,MAAM0E,sBAAsB,GAAG7G,IAAI,CAAC;EAClC6F,YAAY,EAAElF,MAAM,EADc;EAElCvhB,MAAM,EAAEuhB,MAAM;AAFoB,CAAD,CAAnC;AAKA,MAAMmG,iBAAiB,GAAG9G,IAAI,CAAC;EAC7Brd,MAAM,EAAE6c,MAAM,EADe;EAE7BuH,MAAM,EAAE3F,QAAQ,CAAC5B,MAAM,EAAP,CAFa;EAG7BwH,GAAG,EAAE5F,QAAQ,CAAC5B,MAAM,EAAP,CAHgB;EAI7ByH,GAAG,EAAE7F,QAAQ,CAAC5B,MAAM,EAAP,CAJgB;EAK7B7lB,OAAO,EAAEynB,QAAQ,CAAC5B,MAAM,EAAP;AALY,CAAD,CAA9B;AAQA,MAAM0H,qBAAqB,GAAGlH,IAAI,CAAC;EACjCmH,UAAU,EAAE3H,MAAM,EADe;EAEjC4H,UAAU,EAAE5H,MAAM,EAFe;EAGjC6H,cAAc,EAAE1G,MAAM,EAHW;EAIjC2G,gBAAgB,EAAExF,OAAO,EAJQ;EAKjCyF,YAAY,EAAE1oB,KAAK,CAAC6gB,KAAK,CAAC,CAACiB,MAAM,EAAP,EAAWA,MAAM,EAAjB,EAAqBA,MAAM,EAA3B,CAAD,CAAN,CALc;EAMjC6G,UAAU,EAAE7G,MAAM,EANe;EAOjC8G,QAAQ,EAAE9G,MAAM,EAPiB;EAQjC+G,QAAQ,EAAEtG,QAAQ,CAACT,MAAM,EAAP;AARe,CAAD,CAAlC;AAWA;AACA;AACA;;AACA,MAAMgH,eAAe,GAAGpH,aAAa,CACnCP,IAAI,CAAC;EACH4H,OAAO,EAAE/oB,KAAK,CAACqoB,qBAAD,CADX;EAEHW,UAAU,EAAEhpB,KAAK,CAACqoB,qBAAD;AAFd,CAAD,CAD+B,CAArC;AAOA,MAAMY,kBAAkB,GAAG/H,KAAK,CAAC,CAC/BJ,OAAO,CAAC,WAAD,CADwB,EAE/BA,OAAO,CAAC,WAAD,CAFwB,EAG/BA,OAAO,CAAC,WAAD,CAHwB,CAAD,CAAhC;AAMA,MAAMoI,uBAAuB,GAAG/H,IAAI,CAAC;EACnC3C,IAAI,EAAEsD,MAAM,EADuB;EAEnCqH,aAAa,EAAE5G,QAAQ,CAACT,MAAM,EAAP,CAFY;EAGnCle,GAAG,EAAEwf,sBAH8B;EAInCgG,kBAAkB,EAAE7H,QAAQ,CAAC0H,kBAAD;AAJO,CAAD,CAApC;AAOA;AACA;AACA;;AACA,MAAMI,6BAA6B,GAAGzH,uBAAuB,CAC3D5hB,KAAK,CAACuiB,QAAQ,CAAC2G,uBAAD,CAAT,CADsD,CAA7D;AAIA;AACA;AACA;;AACA,MAAMI,0CAA0C,GAAG5H,aAAa,CAACI,MAAM,EAAP,CAAhE;AAEA,MAAMyH,0BAA0B,GAAGpI,IAAI,CAAC;EACtCpW,UAAU,EAAE/K,KAAK,CAAC2gB,MAAM,EAAP,CADqB;EAEtC1kB,OAAO,EAAEklB,IAAI,CAAC;IACZtZ,WAAW,EAAE7H,KAAK,CAAC2gB,MAAM,EAAP,CADN;IAEZ/Y,MAAM,EAAEuZ,IAAI,CAAC;MACX7Y,qBAAqB,EAAEwZ,MAAM,EADlB;MAEXtZ,yBAAyB,EAAEsZ,MAAM,EAFtB;MAGXrZ,2BAA2B,EAAEqZ,MAAM;IAHxB,CAAD,CAFA;IAOZ/Z,YAAY,EAAE/H,KAAK,CACjBmhB,IAAI,CAAC;MACH9X,QAAQ,EAAErJ,KAAK,CAAC8hB,MAAM,EAAP,CADZ;MAEHhhB,IAAI,EAAE6f,MAAM,EAFT;MAGHxY,cAAc,EAAE2Z,MAAM;IAHnB,CAAD,CADa,CAPP;IAcZha,eAAe,EAAE6Y,MAAM;EAdX,CAAD;AAFyB,CAAD,CAAvC;AAoBA,MAAM6I,uBAAuB,GAAGrI,IAAI,CAAC;EACnC4E,MAAM,EAAEzE,OAAO,EADoB;EAEnCrM,OAAO,EAAE0L,MAAM,EAFoB;EAGnCzd,SAAS,EAAEsd;AAHwB,CAAD,CAApC;AAMA,MAAMiJ,oBAAoB,GAAGtI,IAAI,CAAC;EAChC9X,QAAQ,EAAErJ,KAAK,CAACwgB,mBAAD,CADiB;EAEhC1f,IAAI,EAAE6f,MAAM,EAFoB;EAGhCzd,SAAS,EAAEsd;AAHqB,CAAD,CAAjC;AAMA,MAAMkJ,iBAAiB,GAAGxI,KAAK,CAAC,CAC9BuI,oBAD8B,EAE9BD,uBAF8B,CAAD,CAA/B;AAKA,MAAMG,wBAAwB,GAAGzI,KAAK,CAAC,CACrCC,IAAI,CAAC;EACH4E,MAAM,EAAEzE,OAAO,EADZ;EAEHrM,OAAO,EAAE0L,MAAM,EAFZ;EAGHzd,SAAS,EAAEyd,MAAM;AAHd,CAAD,CADiC,EAMrCQ,IAAI,CAAC;EACH9X,QAAQ,EAAErJ,KAAK,CAAC2gB,MAAM,EAAP,CADZ;EAEH7f,IAAI,EAAE6f,MAAM,EAFT;EAGHzd,SAAS,EAAEyd,MAAM;AAHd,CAAD,CANiC,CAAD,CAAtC;AAaA,MAAMiJ,sBAAsB,GAAGnJ,MAAM,CACnCiJ,iBADmC,EAEnCC,wBAFmC,EAGnC17B,KAAK,IAAI;EACP,IAAI,cAAcA,KAAlB,EAAyB;IACvB,OAAOR,MAAM,CAACQ,KAAD,EAAQw7B,oBAAR,CAAb;EADF,OAEO;IACL,OAAOh8B,MAAM,CAACQ,KAAD,EAAQu7B,uBAAR,CAAb;EACD;AARgC,EAArC;AAYA;AACA;AACA;;AACA,MAAMK,gCAAgC,GAAG1I,IAAI,CAAC;EAC5CpW,UAAU,EAAE/K,KAAK,CAAC2gB,MAAM,EAAP,CAD2B;EAE5C1kB,OAAO,EAAEklB,IAAI,CAAC;IACZtZ,WAAW,EAAE7H,KAAK,CAChBmhB,IAAI,CAAC;MACHrd,MAAM,EAAE0c,mBADL;MAEHjT,MAAM,EAAE0V,OAAO,EAFZ;MAGH90B,QAAQ,EAAE80B,OAAO;IAHd,CAAD,CADY,CADN;IAQZlb,YAAY,EAAE/H,KAAK,CAAC4pB,sBAAD,CARP;IASZ9hB,eAAe,EAAE6Y,MAAM;EATX,CAAD;AAF+B,CAAD,CAA7C;AAeA,MAAMmJ,kBAAkB,GAAG3I,IAAI,CAAC;EAC9B4I,YAAY,EAAEjI,MAAM,EADU;EAE9BkI,IAAI,EAAErJ,MAAM,EAFkB;EAG9BpL,KAAK,EAAEgM,QAAQ,CAACZ,MAAM,EAAP,CAHe;EAI9BsJ,aAAa,EAAEzE;AAJe,CAAD,CAA/B;AAOA;AACA;AACA;;AACA,MAAM0E,8BAA8B,GAAG/I,IAAI,CAAC;EAC1Cvd,GAAG,EAAEwf,sBADqC;EAE1C+G,GAAG,EAAErI,MAAM,EAF+B;EAG1CsI,iBAAiB,EAAE7I,QAAQ,CACzBgB,QAAQ,CACNviB,KAAK,CACHmhB,IAAI,CAAC;IACH9Y,KAAK,EAAEyZ,MAAM,EADV;IAEH/Z,YAAY,EAAE/H,KAAK,CACjBmhB,IAAI,CAAC;MACH9X,QAAQ,EAAErJ,KAAK,CAAC8hB,MAAM,EAAP,CADZ;MAEHhhB,IAAI,EAAE6f,MAAM,EAFT;MAGHxY,cAAc,EAAE2Z,MAAM;IAHnB,CAAD,CADa;EAFhB,CAAD,CADD,CADC,CADiB,CAHe;EAmB1CuI,WAAW,EAAErqB,KAAK,CAAC8hB,MAAM,EAAP,CAnBwB;EAoB1CwI,YAAY,EAAEtqB,KAAK,CAAC8hB,MAAM,EAAP,CApBuB;EAqB1CyI,WAAW,EAAEhJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC2gB,MAAM,EAAP,CAAN,CAAT,CArBqB;EAsB1C6J,gBAAgB,EAAEjJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC8pB,kBAAD,CAAN,CAAT,CAtBgB;EAuB1CW,iBAAiB,EAAElJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC8pB,kBAAD,CAAN,CAAT;AAvBe,CAAD,CAA3C;AA0BA;AACA;AACA;;AACA,MAAMY,oCAAoC,GAAGvJ,IAAI,CAAC;EAChDvd,GAAG,EAAEwf,sBAD2C;EAEhD+G,GAAG,EAAErI,MAAM,EAFqC;EAGhDsI,iBAAiB,EAAE7I,QAAQ,CACzBgB,QAAQ,CACNviB,KAAK,CACHmhB,IAAI,CAAC;IACH9Y,KAAK,EAAEyZ,MAAM,EADV;IAEH/Z,YAAY,EAAE/H,KAAK,CAAC4pB,sBAAD;EAFhB,CAAD,CADD,CADC,CADiB,CAHqB;EAahDS,WAAW,EAAErqB,KAAK,CAAC8hB,MAAM,EAAP,CAb8B;EAchDwI,YAAY,EAAEtqB,KAAK,CAAC8hB,MAAM,EAAP,CAd6B;EAehDyI,WAAW,EAAEhJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC2gB,MAAM,EAAP,CAAN,CAAT,CAf2B;EAgBhD6J,gBAAgB,EAAEjJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC8pB,kBAAD,CAAN,CAAT,CAhBsB;EAiBhDW,iBAAiB,EAAElJ,QAAQ,CAACgB,QAAQ,CAACviB,KAAK,CAAC8pB,kBAAD,CAAN,CAAT;AAjBqB,CAAD,CAAjD;AAoBA;AACA;AACA;;AACA,MAAMa,iBAAiB,GAAGjJ,aAAa,CACrCa,QAAQ,CACNpB,IAAI,CAAC;EACHyJ,SAAS,EAAEjK,MAAM,EADd;EAEHkK,iBAAiB,EAAElK,MAAM,EAFtB;EAGHmK,UAAU,EAAEhJ,MAAM,EAHf;EAIHrM,YAAY,EAAEzV,KAAK,CACjBmhB,IAAI,CAAC;IACHjX,WAAW,EAAEqf,0BADV;IAEH7c,IAAI,EAAE6V,QAAQ,CAAC2H,8BAAD;EAFX,CAAD,CADa,CAJhB;EAUHa,OAAO,EAAExJ,QAAQ,CACfvhB,KAAK,CACHmhB,IAAI,CAAC;IACHrd,MAAM,EAAE6c,MAAM,EADX;IAEHjP,QAAQ,EAAEoQ,MAAM,EAFb;IAGHY,WAAW,EAAEH,QAAQ,CAACT,MAAM,EAAP,CAHlB;IAIHkJ,UAAU,EAAEzI,QAAQ,CAAC5B,MAAM,EAAP;EAJjB,CAAD,CADD,CADU,CAVd;EAoBHkG,SAAS,EAAEtE,QAAQ,CAACT,MAAM,EAAP,CApBhB;EAqBHgB,WAAW,EAAEP,QAAQ,CAACT,MAAM,EAAP;AArBlB,CAAD,CADE,CAD6B,CAAvC;AA4BA;AACA;AACA;AACA;AACA;;AACA,MAAMmJ,0BAA0B,GAAGvJ,aAAa,CAC9Ca,QAAQ,CACNpB,IAAI,CAAC;EACHyJ,SAAS,EAAEjK,MAAM,EADd;EAEHkK,iBAAiB,EAAElK,MAAM,EAFtB;EAGHmK,UAAU,EAAEhJ,MAAM,EAHf;EAIHrM,YAAY,EAAEzV,KAAK,CACjBmhB,IAAI,CAAC;IACHjX,WAAW,EAAEqf,0BADV;IAEH7c,IAAI,EAAE6V,QAAQ,CAAC2H,8BAAD;EAFX,CAAD,CADa,CAJhB;EAUHa,OAAO,EAAExJ,QAAQ,CACfvhB,KAAK,CACHmhB,IAAI,CAAC;IACHrd,MAAM,EAAE6c,MAAM,EADX;IAEHjP,QAAQ,EAAEoQ,MAAM,EAFb;IAGHY,WAAW,EAAEH,QAAQ,CAACT,MAAM,EAAP,CAHlB;IAIHkJ,UAAU,EAAEzI,QAAQ,CAAC5B,MAAM,EAAP;EAJjB,CAAD,CADD,CADU,CAVd;EAoBHkG,SAAS,EAAEtE,QAAQ,CAACT,MAAM,EAAP;AApBhB,CAAD,CADE,CADsC,CAAhD;AA2BA;AACA;AACA;;AACA,MAAMoJ,2BAA2B,GAAGxJ,aAAa,CAC/Ca,QAAQ,CACNpB,IAAI,CAAC;EACHyJ,SAAS,EAAEjK,MAAM,EADd;EAEHkK,iBAAiB,EAAElK,MAAM,EAFtB;EAGHmK,UAAU,EAAEhJ,MAAM,EAHf;EAIH/W,UAAU,EAAE/K,KAAK,CAAC2gB,MAAM,EAAP,CAJd;EAKHkG,SAAS,EAAEtE,QAAQ,CAACT,MAAM,EAAP;AALhB,CAAD,CADE,CADuC,CAAjD;AAYA;AACA;AACA;;AACA,MAAMqJ,uBAAuB,GAAGzJ,aAAa,CAC3Ca,QAAQ,CACNpB,IAAI,CAAC;EACH3C,IAAI,EAAEsD,MAAM,EADT;EAEHpV,IAAI,EAAEwd,8BAFH;EAGHrD,SAAS,EAAEtF,QAAQ,CAACgB,QAAQ,CAACT,MAAM,EAAP,CAAT,CAHhB;EAIH5X,WAAW,EAAEqf;AAJV,CAAD,CADE,CADmC,CAA7C;AAWA;AACA;AACA;;AACA,MAAM6B,6BAA6B,GAAG1J,aAAa,CACjDa,QAAQ,CACNpB,IAAI,CAAC;EACH3C,IAAI,EAAEsD,MAAM,EADT;EAEH5X,WAAW,EAAE2f,gCAFV;EAGHnd,IAAI,EAAE6V,QAAQ,CAACmI,oCAAD,CAHX;EAIH7D,SAAS,EAAEtF,QAAQ,CAACgB,QAAQ,CAACT,MAAM,EAAP,CAAT;AAJhB,CAAD,CADE,CADyC,CAAnD;AAWA;AACA;AACA;AACA;AACA;;AACA,MAAMuJ,qCAAqC,GAAGzJ,uBAAuB,CACnET,IAAI,CAAC;EACHyJ,SAAS,EAAEjK,MAAM,EADd;EAEH9P,aAAa,EAAEsQ,IAAI,CAAC;IAClBmK,oBAAoB,EAAExJ,MAAM;EADV,CAAD;AAFhB,CAAD,CAD+D,CAArE;AASA;AACA;AACA;;AACA,MAAMyJ,2BAA2B,GAAG3J,uBAAuB,CACzDT,IAAI,CAAC;EACHyJ,SAAS,EAAEjK,MAAM,EADd;EAEH6K,oBAAoB,EAAE1J,MAAM;AAFzB,CAAD,CADqD,CAA3D;AAOA,MAAM2J,gBAAgB,GAAGtK,IAAI,CAAC;EAC5B3C,IAAI,EAAEsD,MAAM,EADgB;EAE5B4J,eAAe,EAAE5J,MAAM,EAFK;EAG5B6J,QAAQ,EAAE7J,MAAM,EAHY;EAI5B8J,gBAAgB,EAAE9J,MAAM;AAJI,CAAD,CAA7B;AAOA;AACA;AACA;;AACA,MAAM+J,oCAAoC,GAAGnK,aAAa,CACxD1hB,KAAK,CAACyrB,gBAAD,CADmD,CAA1D;AAIA;AACA;AACA;;AACA,MAAMK,yBAAyB,GAAGlK,uBAAuB,CACvDW,QAAQ,CACNpB,IAAI,CAAC;EACHtQ,aAAa,EAAEsQ,IAAI,CAAC;IAClBmK,oBAAoB,EAAExJ,MAAM;EADV,CAAD;AADhB,CAAD,CADE,CAD+C,CAAzD;AAUA;AACA;AACA;;AACA,MAAMiK,uBAAuB,GAAGrK,aAAa,CAACf,MAAM,EAAP,CAA7C;AAEA;AACA;AACA;;AACA,MAAMqL,wBAAwB,GAAGtK,aAAa,CAACf,MAAM,EAAP,CAA9C;AAEA;AACA;AACA;;AAmQA;AACA;AACA;;AACA,MAAMsL,UAAU,GAAG9K,IAAI,CAAC;EACtBvd,GAAG,EAAEwf,sBADiB;EAEtB/D,IAAI,EAAErf,KAAK,CAAC2gB,MAAM,EAAP,CAFW;EAGtB7V,SAAS,EAAE6V,MAAM;AAHK,CAAD,CAAvB;AAMA;AACA;AACA;;AAOA;AACA;AACA;;AACA,MAAMuL,sBAAsB,GAAG/K,IAAI,CAAC;EAClC5gB,MAAM,EAAEwhB,4BAA4B,CAACkK,UAAD,CADF;EAElCjF,YAAY,EAAElF,MAAM;AAFc,CAAD,CAAnC;AAKA;AACA;AACA;;AAyGA;AACA;AACA;;AACO,MAAMqK,UAAN,CAAiB;EACtB;;EACA;;EACA;;EACA;;EACA;;EACA;;EACA;;EACA;;EACA;;EACA;;EAGA;;EAIA;;EACA;;EACA;;EAYA;;EACA;;EAIA;;EACA;;EAIA;;EACA;;EAIA;;EACA;;EAIA;;EACA;;EAIA;;EACA;;EAIA;;EACA;;EAIA;AACF;AACA;AACA;AACA;AACA;EACEn+B,WAAW,CACTiyB,QADS,EAETmM,kBAFS,EAGT;IAAA,KA1EeC,WA0Ef;IAAA,KAzEeC,iCAyEf;IAAA,KAxEe5W,YAwEf;IAAA,KAvEe6W,cAuEf;IAAA,KAtEeC,UAsEf;IAAA,KArEeC,WAqEf;IAAA,KApEeC,gBAoEf;IAAA,KAnEeC,aAmEf;IAAA,KAlEeC,sBAkEf,GAlEiD,KAkEjD;IAAA,KAjEeC,sBAiEf,GA/DS,IA+DT;IAAA,KA9DeC,wBA8Df,GA5DS,IA4DT;IAAA,KA1DeC,wBA0Df,GA1DmD,KA0DnD;IAAA,KAzDeC,iBAyDf,GAzD4C,KAyD5C;IAAA,KAxDeC,cAwDf,GAnDE;MACFnlB,eAAe,EAAE,IADf;MAEFolB,SAAS,EAAE,CAFT;MAGFC,qBAAqB,EAAE,EAHrB;MAIFC,mBAAmB,EAAE;IAJnB,CAmDF;IAAA,KA5CeC,iCA4Cf,GA5C2D,CA4C3D;IAAA,KA3CeC,2BA2Cf,GAzCE,EAyCF;IAAA,KAvCeC,wCAuCf,GAvCkE,CAuClE;IAAA,KAtCeC,kCAsCf,GApCE,EAoCF;IAAA,KAlCeC,wBAkCf,GAlCkD,CAkClD;IAAA,KAjCeC,kBAiCf,GA/BE,EA+BF;IAAA,KA7BeC,6BA6Bf,GA7BuD,CA6BvD;IAAA,KA5BeC,uBA4Bf,GA1BE,EA0BF;IAAA,KAxBeC,wBAwBf,GAxBkD,CAwBlD;IAAA,KAvBeC,kBAuBf,GArBE,EAqBF;IAAA,KAnBeC,wBAmBf,GAnBkD,CAmBlD;IAAA,KAlBeC,kBAkBf,GAhBE,EAgBF;IAAA,KAdeC,8BAcf,GAdwD,CAcxD;IAAA,KAbeC,wBAaf,GAXE,EAWF;IACA,IAAIrT,GAAG,GAAG,IAAIqF,GAAJ,CAAQD,QAAR,CAAV;IACA,MAAME,QAAQ,GAAGtF,GAAG,CAACuF,QAAJvF,KAAiB,QAAlC;IAEA,IAAIsT,UAAJ;IACA,IAAIvK,WAAJ;IACA,IAAIC,eAAJ;IACA,IAAIC,uBAAJ;;IACA,IAAIsI,kBAAkB,IAAI,OAAOA,kBAAP,KAA8B,QAAxD,EAAkE;MAChE,KAAKC,WAAL,GAAmBD,kBAAnB;IADF,OAEO,IAAIA,kBAAJ,EAAwB;MAC7B,KAAKC,WAAL,GAAmBD,kBAAkB,CAAC3c,UAAtC;MACA,KAAK6c,iCAAL,GACEF,kBAAkB,CAACgC,gCADrB;MAEAD,UAAU,GAAG/B,kBAAkB,CAAC+B,UAAhCA;MACAvK,WAAW,GAAGwI,kBAAkB,CAACxI,WAAjCA;MACAC,eAAe,GAAGuI,kBAAkB,CAACvI,eAArCA;MACAC,uBAAuB,GAAGsI,kBAAkB,CAACtI,uBAA7CA;IACD;;IAED,KAAKpO,YAAL,GAAoBuK,QAApB;IACA,KAAKsM,cAAL,GAAsB4B,UAAU,IAAInO,gBAAgB,CAACC,QAAD,CAApD;IAEA,KAAKuM,UAAL,GAAkB7I,eAAe,CAC/B9I,GAAG,CAACprB,QAAJorB,EAD+B,EAE/BsF,QAF+B,EAG/ByD,WAH+B,EAI/BC,eAJ+B,EAK/BC,uBAL+B,CAAjC;IAOA,KAAK2I,WAAL,GAAmBjI,gBAAgB,CAAC,KAAKgI,UAAN,CAAnC;IACA,KAAKE,gBAAL,GAAwBhI,qBAAqB,CAAC,KAAK8H,UAAN,CAA7C;IAEA,KAAKG,aAAL,GAAqB,IAAI0B,MAAJ,CAAuB,KAAK9B,cAA5B,EAA4C;MAC/D+B,WAAW,EAAE,KADkD;MAE/DC,cAAc,EAAEC;IAF+C,CAA5C,CAArB;;IAIA,KAAK7B,aAAL,CAAmB8B,EAAnB,CAAsB,MAAtB,EAA8B,KAAKC,SAAL,CAAepoB,IAAf,CAAoB,IAApB,CAA9B;;IACA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CAAsB,OAAtB,EAA+B,KAAKE,UAAL,CAAgBroB,IAAhB,CAAqB,IAArB,CAA/B;;IACA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CAAsB,OAAtB,EAA+B,KAAKG,UAAL,CAAgBtoB,IAAhB,CAAqB,IAArB,CAA/B;;IACA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,qBADF,EAEE,KAAKI,wBAAL,CAA8BvoB,IAA9B,CAAmC,IAAnC,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,qBADF,EAEE,KAAKK,+BAAL,CAAqCxoB,IAArC,CAA0C,IAA1C,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,kBADF,EAEE,KAAKM,qBAAL,CAA2BzoB,IAA3B,CAAgC,IAAhC,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,0BADF,EAEE,KAAKO,4BAAL,CAAkC1oB,IAAlC,CAAuC,IAAvC,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,uBADF,EAEE,KAAKQ,0BAAL,CAAgC3oB,IAAhC,CAAqC,IAArC,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,kBADF,EAEE,KAAKS,qBAAL,CAA2B5oB,IAA3B,CAAgC,IAAhC,CAFF;;IAIA,KAAKqmB,aAAL,CAAmB8B,EAAnB,CACE,kBADF,EAEE,KAAKU,qBAAL,CAA2B7oB,IAA3B,CAAgC,IAAhC,CAFF;EAID;EAED;AACF;AACA;;;EACgB,IAAVmJ,UAAU,GAA2B;IACvC,OAAO,KAAK4c,WAAZ;EACD;EAED;AACF;AACA;;;EAC4B,MAApB+C,oBAAoB,CACxB9sB,SADwB,EAExBmN,UAFwB,EAGgB;IACxC,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAAC/sB,SAAS,CAACE,QAAVF,EAAD,CAAhB,EAAwCmN,UAAxC,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,YAAjB,EAA+B/vB,IAA/B,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY1N,uBAAuB,CAACE,MAAM,EAAP,CAAnC,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,+BACEmV,SAAS,CAACE,QAAVF,EADF,GAEE,IAFF,GAGErT,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACkB,MAAVgvB,UAAU,CACdjtB,SADc,EAEdmN,UAFc,EAGG;IACjB,OAAO,MAAM,KAAK2f,oBAAL,CAA0B9sB,SAA1B,EAAqCmN,UAArC,EACVyK,IADU,CACLjmB,CAAC,IAAIA,CAAC,CAAChG,KADF,EAEVuhC,KAFU,CAEJx+B,CAAC,IAAI;MACV,MAAM,IAAI7D,KAAJ,CACJ,sCAAsCmV,SAAS,CAACE,QAAVF,EAAtC,GAA6D,IAA7D,GAAoEtR,CADhE,CAAN;IAHS,EAAb;EAOD;EAED;AACF;AACA;;;EACoB,MAAZy+B,YAAY,CAACjR,IAAD,EAAuC;IACvD,MAAM8Q,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,cAAjB,EAAiC,CAACjO,IAAD,CAAjC,CAAxB;IACA,MAAMvvB,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACa,QAAQ,CAACT,MAAM,EAAP,CAAT,CAAzB,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,uCAAuCqxB,IAAvC,GAA8C,IAA9C,GAAqDvvB,GAAG,CAACoM,KAAJpM,CAAUgN,OAD3D,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;;;EAC4B,MAApBmvB,oBAAoB,GAAoB;IAC5C,MAAMJ,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACI,MAAM,EAAP,CAAzB,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,wCAAwC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAD9C,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC8B,MAAtBovB,sBAAsB,GAAoB;IAC9C,MAAML,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,wBAAjB,EAA2C,EAA3C,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYpK,aAAZ,CAAlB;;IACA,IAAI,WAAWj2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,0CAA0C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADhD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACiB,MAATqvB,SAAS,CACb1hB,MADa,EAE2B;IACxC,IAAI2hB,SAA0B,GAAG,EAAjC;;IACA,IAAI,OAAO3hB,MAAP,KAAkB,QAAtB,EAAgC;MAC9B2hB,SAAS,GAAG;QAACpgB,UAAU,EAAEvB;MAAb,CAAZ2hB;IADF,OAEO,IAAI3hB,MAAJ,EAAY;MACjB2hB,SAAS,GAAG,EACV,GAAG3hB,MADO;QAEVuB,UAAU,EAAGvB,MAAM,IAAIA,MAAM,CAACuB,UAAjBvB,IAAgC,KAAKuB;MAFxC,CAAZogB;IADK,OAKA;MACLA,SAAS,GAAG;QACVpgB,UAAU,EAAE,KAAKA;MADP,CAAZogB;IAGD;;IAED,MAAMP,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,WAAjB,EAA8B,CAACoD,SAAD,CAA9B,CAAxB;IACA,MAAM5gC,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYnK,kBAAZ,CAAlB;;IACA,IAAI,WAAWl2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,2BAA2B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA/C,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACsB,MAAduvB,cAAc,CAClBC,gBADkB,EAElBtgB,UAFkB,EAG2B;IAC7C,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACU,gBAAgB,CAACvtB,QAAjButB,EAAD,CAAhB,EAA+CtgB,UAA/C,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY1N,uBAAuB,CAAC4D,iBAAD,CAAnC,CAAlB;;IACA,IAAI,WAAWv2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,iCAAiC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAArD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC8B,MAAtByvB,sBAAsB,CAC1BC,YAD0B,EAE1BxgB,UAF0B,EAGmB;IAC7C,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACY,YAAY,CAACztB,QAAbytB,EAAD,CAAhB,EAA2CxgB,UAA3C,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,wBAAjB,EAA2C/vB,IAA3C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY1N,uBAAuB,CAAC4D,iBAAD,CAAnC,CAAlB;;IACA,IAAI,WAAWv2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,0CAA0C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADhD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC+B,MAAvB2vB,uBAAuB,CAC3BC,YAD2B,EAE3BpnB,MAF2B,EAG3B0G,UAH2B,EAQ3B;IACA,IAAI2gB,KAAY,GAAG,CAACD,YAAY,CAAC3tB,QAAb2tB,EAAD,CAAnB;;IACA,IAAI,UAAUpnB,MAAd,EAAsB;MACpBqnB,KAAK,CAAC/gC,IAAN+gC,CAAW;QAACpG,IAAI,EAAEjhB,MAAM,CAACihB,IAAPjhB,CAAYvG,QAAZuG;MAAP,CAAXqnB;IADF,OAEO;MACLA,KAAK,CAAC/gC,IAAN+gC,CAAW;QAACltB,SAAS,EAAE6F,MAAM,CAAC7F,SAAP6F,CAAiBvG,QAAjBuG;MAAZ,CAAXqnB;IACD;;IAED,MAAM1zB,IAAI,GAAG,KAAK2yB,UAAL,CAAgBe,KAAhB,EAAuB3gB,UAAvB,EAAmC,QAAnC,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYzJ,uBAAZ,CAAlB;;IACA,IAAI,WAAW52B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,mDACEgjC,YAAY,CAAC3tB,QAAb2tB,EADF,GAEE,IAFF,GAGElhC,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqC,MAA7B8vB,6BAA6B,CACjCF,YADiC,EAEjCpnB,MAFiC,EAGjC0G,UAHiC,EAQjC;IACA,IAAI2gB,KAAY,GAAG,CAACD,YAAY,CAAC3tB,QAAb2tB,EAAD,CAAnB;;IACA,IAAI,UAAUpnB,MAAd,EAAsB;MACpBqnB,KAAK,CAAC/gC,IAAN+gC,CAAW;QAACpG,IAAI,EAAEjhB,MAAM,CAACihB,IAAPjhB,CAAYvG,QAAZuG;MAAP,CAAXqnB;IADF,OAEO;MACLA,KAAK,CAAC/gC,IAAN+gC,CAAW;QAACltB,SAAS,EAAE6F,MAAM,CAAC7F,SAAP6F,CAAiBvG,QAAjBuG;MAAZ,CAAXqnB;IACD;;IAED,MAAM1zB,IAAI,GAAG,KAAK2yB,UAAL,CAAgBe,KAAhB,EAAuB3gB,UAAvB,EAAmC,YAAnC,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYtJ,6BAAZ,CAAlB;;IACA,IAAI,WAAW/2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,mDACEgjC,YAAY,CAAC3tB,QAAb2tB,EADF,GAEE,IAFF,GAGElhC,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlB+vB,kBAAkB,CACtBpiB,MADsB,EAEqC;IAC3D,MAAMqiB,GAAG,GAAG,EACV,GAAGriB,MADO;MAEVuB,UAAU,EAAGvB,MAAM,IAAIA,MAAM,CAACuB,UAAjBvB,IAAgC,KAAKuB;IAFxC,CAAZ;IAIA,MAAM/S,IAAI,GAAG6zB,GAAG,CAACxnB,MAAJwnB,IAAcA,GAAG,CAAC9gB,UAAlB8gB,GAA+B,CAACA,GAAD,CAA/BA,GAAuC,EAApD;IACA,MAAMjB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYrJ,2BAAZ,CAAlB;;IACA,IAAI,WAAWh3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,qCAAqC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAzD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;;;EAC+B,MAAvBiwB,uBAAuB,CAC3BC,WAD2B,EAE3BhhB,UAF2B,EAGqC;IAChE,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACoB,WAAW,CAACjuB,QAAZiuB,EAAD,CAAhB,EAA0ChhB,UAA1C,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY1J,6BAAZ,CAAlB;;IACA,IAAI,WAAW32B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,2CAA2C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADjD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACgC,MAAxBmwB,wBAAwB,CAC5BpuB,SAD4B,EAE5BmN,UAF4B,EAGgC;IAC5D,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAAC/sB,SAAS,CAACE,QAAVF,EAAD,CAAhB,EAAwCmN,UAAxC,EAAoD,QAApD,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAChB6hC,SADgB,EAEhB1N,uBAAuB,CAACW,QAAQ,CAAC2D,iBAAD,CAAT,CAFP,CAAlB;;IAIA,IAAI,WAAWj3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,sCACEmV,SAAS,CAACE,QAAVF,EADF,GAEE,IAFF,GAGErT,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC4B,MAApBowB,oBAAoB,CACxBruB,SADwB,EAExBmN,UAFwB,EAKxB;IACA,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CACX,CAAC/sB,SAAS,CAACE,QAAVF,EAAD,CADW,EAEXmN,UAFW,EAGX,YAHW,CAAb;;IAKA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAChB6hC,SADgB,EAEhB1N,uBAAuB,CAACW,QAAQ,CAAC8D,uBAAD,CAAT,CAFP,CAAlB;;IAIA,IAAI,WAAWp3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,sCACEmV,SAAS,CAACE,QAAVF,EADF,GAEE,IAFF,GAGErT,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACsB,MAAd8U,cAAc,CAClB/S,SADkB,EAElBmN,UAFkB,EAGmB;IACrC,IAAI;MACF,MAAMxgB,GAAG,GAAG,MAAM,KAAKyhC,wBAAL,CAA8BpuB,SAA9B,EAAyCmN,UAAzC,CAAlB;MACA,OAAOxgB,GAAG,CAAChB,KAAX;IAFF,EAGE,OAAO+C,CAAP,EAAU;MACV,MAAM,IAAI7D,KAAJ,CACJ,sCAAsCmV,SAAS,CAACE,QAAVF,EAAtC,GAA6D,IAA7D,GAAoEtR,CADhE,CAAN;IAGD;EACF;EAED;AACF;AACA;;;EAC+B,MAAvB4/B,uBAAuB,CAC3BC,UAD2B,EAE3BC,kBAF2B,EAGkC;IAC7D,MAAMlzB,IAAI,GAAGizB,UAAU,CAAClvB,GAAXkvB,CAAe/2B,GAAG,IAAIA,GAAG,CAAC0I,QAAJ1I,EAAtB+2B,CAAb;IAEA,IAAIphB,UAAJ;IACA,IAAIshB,QAAiC,GAAG,QAAxC;;IACA,IAAID,kBAAJ,EAAwB;MACtB,IAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;QAC1CrhB,UAAU,GAAGqhB,kBAAbrhB;QACAshB,QAAQ,GAAG,QAAXA;MAFF,OAGO;QACLthB,UAAU,GAAGqhB,kBAAkB,CAACrhB,UAAhCA;QACAshB,QAAQ,GAAGD,kBAAkB,CAACC,QAAnBD,IAA+B,QAA1CC;MACD;IACF;;IAED,MAAMr0B,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACzxB,IAAD,CAAhB,EAAwB6R,UAAxB,EAAoCshB,QAApC,CAAb;;IACA,MAAMzB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,qBAAjB,EAAwC/vB,IAAxC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAChB6hC,SADgB,EAEhB1N,uBAAuB,CAAC5hB,KAAK,CAACuiB,QAAQ,CAAC8D,uBAAD,CAAT,CAAN,CAFP,CAAlB;;IAIA,IAAI,WAAWp3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,qCAAqCyQ,IAArC,GAA4C,IAA5C,GAAmD3O,GAAG,CAACoM,KAAJpM,CAAUgN,OADzD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAJtR,CAAWhB,KAAlB;EACD;EAED;AACF;AACA;;;EAC0B,MAAlB+iC,kBAAkB,CACtB1uB,SADsB,EAEtBmN,UAFsB,EAGtBiP,KAHsB,EAIQ;IAC9B,MAAMhiB,IAAI,GAAG,KAAK2yB,UAAL,CACX,CAAC/sB,SAAS,CAACE,QAAVF,EAAD,CADW,EAEXmN,UAFW,EAGXzN,SAHW,EAIX0c,KAAK,KAAK1c,SAAV0c,GAAsB;MAACA;IAAD,CAAtBA,GAAgC1c,SAJrB,CAAb;;IAOA,MAAMstB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC6E,qBAAD,CAAzB,CAAlB;;IACA,IAAI,WAAWt3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACH,kCAAiCmV,SAAS,CAACE,QAAVF,EAAqB,KACrDrT,GAAG,CAACoM,KAAJpM,CAAUgN,OACX,EAHG,CAAN;IAKD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC0B,MAAlB0wB,kBAAkB,CACtB/tB,SADsB,EAEtB4tB,kBAFsB,EAG6C;IACnE,MAAMI,KAA8D,GAAG,EAAvE;IAEA,IAAIzhB,UAAJ;IACA,IAAIshB,QAAJ;;IACA,IAAID,kBAAJ,EAAwB;MACtB,IAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;QAC1CrhB,UAAU,GAAGqhB,kBAAbrhB;MADF,OAEO;QACLA,UAAU,GAAGqhB,kBAAkB,CAACrhB,UAAhCA;QACAshB,QAAQ,GAAGD,kBAAkB,CAACC,QAA9BA;;QAEA,IAAID,kBAAkB,CAACxmB,SAAvB,EAAkC;UAChC4mB,KAAK,CAAC5mB,SAAN4mB,GAAkBJ,kBAAkB,CAACxmB,SAArC4mB;QACD;;QACD,IAAIJ,kBAAkB,CAACK,OAAvB,EAAgC;UAC9BD,KAAK,CAACC,OAAND,GAAgBJ,kBAAkB,CAACK,OAAnCD;QACD;MACF;IACF;;IAED,MAAMx0B,IAAI,GAAG,KAAK2yB,UAAL,CACX,CAACnsB,SAAS,CAACV,QAAVU,EAAD,CADW,EAEXuM,UAFW,EAGXshB,QAAQ,IAAI,QAHD,EAIXG,KAJW,CAAb;;IAMA,MAAM5B,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC1hB,KAAK,CAACmmB,sBAAD,CAAN,CAAzB,CAAlB;;IACA,IAAI,WAAWl3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,6CACE+V,SAAS,CAACV,QAAVU,EADF,GAEE,IAFF,GAGEjU,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxB6wB,wBAAwB,CAC5BluB,SAD4B,EAE5B4tB,kBAF4B,EAQ5B;IACA,MAAMI,KAAsD,GAAG,EAA/D;IAEA,IAAIzhB,UAAJ;;IACA,IAAIqhB,kBAAJ,EAAwB;MACtB,IAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;QAC1CrhB,UAAU,GAAGqhB,kBAAbrhB;MADF,OAEO;QACLA,UAAU,GAAGqhB,kBAAkB,CAACrhB,UAAhCA;;QAEA,IAAIqhB,kBAAkB,CAACK,OAAvB,EAAgC;UAC9BD,KAAK,CAACC,OAAND,GAAgBJ,kBAAkB,CAACK,OAAnCD;QACD;MACF;IACF;;IAED,MAAMx0B,IAAI,GAAG,KAAK2yB,UAAL,CACX,CAACnsB,SAAS,CAACV,QAAVU,EAAD,CADW,EAEXuM,UAFW,EAGX,YAHW,EAIXyhB,KAJW,CAAb;;IAMA,MAAM5B,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAChB6hC,SADgB,EAEhB5N,aAAa,CAAC1hB,KAAK,CAACsmB,4BAAD,CAAN,CAFG,CAAlB;;IAIA,IAAI,WAAWr3B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,6CACE+V,SAAS,CAACV,QAAVU,EADF,GAEE,IAFF,GAGEjU,GAAG,CAACoM,KAAJpM,CAAUgN,OAJR,CAAN;IAMD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlBsP,kBAAkB,CACtB/E,SADsB,EAEtB2E,UAFsB,EAG2B;IACjD,IAAI4hB,gBAAJ;;IACA,IAAI;MACFA,gBAAgB,GAAGlvB,IAAI,CAACd,MAALc,CAAY2I,SAAZ3I,CAAnBkvB;IADF,EAEE,OAAOztB,GAAP,EAAY;MACZ,MAAM,IAAIzW,KAAJ,CAAU,uCAAuC2d,SAAjD,CAAN;IACD;;IAED9d,MAAM,CAACqkC,gBAAgB,CAAC1iC,MAAjB0iC,KAA4B,EAA7B,EAAiC,8BAAjC,CAANrkC;IAEA,MAAMiD,KAAK,GAAGqhC,IAAI,CAACC,GAALD,EAAd;IACA,MAAME,sBAAsB,GAAG/hB,UAAU,IAAI,KAAKA,UAAlD;IAEA,IAAIgiB,cAAJ;IACA,IAAI1V,QAAuD,GAAG,IAA9D;IACA,MAAM2V,cAAc,GAAG,IAAI1hB,OAAJ,CAAY,CAACC,OAAD,EAAUyI,MAAV,KAAqB;MACtD,IAAI;QACF+Y,cAAc,GAAG,KAAKE,WAAL,CACf7mB,SADe,EAEf,CAACvK,MAAD,EAA0BshB,OAA1B,KAA+C;UAC7C4P,cAAc,GAAGzvB,SAAjByvB;UACA1V,QAAQ,GAAG;YACT8F,OADS;YAET5zB,KAAK,EAAEsS;UAFE,CAAXwb;UAIA9L,OAAO,CAAC,IAAD,CAAPA;QARa,GAUfuhB,sBAVe,CAAjBC;MADF,EAaE,OAAO7tB,GAAP,EAAY;QACZ8U,MAAM,CAAC9U,GAAD,CAAN8U;MACD;IAhBoB,EAAvB;IAmBA,IAAIiH,SAAS,GAAG,KAAK2M,iCAAL,IAA0C,KAAK,IAA/D;;IACA,QAAQkF,sBAAR;MACE,KAAK,WAAL;MACA,KAAK,QAAL;MACA,KAAK,QAAL;MACA,KAAK,WAAL;MACA,KAAK,cAAL;QAAqB;UACnB7R,SAAS,GAAG,KAAK2M,iCAAL,IAA0C,KAAK,IAA3D3M;UACA;QACD;IARH;;IAeA,IAAI;MACF,MAAMD,cAAc,CAACgS,cAAD,EAAiB/R,SAAjB,CAApB;IADF,UAEU;MACR,IAAI8R,cAAJ,EAAoB;QAClB,KAAKG,uBAAL,CAA6BH,cAA7B;MACD;IACF;;IAED,IAAI1V,QAAQ,KAAK,IAAjB,EAAuB;MACrB,MAAM8V,QAAQ,GAAG,CAACP,IAAI,CAACC,GAALD,KAAarhC,KAAd,IAAuB,IAAxC;MACA,MAAM,IAAI9C,KAAJ,CACH,oCAAmC0kC,QAAQ,CAACC,OAATD,CAClC,CADkCA,CAElC,sEAAqE/mB,SAAU,0CAH7E,CAAN;IAKD;;IAED,OAAOiR,QAAP;EACD;EAED;AACF;AACA;;;EACuB,MAAfgW,eAAe,GAAgC;IACnD,MAAMzC,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,iBAAjB,EAAoC,EAApC,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC1hB,KAAK,CAACioB,iBAAD,CAAN,CAAzB,CAAlB;;IACA,IAAI,WAAWh5B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,kCAAkC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAtD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACuB,MAAfyxB,eAAe,CAACviB,UAAD,EAAsD;IACzE,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,iBAAjB,EAAoC/vB,IAApC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYxG,eAAZ,CAAlB;;IACA,IAAI,WAAW75B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,kCAAkC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAtD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACe,MAAP0xB,OAAO,CAACxiB,UAAD,EAA2C;IACtD,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,SAAjB,EAA4B/vB,IAA5B,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACI,MAAM,EAAP,CAAzB,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,yBAAyB8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA7C,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACqB,MAAb2xB,aAAa,CAACziB,UAAD,EAA2C;IAC5D,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,eAAjB,EAAkC/vB,IAAlC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACf,MAAM,EAAP,CAAzB,CAAlB;;IACA,IAAI,WAAW1xB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,gCAAgC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAApD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACsB,MAAd4xB,cAAc,CAClBC,SADkB,EAElBC,KAFkB,EAGS;IAC3B,MAAM31B,IAAI,GAAG,CAAC01B,SAAD,EAAYC,KAAZ,CAAb;IACA,MAAM/C,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC1hB,KAAK,CAACwgB,mBAAD,CAAN,CAAzB,CAAlB;;IACA,IAAI,WAAWvxB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,iCAAiC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAArD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlB+xB,kBAAkB,CACtBxnB,SADsB,EAEtBoD,MAFsB,EAGkC;IACxD,MAAM;MAAC2T,OAAD;MAAU5zB,KAAK,EAAE4a;IAAjB,IAA2B,MAAM,KAAK0pB,oBAAL,CACrC,CAACznB,SAAD,CADqC,EAErCoD,MAFqC,CAAvC;IAIAlhB,MAAM,CAAC6b,MAAM,CAACla,MAAPka,KAAkB,CAAnB,CAAN7b;IACA,MAAMiB,KAAK,GAAG4a,MAAM,CAAC,CAAD,CAApB;IACA,OAAO;MAACgZ,OAAD;MAAU5zB;IAAV,CAAP;EACD;EAED;AACF;AACA;;;EAC4B,MAApBskC,oBAAoB,CACxBxnB,UADwB,EAExBmD,MAFwB,EAGuC;IAC/D,MAAM1Q,MAAa,GAAG,CAACuN,UAAD,CAAtB;;IACA,IAAImD,MAAJ,EAAY;MACV1Q,MAAM,CAACnO,IAAPmO,CAAY0Q,MAAZ1Q;IACD;;IACD,MAAM8xB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,sBAAjB,EAAyCjvB,MAAzC,CAAxB;IACA,MAAMvO,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYjG,6BAAZ,CAAlB;;IACA,IAAI,WAAWp6B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,qCAAqC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAzD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC2B,MAAnBiyB,mBAAmB,CAAC/iB,UAAD,EAA2C;IAClE,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,qBAAjB,EAAwC/vB,IAAxC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACI,MAAM,EAAP,CAAzB,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,sCAAsC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA1D,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,MAAdkyB,cAAc,CAAChjB,UAAD,EAA2C;IAC7D,MAAMlP,MAAM,GAAG,MAAM,KAAKqvB,SAAL,CAAe;MAClCngB,UADkC;MAElCijB,iCAAiC,EAAE;IAFD,CAAf,CAArB;IAIA,OAAOnyB,MAAM,CAACtS,KAAPsS,CAAa6kB,KAApB;EACD;EAED;AACF;AACA;;;EAC4B,MAApBuN,oBAAoB,CACxBljB,UADwB,EAEI;IAC5B,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,sBAAjB,EAAyC/vB,IAAzC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYxK,6BAAZ,CAAlB;;IACA,IAAI,WAAW71B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,8BAA8B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAlD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlBqyB,kBAAkB,CACtBC,SADsB,EAEtBnU,KAFsB,EAGtBjP,UAHsB,EAIe;IACrC,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CACX,CAACwD,SAAS,CAAClxB,GAAVkxB,CAAc/uB,MAAM,IAAIA,MAAM,CAACtB,QAAPsB,EAAxB+uB,CAAD,CADW,EAEXpjB,UAFW,EAGXzN,SAHW,EAIX;MACE0c;IADF,CAJW,CAAb;;IAQA,MAAM4Q,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYhN,wBAAZ,CAAlB;;IACA,IAAI,WAAWrzB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,qCAAqC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAzD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACoB,MAAZuyB,YAAY,CAACrjB,UAAD,EAA8C;IAC9D,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,cAAjB,EAAiC/vB,IAAjC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYvK,qBAAZ,CAAlB;;IACA,IAAI,WAAW91B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,+BAA+B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAnD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACwB,MAAhBwyB,gBAAgB,GAA2B;IAC/C,MAAMzD,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,kBAAjB,EAAqC,EAArC,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYtK,yBAAZ,CAAlB;;IACA,IAAI,WAAW/1B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,mCAAmC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAvD,CAAN;IACD;;IACD,MAAM+2B,aAAa,GAAG/jC,GAAG,CAACsR,MAA1B;IACA,OAAO,IAAI0d,aAAJ,CACL+U,aAAa,CAAC9U,aADT,EAEL8U,aAAa,CAAC7U,wBAFT,EAGL6U,aAAa,CAAC5U,MAHT,EAIL4U,aAAa,CAAC3U,gBAJT,EAKL2U,aAAa,CAAC1U,eALT,CAAP;EAOD;EAED;AACF;AACA;AACA;;;EACyB,MAAjB2U,iBAAiB,GAA4B;IACjD,MAAM3D,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYrK,0BAAZ,CAAlB;;IACA,IAAI,WAAWh2B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,oCAAoC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;;;EACyC,MAAjC4U,iCAAiC,CACrC1L,UADqC,EAErCgG,UAFqC,EAGpB;IACjB,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAAC5lB,UAAD,CAAhB,EAA8BgG,UAA9B,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CACtB,mCADsB,EAEtB/vB,IAFsB,CAAxB;IAIA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYhG,0CAAZ,CAAlB;;IACA,IAAI,WAAWr6B,GAAf,EAAoB;MAClB6N,OAAO,CAACM,IAARN,CAAa,oDAAbA;MACA,OAAO,CAAP;IACD;;IACD,OAAO7N,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACoC,MAA5B2yB,4BAA4B,CAChCzjB,UADgC,EAIhC;IACA,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYjE,qCAAZ,CAAlB;;IACA,IAAI,WAAWp8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,qCAAqC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAzD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;;;EACmC,MAA3B4yB,2BAA2B,CAC/Bd,KAD+B,EAEH;IAC5B,MAAM31B,IAAI,GAAG,KAAK2yB,UAAL,CAAgBgD,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,EAAlC,CAAb;;IACA,MAAM/C,SAAS,GAAG,MAAM,KAAK7C,WAAL,CACtB,6BADsB,EAEtB/vB,IAFsB,CAAxB;IAIA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYzD,oCAAZ,CAAlB;;IACA,IAAI,WAAW58B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,+CAA+C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADrD,CAAN;IAGD;;IAED,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACoC,MAA5B6yB,4BAA4B,CAChCxI,SADgC,EAEhCnb,UAFgC,EAGsB;IACtD,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACzE,SAAD,CAAhB,EAA6Bnb,UAA7B,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CACtB,8BADsB,EAEtB/vB,IAFsB,CAAxB;IAKA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYxD,yBAAZ,CAAlB;;IACA,IAAI,WAAW78B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,mCAAmC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAvD,CAAN;IACD;;IACD,MAAM;MAAC4lB,OAAD;MAAU5zB;IAAV,IAAmBgB,GAAG,CAACsR,MAA7B;IACA,OAAO;MACLshB,OADK;MAEL5zB,KAAK,EAAEA,KAAK,KAAK,IAAVA,GAAiBA,KAAK,CAAC4iB,aAAvB5iB,GAAuC;IAFzC,CAAP;EAID;EAED;AACF;AACA;;;EACwB,MAAhBolC,gBAAgB,CACpBp3B,OADoB,EAEpBwT,UAFoB,EAGoB;IACxC,MAAM6jB,WAAW,GAAGr3B,OAAO,CAACkF,SAARlF,GAAoBxM,QAApBwM,CAA6B,QAA7BA,CAApB;;IACA,MAAMS,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,CAACiE,WAAD,CAAhB,EAA+B7jB,UAA/B,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,kBAAjB,EAAqC/vB,IAArC,CAAxB;IAEA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY1N,uBAAuB,CAACW,QAAQ,CAACT,MAAM,EAAP,CAAT,CAAnC,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,yBAAyB8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA7C,CAAN;IACD;;IACD,IAAIhN,GAAG,CAACsR,MAAJtR,KAAe,IAAnB,EAAyB;MACvB,MAAM,IAAI9B,KAAJ,CAAU,mBAAV,CAAN;IACD;;IACD,OAAO8B,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC0B,MAAlBgzB,kBAAkB,CACtB9jB,UADsB,EAEyC;IAC/D,IAAI;MACF,MAAMxgB,GAAG,GAAG,MAAM,KAAKikC,4BAAL,CAAkCzjB,UAAlC,CAAlB;MACA,OAAOxgB,GAAG,CAAChB,KAAX;IAFF,EAGE,OAAO+C,CAAP,EAAU;MACV,MAAM,IAAI7D,KAAJ,CAAU,qCAAqC6D,CAA/C,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;;;EAC0B,MAAlBwiC,kBAAkB,CACtB/jB,UADsB,EAEyC;IAC/D,IAAI;MACF,MAAMxgB,GAAG,GAAG,MAAM,KAAKwkC,4BAAL,CAAkChkB,UAAlC,CAAlB;MACA,OAAOxgB,GAAG,CAAChB,KAAX;IAFF,EAGE,OAAO+C,CAAP,EAAU;MACV,MAAM,IAAI7D,KAAJ,CAAU,qCAAqC6D,CAA/C,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;;;EACoC,MAA5ByiC,4BAA4B,CAChChkB,UADgC,EAIhC;IACA,MAAM/S,IAAI,GAAG,KAAK2yB,UAAL,CAAgB,EAAhB,EAAoB5f,UAApB,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,oBAAjB,EAAuC/vB,IAAvC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY/D,2BAAZ,CAAlB;;IACA,IAAI,WAAWt8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,qCAAqC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAzD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACkB,MAAVmzB,UAAU,GAAqB;IACnC,MAAMpE,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,YAAjB,EAA+B,EAA/B,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC6B,aAAD,CAAzB,CAAlB;;IACA,IAAI,WAAWt0B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,4BAA4B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAhD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACsB,MAAdozB,cAAc,GAAoB;IACtC,MAAMrE,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC,EAAnC,CAAxB;IACA,MAAMx9B,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAACf,MAAM,EAAP,CAAzB,CAAlB;;IACA,IAAI,WAAW1xB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,iCAAiC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAArD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACgB,MAARqzB,QAAQ,CACZpV,IADY,EAEZ5T,IAFY,EAGmB;IAC/B,MAAMlO,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAACrV,IAAD,CADW,EAEX5T,IAAI,IAAIA,IAAI,CAAC6E,UAFF,CAAb;;IAIA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,UAAjB,EAA6B/vB,IAA7B,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY3E,iBAAZ,CAAlB;;IAEA,IAAI,WAAW17B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,oCAAoC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxD,CAAN;IACD;;IAED,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;IACA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;IAEb,OAAO,EACL,GAAGA,MADE;MAELkV,YAAY,EAAElV,MAAM,CAACkV,YAAPlV,CAAoBoB,GAApBpB,CAAwB,SAAyB;QAAA,IAAxB;UAAC2J,WAAD;UAAcwC;QAAd,CAAwB;QAC7D,MAAMzQ,OAAO,GAAG,IAAI0L,OAAJ,CAAYuC,WAAW,CAACjO,OAAxB,CAAhB;QACA,OAAO;UACLyQ,IADK;UAELxC,WAAW,EAAE,EACX,GAAGA,WADQ;YAEXjO;UAFW;QAFR,CAAP;MAFY;IAFT,CAAP;EAaD;EAED;AACF;AACA;;;EACsB,MAAd63B,cAAc,CAClBhpB,SADkB,EAElBF,IAFkB,EAGmB;IACrC,MAAMlO,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAAC/oB,SAAD,CADW,EAEXF,IAAI,IAAIA,IAAI,CAAC6E,UAFF,CAAb;;IAIA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYnE,uBAAZ,CAAlB;;IACA,IAAI,WAAWl8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,gCAAgC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAApD,CAAN;IACD;;IAED,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;IACA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;IAEb,OAAO,EACL,GAAGA,MADE;MAEL2J,WAAW,EAAE,EACX,GAAG3J,MAAM,CAAC2J,WADC;QAEXjO,OAAO,EAAE,IAAI0L,OAAJ,CAAYpH,MAAM,CAAC2J,WAAP3J,CAAmBtE,OAA/B;MAFE;IAFR,CAAP;EAOD;EAED;AACF;AACA;;;EAC4B,MAApB83B,oBAAoB,CACxBjpB,SADwB,EAExB2E,UAFwB,EAGoB;IAC5C,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAAC/oB,SAAD,CADW,EAEX2E,UAFW,EAGX,YAHW,CAAb;;IAKA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC/vB,IAAnC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYlE,6BAAZ,CAAlB;;IACA,IAAI,WAAWn8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,gCAAgC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAApD,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC6B,MAArByzB,qBAAqB,CACzBjpB,UADyB,EAEzB0E,UAFyB,EAGuB;IAChD,MAAMmV,KAAK,GAAG7Z,UAAU,CAACpJ,GAAXoJ,CAAeD,SAAS,IAAI;MACxC,MAAMpO,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAAC/oB,SAAD,CADW,EAEX2E,UAFW,EAGX,YAHW,CAAb;;MAKA,OAAO;QACLoV,UAAU,EAAE,gBADP;QAELnoB;MAFK,CAAP;IANY,EAAd;IAYA,MAAM4yB,SAAS,GAAG,MAAM,KAAK5C,gBAAL,CAAsB9H,KAAtB,CAAxB;IACA,MAAM31B,GAAG,GAAGqgC,SAAS,CAAC3tB,GAAV2tB,CAAeA,SAAD,IAAoB;MAC5C,MAAMrgC,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYlE,6BAAZ,CAAlB;;MACA,IAAI,WAAWn8B,GAAf,EAAoB;QAClB,MAAM,IAAI9B,KAAJ,CAAU,iCAAiC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAArD,CAAN;MACD;;MACD,OAAOhN,GAAG,CAACsR,MAAX;IALU,EAAZ;IAQA,OAAOtR,GAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACyB,MAAjBglC,iBAAiB,CACrBzV,IADqB,EAErB/O,UAFqB,EAGI;IACzB,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CAAgC,CAACrV,IAAD,CAAhC,EAAwC/O,UAAxC,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,mBAAjB,EAAsC/vB,IAAtC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYrE,0BAAZ,CAAlB;;IAEA,IAAI,WAAWh8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,oCAAoC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxD,CAAN;IACD;;IAED,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;;IACA,IAAI,CAACA,MAAL,EAAa;MACX,MAAM,IAAIpT,KAAJ,CAAU,qBAAqBqxB,IAArB,GAA4B,YAAtC,CAAN;IACD;;IAED,MAAM0V,KAAK,GAAG,EACZ,GAAG3zB,MADS;MAEZkV,YAAY,EAAElV,MAAM,CAACkV,YAAPlV,CAAoBoB,GAApBpB,CAAwB,SAAyB;QAAA,IAAxB;UAAC2J,WAAD;UAAcwC;QAAd,CAAwB;QAC7D,MAAMzQ,OAAO,GAAG,IAAI0L,OAAJ,CAAYuC,WAAW,CAACjO,OAAxB,CAAhB;QACA,OAAO;UACLyQ,IADK;UAELxC,WAAW,EAAE,EACX,GAAGA,WADQ;YAEXjO;UAFW;QAFR,CAAP;MAFY;IAFF,CAAd;IAcA,OAAO,EACL,GAAGi4B,KADE;MAELze,YAAY,EAAEye,KAAK,CAACze,YAANye,CAAmBvyB,GAAnBuyB,CAAuB,SAAyB;QAAA,IAAxB;UAAChqB,WAAD;UAAcwC;QAAd,CAAwB;QAC5D,OAAO;UACLA,IADK;UAELxC,WAAW,EAAEW,WAAW,CAAC2D,QAAZ3D,CACXX,WAAW,CAACjO,OADD4O,EAEXX,WAAW,CAACa,UAFDF;QAFR,CAAP;MADY;IAFT,CAAP;EAYD;EAED;AACF;AACA;;;EACiB,MAATspB,SAAS,CACb/B,SADa,EAEbgC,OAFa,EAGb3kB,UAHa,EAIW;IACxB,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACXO,OAAO,KAAKpyB,SAAZoyB,GAAwB,CAAChC,SAAD,EAAYgC,OAAZ,CAAxBA,GAA+C,CAAChC,SAAD,CADpC,EAEX3iB,UAFW,CAAb;;IAIA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,WAAjB,EAA8B/vB,IAA9B,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY5N,aAAa,CAAC1hB,KAAK,CAAC8hB,MAAM,EAAP,CAAN,CAAzB,CAAlB;;IACA,IAAI,WAAW7yB,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,2BAA2B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA/C,CAAN;IACD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlB8zB,kBAAkB,CACtB7V,IADsB,EAEtB/O,UAFsB,EAGI;IAC1B,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAACrV,IAAD,CADW,EAEX/O,UAFW,EAGXzN,SAHW,EAIX;MACEsyB,kBAAkB,EAAE,YADtB;MAEEvJ,OAAO,EAAE;IAFX,CAJW,CAAb;;IASA,MAAMuE,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,UAAjB,EAA6B/vB,IAA7B,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYpE,2BAAZ,CAAlB;;IACA,IAAI,WAAWj8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,0BAA0B8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAA9C,CAAN;IACD;;IACD,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;;IACA,IAAI,CAACA,MAAL,EAAa;MACX,MAAM,IAAIpT,KAAJ,CAAU,WAAWqxB,IAAX,GAAkB,YAA5B,CAAN;IACD;;IACD,OAAOje,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACmC,MAA3Bg0B,2BAA2B,CAC/B/V,IAD+B,EAE/B/O,UAF+B,EAGL;IAC1B,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAACrV,IAAD,CADW,EAEX/O,UAFW,EAGXzN,SAHW,EAIX;MACEsyB,kBAAkB,EAAE,YADtB;MAEEvJ,OAAO,EAAE;IAFX,CAJW,CAAb;;IASA,MAAMuE,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,mBAAjB,EAAsC/vB,IAAtC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYpE,2BAAZ,CAAlB;;IACA,IAAI,WAAWj8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,oCAAoC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxD,CAAN;IACD;;IACD,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;;IACA,IAAI,CAACA,MAAL,EAAa;MACX,MAAM,IAAIpT,KAAJ,CAAU,qBAAqBqxB,IAArB,GAA4B,YAAtC,CAAN;IACD;;IACD,OAAOje,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC+B,MAAvBi0B,uBAAuB,CAC3B1pB,SAD2B,EAE3B2E,UAF2B,EAGW;IACtC,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CAAgC,CAAC/oB,SAAD,CAAhC,EAA6C2E,UAA7C,CAAb;;IACA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYnE,uBAAZ,CAAlB;;IACA,IAAI,WAAWl8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CAAU,gCAAgC8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAApD,CAAN;IACD;;IAED,MAAMsE,MAAM,GAAGtR,GAAG,CAACsR,MAAnB;IACA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;IAEb,MAAMtE,OAAO,GAAG,IAAI0L,OAAJ,CAAYpH,MAAM,CAAC2J,WAAP3J,CAAmBtE,OAA/B,CAAhB;IACA,MAAM8O,UAAU,GAAGxK,MAAM,CAAC2J,WAAP3J,CAAmBwK,UAAtC;IACA,OAAO,EACL,GAAGxK,MADE;MAEL2J,WAAW,EAAEW,WAAW,CAAC2D,QAAZ3D,CAAqB5O,OAArB4O,EAA8BE,UAA9BF;IAFR,CAAP;EAID;EAED;AACF;AACA;AACA;AACA;;;EACqC,MAA7B4pB,6BAA6B,CACjC3pB,SADiC,EAEjC2E,UAFiC,EAGW;IAC5C,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAAC/oB,SAAD,CADW,EAEX2E,UAFW,EAGX,YAHW,CAAb;;IAKA,MAAM6f,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYlE,6BAAZ,CAAlB;;IACA,IAAI,WAAWn8B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,0CAA0C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADhD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsC,MAA9Bm0B,8BAA8B,CAClC3pB,UADkC,EAElC0E,UAFkC,EAGc;IAChD,MAAMmV,KAAK,GAAG7Z,UAAU,CAACpJ,GAAXoJ,CAAeD,SAAS,IAAI;MACxC,MAAMpO,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAAC/oB,SAAD,CADW,EAEX2E,UAFW,EAGX,YAHW,CAAb;;MAKA,OAAO;QACLoV,UAAU,EAAE,yBADP;QAELnoB;MAFK,CAAP;IANY,EAAd;IAYA,MAAM4yB,SAAS,GAAG,MAAM,KAAK5C,gBAAL,CAAsB9H,KAAtB,CAAxB;IACA,MAAM31B,GAAG,GAAGqgC,SAAS,CAAC3tB,GAAV2tB,CAAeA,SAAD,IAAoB;MAC5C,MAAMrgC,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYlE,6BAAZ,CAAlB;;MACA,IAAI,WAAWn8B,GAAf,EAAoB;QAClB,MAAM,IAAI9B,KAAJ,CACJ,2CAA2C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADjD,CAAN;MAGD;;MACD,OAAOhN,GAAG,CAACsR,MAAX;IAPU,EAAZ;IAUA,OAAOtR,GAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwC,MAAhC0lC,gCAAgC,CACpCjxB,OADoC,EAEpC0uB,SAFoC,EAGpCgC,OAHoC,EAIE;IACtC,IAAI9zB,OAAY,GAAG,EAAnB;IAEA,IAAIs0B,mBAAmB,GAAG,MAAM,KAAKjF,sBAAL,EAAhC;;IACA,OAAO,EAAE,WAAWrvB,OAAb,CAAP,EAA8B;MAC5B8xB,SAAS;;MACT,IAAIA,SAAS,IAAI,CAAbA,IAAkBA,SAAS,GAAGwC,mBAAlC,EAAuD;QACrD;MACD;;MAED,IAAI;QACF,MAAMV,KAAK,GAAG,MAAM,KAAKK,2BAAL,CAClBnC,SADkB,EAElB,WAFkB,CAApB;;QAIA,IAAI8B,KAAK,CAACnpB,UAANmpB,CAAiBvlC,MAAjBulC,GAA0B,CAA9B,EAAiC;UAC/B5zB,OAAO,CAACu0B,KAARv0B,GACE4zB,KAAK,CAACnpB,UAANmpB,CAAiBA,KAAK,CAACnpB,UAANmpB,CAAiBvlC,MAAjBulC,GAA0B,CAA3CA,EAA8CzkC,QAA9CykC,EADF5zB;QAED;MARH,EASE,OAAOsD,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYzW,KAAfyW,IAAwBA,GAAG,CAAC3H,OAAJ2H,CAAY4H,QAAZ5H,CAAqB,SAArBA,CAA5B,EAA6D;UAC3D;QADF,OAEO;UACL,MAAMA,GAAN;QACD;MACF;IACF;;IAED,IAAIkxB,oBAAoB,GAAG,MAAM,KAAK7C,OAAL,CAAa,WAAb,CAAjC;;IACA,OAAO,EAAE,YAAY3xB,OAAd,CAAP,EAA+B;MAC7B8zB,OAAO;;MACP,IAAIA,OAAO,GAAGU,oBAAd,EAAoC;QAClC;MACD;;MAED,IAAI;QACF,MAAMZ,KAAK,GAAG,MAAM,KAAKK,2BAAL,CAAiCH,OAAjC,CAApB;;QACA,IAAIF,KAAK,CAACnpB,UAANmpB,CAAiBvlC,MAAjBulC,GAA0B,CAA9B,EAAiC;UAC/B5zB,OAAO,CAACy0B,MAARz0B,GACE4zB,KAAK,CAACnpB,UAANmpB,CAAiBA,KAAK,CAACnpB,UAANmpB,CAAiBvlC,MAAjBulC,GAA0B,CAA3CA,EAA8CzkC,QAA9CykC,EADF5zB;QAED;MALH,EAME,OAAOsD,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYzW,KAAfyW,IAAwBA,GAAG,CAAC3H,OAAJ2H,CAAY4H,QAAZ5H,CAAqB,SAArBA,CAA5B,EAA6D;UAC3D;QADF,OAEO;UACL,MAAMA,GAAN;QACD;MACF;IACF;;IAED,MAAMoxB,sBAAsB,GAAG,MAAM,KAAKC,iCAAL,CACnCvxB,OADmC,EAEnCpD,OAFmC,CAArC;IAIA,OAAO00B,sBAAsB,CAACrzB,GAAvBqzB,CAA2B75B,IAAI,IAAIA,IAAI,CAAC2P,SAAxCkqB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyC,MAAjCC,iCAAiC,CACrCvxB,OADqC,EAErCpD,OAFqC,EAGrCmP,UAHqC,EAIG;IACxC,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAACnwB,OAAO,CAAClB,QAARkB,EAAD,CADW,EAEX+L,UAFW,EAGXzN,SAHW,EAIX1B,OAJW,CAAb;;IAMA,MAAMgvB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CACtB,mCADsB,EAEtB/vB,IAFsB,CAAxB;IAIA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY3I,0CAAZ,CAAlB;;IACA,IAAI,WAAW13B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,qDAAqD8B,GAAG,CAACoM,KAAJpM,CAAUgN,OAD3D,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC+B,MAAvB20B,uBAAuB,CAC3BxxB,OAD2B,EAE3BpD,OAF2B,EAG3BmP,UAH2B,EAIa;IACxC,MAAM/S,IAAI,GAAG,KAAKm3B,0BAAL,CACX,CAACnwB,OAAO,CAAClB,QAARkB,EAAD,CADW,EAEX+L,UAFW,EAGXzN,SAHW,EAIX1B,OAJW,CAAb;;IAMA,MAAMgvB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,yBAAjB,EAA4C/vB,IAA5C,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYxI,gCAAZ,CAAlB;;IACA,IAAI,WAAW73B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,2CAA2C8B,GAAG,CAACoM,KAAJpM,CAAUgN,OADjD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EAC0B,MAAlB40B,kBAAkB,CACtBpkB,YADsB,EAEtBtB,UAFsB,EAG+B;IACrD,MAAM;MAACoS,OAAD;MAAU5zB,KAAK,EAAEmnC;IAAjB,IAAgC,MAAM,KAAK1E,wBAAL,CAC1C3f,YAD0C,EAE1CtB,UAF0C,CAA5C;IAKA,IAAIxhB,KAAK,GAAG,IAAZ;;IACA,IAAImnC,WAAW,KAAK,IAApB,EAA0B;MACxBnnC,KAAK,GAAG0iB,YAAY,CAACG,eAAbH,CAA6BykB,WAAW,CAACt0B,IAAzC6P,CAAR1iB;IACD;;IAED,OAAO;MACL4zB,OADK;MAEL5zB;IAFK,CAAP;EAID;EAED;AACF;AACA;;;EACgB,MAARonC,QAAQ,CACZtkB,YADY,EAEZtB,UAFY,EAGkB;IAC9B,OAAO,MAAM,KAAK0lB,kBAAL,CAAwBpkB,YAAxB,EAAsCtB,UAAtC,EACVyK,IADU,CACLjmB,CAAC,IAAIA,CAAC,CAAChG,KADF,EAEVuhC,KAFU,CAEJx+B,CAAC,IAAI;MACV,MAAM,IAAI7D,KAAJ,CACJ,qCACE4jB,YAAY,CAACvO,QAAbuO,EADF,GAEE,IAFF,GAGE/f,CAJE,CAAN;IAHS,EAAb;EAUD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACsB,MAAdskC,cAAc,CAClBC,EADkB,EAElB7jB,QAFkB,EAGa;IAC/B,MAAM4d,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,gBAAjB,EAAmC,CACzD8I,EAAE,CAAC/yB,QAAH+yB,EADyD,EAEzD7jB,QAFyD,CAAnC,CAAxB;IAIA,MAAMziB,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYvD,uBAAZ,CAAlB;;IACA,IAAI,WAAW98B,GAAf,EAAoB;MAClB,MAAM,IAAI9B,KAAJ,CACJ,gBAAgBooC,EAAE,CAAC/yB,QAAH+yB,EAAhB,GAAgC,WAAhC,GAA8CtmC,GAAG,CAACoM,KAAJpM,CAAUgN,OADpD,CAAN;IAGD;;IACD,OAAOhN,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACwB,MAAhBi1B,gBAAgB,CAACC,YAAD,EAA4C;IAChE,IAAI,CAACA,YAAL,EAAmB;MACjB;MACA,OAAO,KAAKzI,iBAAZ,EAA+B;QAC7B,MAAMld,KAAK,CAAC,GAAD,CAAX;MACD;;MACD,MAAM4lB,cAAc,GAAGpE,IAAI,CAACC,GAALD,KAAa,KAAKrE,cAAL,CAAoBC,SAAxD;;MACA,MAAMyI,OAAO,GAAGD,cAAc,IAAI1U,0BAAlC;;MACA,IAAI,KAAKiM,cAAL,CAAoBnlB,eAApB,KAAwC,IAAxC,IAAgD,CAAC6tB,OAArD,EAA8D;QAC5D,OAAO,KAAK1I,cAAL,CAAoBnlB,eAA3B;MACD;IACF;;IAED,OAAO,MAAM,KAAK8tB,iBAAL,EAAb;EACD;EAED;AACF;AACA;;;EACyB,MAAjBA,iBAAiB,GAAuB;IAC5C,KAAK5I,iBAAL,GAAyB,IAAzB;;IACA,IAAI;MACF,MAAM6I,SAAS,GAAGvE,IAAI,CAACC,GAALD,EAAlB;;MACA,KAAK,IAAI7iC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;QAC3B,MAAM;UAACm8B;QAAD,IAAc,MAAM,KAAK2I,kBAAL,CAAwB,WAAxB,CAA1B;;QAEA,IAAI,KAAKtG,cAAL,CAAoBnlB,eAApB,IAAuC8iB,SAA3C,EAAsD;UACpD,KAAKqC,cAAL,GAAsB;YACpBnlB,eAAe,EAAE8iB,SADG;YAEpBsC,SAAS,EAAEoE,IAAI,CAACC,GAALD,EAFS;YAGpBnE,qBAAqB,EAAE,EAHH;YAIpBC,mBAAmB,EAAE;UAJD,CAAtB;UAMA,OAAOxC,SAAP;QAVyB;;;QAc3B,MAAM9a,KAAK,CAAC2P,WAAW,GAAG,CAAf,CAAX;MACD;;MAED,MAAM,IAAItyB,KAAJ,CACH,0CAAyCmkC,IAAI,CAACC,GAALD,KAAauE,SAAU,IAD7D,CAAN;IAnBF,UAsBU;MACR,KAAK7I,iBAAL,GAAyB,KAAzB;IACD;EACF;EAED;AACF;AACA;;;EAC2B,MAAnB8I,mBAAmB,CACvBC,oBADuB,EAEvB5oB,OAFuB,EAGvB6oB,eAHuB,EAIuC;IAC9D,IAAI9rB,WAAJ;;IACA,IAAI6rB,oBAAoB,YAAYlrB,WAApC,EAAiD;MAC/CX,WAAW,GAAG6rB,oBAAd7rB;IADF,OAEO;MACLA,WAAW,GAAGW,WAAW,CAAC2D,QAAZ3D,CAAqBkrB,oBAArBlrB,CAAdX;IACD;;IAED,IAAIA,WAAW,CAACe,SAAZf,IAAyBiD,OAA7B,EAAsC;MACpCjD,WAAW,CAACzE,IAAZyE,CAAiB,GAAGiD,OAApBjD;IADF,OAEO;MACL,IAAIurB,YAAY,GAAG,KAAK1I,wBAAxB;;MACA,SAAS;QACP7iB,WAAW,CAACpC,eAAZoC,GAA8B,MAAM,KAAKsrB,gBAAL,CAAsBC,YAAtB,CAApCvrB;QAEA,IAAI,CAACiD,OAAL,EAAc;QAEdjD,WAAW,CAACzE,IAAZyE,CAAiB,GAAGiD,OAApBjD;;QACA,IAAI,CAACA,WAAW,CAACY,SAAjB,EAA4B;UAC1B,MAAM,IAAI3d,KAAJ,CAAU,YAAV,CAAN,CAD0B;QAE3B;;QAED,MAAM2d,SAAS,GAAGZ,WAAW,CAACY,SAAZZ,CAAsBza,QAAtBya,CAA+B,QAA/BA,CAAlB;;QACA,IACE,CAAC,KAAK+iB,cAAL,CAAoBG,mBAApB,CAAwC5hB,QAAxC,CAAiDV,SAAjD,CAAD,IACA,CAAC,KAAKmiB,cAAL,CAAoBE,qBAApB,CAA0C3hB,QAA1C,CAAmDV,SAAnD,CAFH,EAGE;UACA;UACA;UACA,KAAKmiB,cAAL,CAAoBG,mBAApB,CAAwC/9B,IAAxC,CAA6Cyb,SAA7C;;UACA;QAPF,OAQO;UACL;UACA;UACA;UACA;UACA2qB,YAAY,GAAG,IAAfA;QACD;MACF;IACF;;IAED,MAAMx5B,OAAO,GAAGiO,WAAW,CAAC2C,QAAZ3C,EAAhB;;IACA,MAAMC,QAAQ,GAAGlO,OAAO,CAACkF,SAARlF,EAAjB;;IACA,MAAMqS,eAAe,GAAGpE,WAAW,CAACiE,UAAZjE,CAAuBC,QAAvBD,CAAxB;;IACA,MAAM+rB,kBAAkB,GAAG3nB,eAAe,CAAC7e,QAAhB6e,CAAyB,QAAzBA,CAA3B;IACA,MAAMJ,MAAW,GAAG;MAClB6iB,QAAQ,EAAE,QADQ;MAElBthB,UAAU,EAAE,KAAKA;IAFC,CAApB;;IAKA,IAAIumB,eAAJ,EAAqB;MACnB,MAAMnD,SAAS,GAAG,CAChB/jC,KAAK,CAACC,OAAND,CAAcknC,eAAdlnC,IACIknC,eADJlnC,GAEImN,OAAO,CAAC6M,aAAR7M,EAHY,EAIhB0F,GAJgB,CAIZ7H,GAAG,IAAIA,GAAG,CAAC0I,QAAJ1I,EAJK,CAAlB;MAMAoU,MAAM,CAAC,UAAD,CAANA,GAAqB;QACnB6iB,QAAQ,EAAE,QADS;QAEnB8B;MAFmB,CAArB3kB;IAID;;IAED,IAAIf,OAAJ,EAAa;MACXe,MAAM,CAACgoB,SAAPhoB,GAAmB,IAAnBA;IACD;;IAED,MAAMxR,IAAI,GAAG,CAACu5B,kBAAD,EAAqB/nB,MAArB,CAAb;IACA,MAAMohB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,qBAAjB,EAAwC/vB,IAAxC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAY9L,kCAAZ,CAAlB;;IACA,IAAI,WAAWv0B,GAAf,EAAoB;MAClB,IAAIowB,IAAJ;;MACA,IAAI,UAAUpwB,GAAG,CAACoM,KAAlB,EAAyB;QACvBgkB,IAAI,GAAGpwB,GAAG,CAACoM,KAAJpM,CAAU6R,IAAV7R,CAAeowB,IAAtBA;;QACA,IAAIA,IAAI,IAAIvwB,KAAK,CAACC,OAAND,CAAcuwB,IAAdvwB,CAAZ,EAAiC;UAC/B,MAAMqnC,WAAW,GAAG,QAApB;UACA,MAAMC,QAAQ,GAAGD,WAAW,GAAG9W,IAAI,CAACvjB,IAALujB,CAAU8W,WAAV9W,CAA/B;UACAviB,OAAO,CAACzB,KAARyB,CAAc7N,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxBa,EAAiCs5B,QAAjCt5B;QACD;MACF;;MACD,MAAM,IAAIsiB,oBAAJ,CACJ,qCAAqCnwB,GAAG,CAACoM,KAAJpM,CAAUgN,OAD3C,EAEJojB,IAFI,CAAN;IAID;;IACD,OAAOpwB,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACuB,MAAfoP,eAAe,CACnBzF,WADmB,EAEnBiD,OAFmB,EAGnB7M,OAHmB,EAIY;IAC/B,IAAI4J,WAAW,CAACe,SAAhB,EAA2B;MACzBf,WAAW,CAACzE,IAAZyE,CAAiB,GAAGiD,OAApBjD;IADF,OAEO;MACL,IAAIurB,YAAY,GAAG,KAAK1I,wBAAxB;;MACA,SAAS;QACP7iB,WAAW,CAACpC,eAAZoC,GAA8B,MAAM,KAAKsrB,gBAAL,CAAsBC,YAAtB,CAApCvrB;QACAA,WAAW,CAACzE,IAAZyE,CAAiB,GAAGiD,OAApBjD;;QACA,IAAI,CAACA,WAAW,CAACY,SAAjB,EAA4B;UAC1B,MAAM,IAAI3d,KAAJ,CAAU,YAAV,CAAN,CAD0B;QAE3B;;QAED,MAAM2d,SAAS,GAAGZ,WAAW,CAACY,SAAZZ,CAAsBza,QAAtBya,CAA+B,QAA/BA,CAAlB;;QACA,IAAI,CAAC,KAAK+iB,cAAL,CAAoBE,qBAApB,CAA0C3hB,QAA1C,CAAmDV,SAAnD,CAAL,EAAoE;UAClE;UACA;UACA,KAAKmiB,cAAL,CAAoBE,qBAApB,CAA0C99B,IAA1C,CAA+Cyb,SAA/C;;UACA;QAJF,OAKO;UACL;UACA;UACA;UACA;UACA2qB,YAAY,GAAG,IAAfA;QACD;MACF;IACF;;IAED,MAAMnnB,eAAe,GAAGpE,WAAW,CAAC/I,SAAZ+I,EAAxB;IACA,OAAO,MAAM,KAAKmsB,kBAAL,CAAwB/nB,eAAxB,EAAyChO,OAAzC,CAAb;EACD;EAED;AACF;AACA;AACA;;;EAC0B,MAAlB+1B,kBAAkB,CACtBC,cADsB,EAEtBh2B,OAFsB,EAGS;IAC/B,MAAM21B,kBAAkB,GAAG3pC,QAAQ,CAACgqC,cAAD,CAARhqC,CAAyBmD,QAAzBnD,CAAkC,QAAlCA,CAA3B;IACA,MAAMiU,MAAM,GAAG,MAAM,KAAKg2B,sBAAL,CACnBN,kBADmB,EAEnB31B,OAFmB,CAArB;IAIA,OAAOC,MAAP;EACD;EAED;AACF;AACA;AACA;;;EAC8B,MAAtBg2B,sBAAsB,CAC1BN,kBAD0B,EAE1B31B,OAF0B,EAGK;IAC/B,MAAM4N,MAAW,GAAG;MAAC6iB,QAAQ,EAAE;IAAX,CAApB;IACA,MAAMxhB,aAAa,GAAGjP,OAAO,IAAIA,OAAO,CAACiP,aAAzC;IACA,MAAMC,mBAAmB,GACtBlP,OAAO,IAAIA,OAAO,CAACkP,mBAAnBlP,IAA2C,KAAKmP,UADnD;;IAGA,IAAInP,OAAO,IAAIA,OAAO,CAACoP,UAAvB,EAAmC;MACjCxB,MAAM,CAACwB,UAAPxB,GAAoB5N,OAAO,CAACoP,UAA5BxB;IACD;;IACD,IAAIqB,aAAJ,EAAmB;MACjBrB,MAAM,CAACqB,aAAPrB,GAAuBqB,aAAvBrB;IACD;;IACD,IAAIsB,mBAAJ,EAAyB;MACvBtB,MAAM,CAACsB,mBAAPtB,GAA6BsB,mBAA7BtB;IACD;;IAED,MAAMxR,IAAI,GAAG,CAACu5B,kBAAD,EAAqB/nB,MAArB,CAAb;IACA,MAAMohB,SAAS,GAAG,MAAM,KAAK7C,WAAL,CAAiB,iBAAjB,EAAoC/vB,IAApC,CAAxB;IACA,MAAMzN,GAAG,GAAGxB,MAAM,CAAC6hC,SAAD,EAAYtD,wBAAZ,CAAlB;;IACA,IAAI,WAAW/8B,GAAf,EAAoB;MAClB,IAAIowB,IAAJ;;MACA,IAAI,UAAUpwB,GAAG,CAACoM,KAAlB,EAAyB;QACvBgkB,IAAI,GAAGpwB,GAAG,CAACoM,KAAJpM,CAAU6R,IAAV7R,CAAeowB,IAAtBA;;QACA,IAAIA,IAAI,IAAIvwB,KAAK,CAACC,OAAND,CAAcuwB,IAAdvwB,CAAZ,EAAiC;UAC/B,MAAMqnC,WAAW,GAAG,QAApB;UACA,MAAMC,QAAQ,GAAGD,WAAW,GAAG9W,IAAI,CAACvjB,IAALujB,CAAU8W,WAAV9W,CAA/B;UACAviB,OAAO,CAACzB,KAARyB,CAAc7N,GAAG,CAACoM,KAAJpM,CAAUgN,OAAxBa,EAAiCs5B,QAAjCt5B;QACD;MACF;;MACD,MAAM,IAAIsiB,oBAAJ,CACJ,iCAAiCnwB,GAAG,CAACoM,KAAJpM,CAAUgN,OADvC,EAEJojB,IAFI,CAAN;IAID;;IACD,OAAOpwB,GAAG,CAACsR,MAAX;EACD;EAED;AACF;AACA;;;EACEmuB,SAAS,GAAG;IACV,KAAK9B,sBAAL,GAA8B,IAA9B;IACA,KAAKC,sBAAL,GAA8B2J,WAAW,CAAC,MAAM;MAC9C;MACA,KAAK7J,aAAL,CAAmB8J,MAAnB,CAA0B,MAA1B,EAAkCjH,KAAlC,CAAwC,MAAM,CAA9C;IAFuC,GAGtC,IAHsC,CAAzC;;IAIA,KAAKkH,oBAAL;EACD;EAED;AACF;AACA;;;EACE/H,UAAU,CAAC/qB,GAAD,EAAa;IACrB9G,OAAO,CAACzB,KAARyB,CAAc,WAAdA,EAA2B8G,GAAG,CAAC3H,OAA/Ba;EACD;EAED;AACF;AACA;;;EACE8xB,UAAU,CAACrxB,IAAD,EAAe;IACvB,IAAI,KAAKsvB,sBAAT,EAAiC;MAC/B8J,aAAa,CAAC,KAAK9J,sBAAN,CAAb8J;MACA,KAAK9J,sBAAL,GAA8B,IAA9B;IACD;;IAED,IAAItvB,IAAI,KAAK,IAAb,EAAmB;MACjB;MACA,KAAKm5B,oBAAL;;MACA;IATqB;;;IAavB,KAAKE,mBAAL;EACD;EAED;AACF;AACA;;;EACkB,MAAVC,UAAU,CACdC,GADc,EAEdC,SAFc,EAGdC,OAHc,EAId;IACA,IAAIF,GAAG,CAACrF,cAAJqF,IAAsB,IAA1B,EAAgC;MAC9BA,GAAG,CAACrF,cAAJqF,GAAqB,aAArBA;;MACA,IAAI;QACF,MAAMzV,EAAE,GAAG,MAAM,KAAKsL,aAAL,CAAmB33B,IAAnB,CAAwB+hC,SAAxB,EAAmCC,OAAnC,CAAjB;;QACA,IAAI,OAAO3V,EAAP,KAAc,QAAd,IAA0ByV,GAAG,CAACrF,cAAJqF,KAAuB,aAArD,EAAoE;UAClE;UACAA,GAAG,CAACrF,cAAJqF,GAAqBzV,EAArByV;QACD;MALH,EAME,OAAOlzB,GAAP,EAAY;QACZ,IAAIkzB,GAAG,CAACrF,cAAJqF,KAAuB,aAA3B,EAA0C;UACxC;UACAA,GAAG,CAACrF,cAAJqF,GAAqB,IAArBA;QACD;;QACD,IAAIlzB,GAAG,YAAYzW,KAAnB,EAA0B;UACxB2P,OAAO,CAACzB,KAARyB,CACG,GAAEi6B,SAAU,qBADfj6B,EAEEk6B,OAFFl6B,EAGE8G,GAAG,CAAC3H,OAHNa;QAKD;MACF;IACF;EACF;EAED;AACF;AACA;;;EACoB,MAAZm6B,YAAY,CAChBH,GADgB,EAEhBC,SAFgB,EAGhB;IACA,MAAMtF,cAAc,GAAGqF,GAAG,CAACrF,cAA3B;;IACA,IAAIA,cAAc,IAAI,IAAlBA,IAA0B,OAAOA,cAAP,IAAyB,QAAvD,EAAiE;MAC/D,MAAMyF,aAAqB,GAAGzF,cAA9B;;MACA,IAAI;QACF,MAAM,KAAK9E,aAAL,CAAmB33B,IAAnB,CAAwB+hC,SAAxB,EAAmC,CAACG,aAAD,CAAnC,CAAN;MADF,EAEE,OAAOtzB,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYzW,KAAnB,EAA0B;UACxB2P,OAAO,CAACzB,KAARyB,CAAe,GAAEi6B,SAAU,SAA3Bj6B,EAAqC8G,GAAG,CAAC3H,OAAzCa;QACD;MACF;IACF;EACF;EAED;AACF;AACA;;;EACE85B,mBAAmB,GAAG;IACpBppC,MAAM,CAACqb,MAAPrb,CAAc,KAAK8/B,2BAAnB9/B,EAAgDmO,OAAhDnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;IAGAA,MAAM,CAACqb,MAAPrb,CAAc,KAAKggC,kCAAnBhgC,EAAuDmO,OAAvDnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;IAGAA,MAAM,CAACqb,MAAPrb,CAAc,KAAKkgC,kBAAnBlgC,EAAuCmO,OAAvCnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;IAGAA,MAAM,CAACqb,MAAPrb,CAAc,KAAKogC,uBAAnBpgC,EAA4CmO,OAA5CnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;IAGAA,MAAM,CAACqb,MAAPrb,CAAc,KAAKsgC,kBAAnBtgC,EAAuCmO,OAAvCnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;IAGAA,MAAM,CAACqb,MAAPrb,CAAc,KAAK0gC,wBAAnB1gC,EAA6CmO,OAA7CnO,CACEwG,CAAC,IAAKA,CAAC,CAACy9B,cAAFz9B,GAAmB,IAD3BxG;EAGD;EAED;AACF;AACA;;;EACEkpC,oBAAoB,GAAG;IACrB,MAAM7uB,WAAW,GAAGra,MAAM,CAACoQ,IAAPpQ,CAAY,KAAK8/B,2BAAjB9/B,EAA8CmU,GAA9CnU,CAClB+yB,MADkB/yB,CAApB;IAGA,MAAM2pC,WAAW,GAAG3pC,MAAM,CAACoQ,IAAPpQ,CAClB,KAAKggC,kCADahgC,EAElBmU,GAFkBnU,CAEd+yB,MAFc/yB,CAApB;IAGA,MAAM4pC,QAAQ,GAAG5pC,MAAM,CAACoQ,IAAPpQ,CAAY,KAAKsgC,kBAAjBtgC,EAAqCmU,GAArCnU,CAAyC+yB,MAAzC/yB,CAAjB;IACA,MAAM6pC,cAAc,GAAG7pC,MAAM,CAACoQ,IAAPpQ,CAAY,KAAK0gC,wBAAjB1gC,EAA2CmU,GAA3CnU,CACrB+yB,MADqB/yB,CAAvB;IAGA,MAAM8pC,aAAa,GAAG9pC,MAAM,CAACoQ,IAAPpQ,CAAY,KAAKogC,uBAAjBpgC,EAA0CmU,GAA1CnU,CAA8C+yB,MAA9C/yB,CAAtB;IACA,MAAM+pC,QAAQ,GAAG/pC,MAAM,CAACoQ,IAAPpQ,CAAY,KAAKkgC,kBAAjBlgC,EAAqCmU,GAArCnU,CAAyC+yB,MAAzC/yB,CAAjB;IACA,MAAMgqC,QAAQ,GAAGhqC,MAAM,CAACoQ,IAAPpQ,CAAY,KAAKwgC,kBAAjBxgC,EAAqCmU,GAArCnU,CAAyC+yB,MAAzC/yB,CAAjB;;IACA,IACEqa,WAAW,CAAClZ,MAAZkZ,KAAuB,CAAvBA,IACAsvB,WAAW,CAACxoC,MAAZwoC,KAAuB,CADvBtvB,IAEAuvB,QAAQ,CAACzoC,MAATyoC,KAAoB,CAFpBvvB,IAGAwvB,cAAc,CAAC1oC,MAAf0oC,KAA0B,CAH1BxvB,IAIAyvB,aAAa,CAAC3oC,MAAd2oC,KAAyB,CAJzBzvB,IAKA0vB,QAAQ,CAAC5oC,MAAT4oC,KAAoB,CALpB1vB,IAMA2vB,QAAQ,CAAC7oC,MAAT6oC,KAAoB,CAPtB,EAQE;MACA,IAAI,KAAK5K,sBAAT,EAAiC;QAC/B,KAAKA,sBAAL,GAA8B,KAA9B;QACA,KAAKE,wBAAL,GAAgC5c,UAAU,CAAC,MAAM;UAC/C,KAAK4c,wBAAL,GAAgC,IAAhC;;UACA,IAAI;YACF,KAAKH,aAAL,CAAmB8K,KAAnB;UADF,EAEE,OAAO7zB,GAAP,EAAY;YACZ;YACA,IAAIA,GAAG,YAAYzW,KAAnB,EAA0B;cACxB2P,OAAO,CAACC,GAARD,CACG,yCAAwC8G,GAAG,CAAC3H,OAAQ,EADvDa;YAGD;UACF;QAXuC,GAYvC,GAZuC,CAA1C;MAaD;;MACD;IACD;;IAED,IAAI,KAAKgwB,wBAAL,KAAkC,IAAtC,EAA4C;MAC1C/M,YAAY,CAAC,KAAK+M,wBAAN,CAAZ/M;MACA,KAAK+M,wBAAL,GAAgC,IAAhC;MACA,KAAKF,sBAAL,GAA8B,IAA9B;IACD;;IAED,IAAI,CAAC,KAAKA,sBAAV,EAAkC;MAChC,KAAKD,aAAL,CAAmB+K,OAAnB;;MACA;IACD;;IAED,KAAK,IAAIrW,EAAT,IAAexZ,WAAf,EAA4B;MAC1B,MAAMivB,GAAG,GAAG,KAAKxJ,2BAAL,CAAiCjM,EAAjC,CAAZ;;MACA,KAAKwV,UAAL,CACEC,GADF,EAEE,kBAFF,EAGE,KAAKzH,UAAL,CAAgB,CAACyH,GAAG,CAACx0B,SAAL,CAAhB,EAAiCw0B,GAAG,CAACrnB,UAArC,EAAiD,QAAjD,CAHF;IAKD;;IAED,KAAK,IAAI4R,EAAT,IAAe8V,WAAf,EAA4B;MAC1B,MAAML,GAAG,GAAG,KAAKtJ,kCAAL,CAAwCnM,EAAxC,CAAZ;;MACA,KAAKwV,UAAL,CACEC,GADF,EAEE,kBAFF,EAGE,KAAKzH,UAAL,CAAgB,CAACyH,GAAG,CAAC5zB,SAAL,CAAhB,EAAiC4zB,GAAG,CAACrnB,UAArC,EAAiD,QAAjD,EAA2D;QACzD0hB,OAAO,EAAE2F,GAAG,CAAC3F;MAD4C,CAA3D,CAHF;IAOD;;IAED,KAAK,IAAI9P,EAAT,IAAe+V,QAAf,EAAyB;MACvB,MAAMN,GAAG,GAAG,KAAKhJ,kBAAL,CAAwBzM,EAAxB,CAAZ;;MACA,KAAKwV,UAAL,CAAgBC,GAAhB,EAAqB,eAArB,EAAsC,EAAtC;IACD;;IAED,KAAK,IAAIzV,EAAT,IAAegW,cAAf,EAA+B;MAC7B,MAAMP,GAAG,GAAG,KAAK5I,wBAAL,CAA8B7M,EAA9B,CAAZ;;MACA,KAAKwV,UAAL,CAAgBC,GAAhB,EAAqB,uBAArB,EAA8C,EAA9C;IACD;;IAED,KAAK,IAAIzV,EAAT,IAAeiW,aAAf,EAA8B;MAC5B,MAAMR,GAAG,GAAG,KAAKlJ,uBAAL,CAA6BvM,EAA7B,CAAZ;MACA,MAAM3kB,IAAW,GAAG,CAACo6B,GAAG,CAAChsB,SAAL,CAApB;MACA,IAAIgsB,GAAG,CAACx2B,OAAR,EAAiB5D,IAAI,CAACrN,IAALqN,CAAUo6B,GAAG,CAACx2B,OAAd5D;;MACjB,KAAKm6B,UAAL,CAAgBC,GAAhB,EAAqB,oBAArB,EAA2Cp6B,IAA3C;IACD;;IAED,KAAK,IAAI2kB,EAAT,IAAekW,QAAf,EAAyB;MACvB,MAAMT,GAAG,GAAG,KAAKpJ,kBAAL,CAAwBrM,EAAxB,CAAZ;;MACA,KAAKwV,UAAL,CAAgBC,GAAhB,EAAqB,eAArB,EAAsC,EAAtC;IACD;;IAED,KAAK,IAAIzV,EAAT,IAAemW,QAAf,EAAyB;MACvB,MAAMV,GAAG,GAAG,KAAK9I,kBAAL,CAAwB3M,EAAxB,CAAZ;MACA,IAAItY,MAAJ;;MACA,IAAI,OAAO+tB,GAAG,CAAC/tB,MAAX,KAAsB,QAA1B,EAAoC;QAClCA,MAAM,GAAG;UAAC4uB,QAAQ,EAAE,CAACb,GAAG,CAAC/tB,MAAJ+tB,CAAWrnC,QAAXqnC,EAAD;QAAX,CAAT/tB;MADF,OAEO;QACLA,MAAM,GAAG+tB,GAAG,CAAC/tB,MAAbA;MACD;;MACD,KAAK8tB,UAAL,CACEC,GADF,EAEE,eAFF,EAGE,KAAKzH,UAAL,CAAgB,CAACtmB,MAAD,CAAhB,EAA0B+tB,GAAG,CAACrnB,UAA9B,CAHF;IAKD;EACF;EAED;AACF;AACA;;;EACEof,wBAAwB,CAAC+I,YAAD,EAAuB;IAC7C,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe7Q,yBAAf,CAAlB;;IACA,KAAK,MAAM+P,GAAX,IAAkBtpC,MAAM,CAACqb,MAAPrb,CAAc,KAAK8/B,2BAAnB9/B,CAAlB,EAAmE;MACjE,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C8P,GAAG,CAACze,QAAJye,CAAa7nC,GAAG,CAACsR,MAAJtR,CAAWhB,KAAxB6oC,EAA+B7nC,GAAG,CAACsR,MAAJtR,CAAW4yB,OAA1CiV;QACA;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEe,eAAe,CACbv1B,SADa,EAEb+V,QAFa,EAGb5I,UAHa,EAIL;IACR,MAAM4R,EAAE,GAAG,EAAE,KAAKgM,iCAAlB;IACA,KAAKC,2BAAL,CAAiCjM,EAAjC,IAAuC;MACrC/e,SAAS,EAAEA,SAAS,CAACE,QAAVF,EAD0B;MAErC+V,QAFqC;MAGrC5I,UAHqC;MAIrCgiB,cAAc,EAAE;IAJqB,CAAvC;;IAMA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACmC,MAA3ByW,2BAA2B,CAACzW,EAAD,EAA4B;IAC3D,IAAI,KAAKiM,2BAAL,CAAiCjM,EAAjC,CAAJ,EAA0C;MACxC,MAAM0W,OAAO,GAAG,KAAKzK,2BAAL,CAAiCjM,EAAjC,CAAhB;MACA,OAAO,KAAKiM,2BAAL,CAAiCjM,EAAjC,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,oBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,8BAA6Bk0B,EAAG,EAA3C,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACEyN,+BAA+B,CAAC8I,YAAD,EAAuB;IACpD,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe1Q,gCAAf,CAAlB;;IACA,KAAK,MAAM4P,GAAX,IAAkBtpC,MAAM,CAACqb,MAAPrb,CAAc,KAAKggC,kCAAnBhgC,CAAlB,EAA0E;MACxE,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C,MAAM;UAAC/4B,KAAD;UAAQ4zB;QAAR,IAAmB5yB,GAAG,CAACsR,MAA7B;QACAu2B,GAAG,CAACze,QAAJye,CACE;UACEkB,SAAS,EAAE/pC,KAAK,CAAC6V,MADnB;UAEEsxB,WAAW,EAAEnnC,KAAK,CAACga;QAFrB,CADF6uB,EAKEjV,OALFiV;QAOA;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEmB,sBAAsB,CACpB/0B,SADoB,EAEpBmV,QAFoB,EAGpB5I,UAHoB,EAIpB0hB,OAJoB,EAKZ;IACR,MAAM9P,EAAE,GAAG,EAAE,KAAKkM,wCAAlB;IACA,KAAKC,kCAAL,CAAwCnM,EAAxC,IAA8C;MAC5Cne,SAAS,EAAEA,SAAS,CAACV,QAAVU,EADiC;MAE5CmV,QAF4C;MAG5C5I,UAH4C;MAI5CgiB,cAAc,EAAE,IAJ4B;MAK5CN;IAL4C,CAA9C;;IAOA,KAAKuF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC0C,MAAlC6W,kCAAkC,CAAC7W,EAAD,EAA4B;IAClE,IAAI,KAAKmM,kCAAL,CAAwCnM,EAAxC,CAAJ,EAAiD;MAC/C,MAAM0W,OAAO,GAAG,KAAKvK,kCAAL,CAAwCnM,EAAxC,CAAhB;MACA,OAAO,KAAKmM,kCAAL,CAAwCnM,EAAxC,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,oBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,sCAAqCk0B,EAAG,EAAnD,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACE8W,MAAM,CACJpvB,MADI,EAEJsP,QAFI,EAGJ5I,UAHI,EAII;IACR,MAAM4R,EAAE,GAAG,EAAE,KAAK0M,wBAAlB;IACA,KAAKC,kBAAL,CAAwB3M,EAAxB,IAA8B;MAC5BtY,MAD4B;MAE5BsP,QAF4B;MAG5B5I,UAH4B;MAI5BgiB,cAAc,EAAE;IAJY,CAA9B;;IAMA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC4B,MAApB+W,oBAAoB,CAAC/W,EAAD,EAA4B;IACpD,IAAI,CAAC,KAAK2M,kBAAL,CAAwB3M,EAAxB,CAAL,EAAkC;MAChC,MAAM,IAAIl0B,KAAJ,CAAW,oBAAmBk0B,EAAG,EAAjC,CAAN;IACD;;IACD,MAAM0W,OAAO,GAAG,KAAK/J,kBAAL,CAAwB3M,EAAxB,CAAhB;IACA,OAAO,KAAK2M,kBAAL,CAAwB3M,EAAxB,CAAP;IACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,iBAA3B,CAAN;;IACA,KAAKrB,oBAAL;EACD;EAED;AACF;AACA;;;EACEvH,qBAAqB,CAACyI,YAAD,EAAuB;IAC1C,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe1L,sBAAf,CAAlB;IACA,MAAMtuB,IAAI,GAAGpQ,MAAM,CAACoQ,IAAPpQ,CAAY,KAAKwgC,kBAAjBxgC,EAAqCmU,GAArCnU,CAAyC+yB,MAAzC/yB,CAAb;;IACA,KAAK,IAAI6zB,EAAT,IAAezjB,IAAf,EAAqB;MACnB,MAAMk5B,GAAG,GAAG,KAAK9I,kBAAL,CAAwB3M,EAAxB,CAAZ;;MACA,IAAIyV,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C8P,GAAG,CAACze,QAAJye,CAAa7nC,GAAG,CAACsR,MAAJtR,CAAWhB,KAAxB6oC,EAA+B7nC,GAAG,CAACsR,MAAJtR,CAAW4yB,OAA1CiV;QACA;MACD;IACF;EACF;EAED;AACF;AACA;;;EACE/H,qBAAqB,CAAC6I,YAAD,EAAuB;IAC1C,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAetQ,sBAAf,CAAlB;;IACA,KAAK,MAAMwP,GAAX,IAAkBtpC,MAAM,CAACqb,MAAPrb,CAAc,KAAKsgC,kBAAnBtgC,CAAlB,EAA0D;MACxD,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C8P,GAAG,CAACze,QAAJye,CAAa7nC,GAAG,CAACsR,MAAjBu2B;QACA;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEuB,YAAY,CAAChgB,QAAD,EAAuC;IACjD,MAAMgJ,EAAE,GAAG,EAAE,KAAKwM,wBAAlB;IACA,KAAKC,kBAAL,CAAwBzM,EAAxB,IAA8B;MAC5BhJ,QAD4B;MAE5BoZ,cAAc,EAAE;IAFY,CAA9B;;IAIA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxBiX,wBAAwB,CAACjX,EAAD,EAA4B;IACxD,IAAI,KAAKyM,kBAAL,CAAwBzM,EAAxB,CAAJ,EAAiC;MAC/B,MAAM0W,OAAO,GAAG,KAAKjK,kBAAL,CAAwBzM,EAAxB,CAAhB;MACA,OAAO,KAAKyM,kBAAL,CAAwBzM,EAAxB,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,iBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,2BAA0Bk0B,EAAG,EAAxC,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACE2N,4BAA4B,CAAC4I,YAAD,EAAuB;IACjD,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe9P,4BAAf,CAAlB;;IACA,KAAK,MAAMgP,GAAX,IAAkBtpC,MAAM,CAACqb,MAAPrb,CAAc,KAAK0gC,wBAAnB1gC,CAAlB,EAAgE;MAC9D,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C8P,GAAG,CAACze,QAAJye,CAAa7nC,GAAG,CAACsR,MAAjBu2B;QACA;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEyB,YAAY,CAAClgB,QAAD,EAAuC;IACjD,MAAMgJ,EAAE,GAAG,EAAE,KAAK4M,8BAAlB;IACA,KAAKC,wBAAL,CAA8B7M,EAA9B,IAAoC;MAClChJ,QADkC;MAElCoZ,cAAc,EAAE;IAFkB,CAApC;;IAIA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxBmX,wBAAwB,CAACnX,EAAD,EAA4B;IACxD,IAAI,KAAK6M,wBAAL,CAA8B7M,EAA9B,CAAJ,EAAuC;MACrC,MAAM0W,OAAO,GAAG,KAAK7J,wBAAL,CAA8B7M,EAA9B,CAAhB;MACA,OAAO,KAAK6M,wBAAL,CAA8B7M,EAA9B,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,yBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,2BAA0Bk0B,EAAG,EAAxC,CAAN;IACD;EACF;;EAEDgO,UAAU,CACR3yB,IADQ,EAER+7B,QAFQ,EAGR1H,QAHQ,EAIRG,KAJQ,EAKI;IACZ,MAAMzhB,UAAU,GAAGgpB,QAAQ,IAAI,KAAKpM,WAApC;;IACA,IAAI5c,UAAU,IAAIshB,QAAdthB,IAA0ByhB,KAA9B,EAAqC;MACnC,IAAI5wB,OAAY,GAAG,EAAnB;;MACA,IAAIywB,QAAJ,EAAc;QACZzwB,OAAO,CAACywB,QAARzwB,GAAmBywB,QAAnBzwB;MACD;;MACD,IAAImP,UAAJ,EAAgB;QACdnP,OAAO,CAACmP,UAARnP,GAAqBmP,UAArBnP;MACD;;MACD,IAAI4wB,KAAJ,EAAW;QACT5wB,OAAO,GAAG9S,MAAM,CAACyT,MAAPzT,CAAc8S,OAAd9S,EAAuB0jC,KAAvB1jC,CAAV8S;MACD;;MACD5D,IAAI,CAACrN,IAALqN,CAAU4D,OAAV5D;IACD;;IACD,OAAOA,IAAP;EACD;EAED;AACF;AACA;;;EACEm3B,0BAA0B,CACxBn3B,IADwB,EAExB+7B,QAFwB,EAGxB1H,QAHwB,EAIxBG,KAJwB,EAKZ;IACZ,MAAMzhB,UAAU,GAAGgpB,QAAQ,IAAI,KAAKpM,WAApC;;IACA,IAAI5c,UAAU,IAAI,CAAC,CAAC,WAAD,EAAc,WAAd,EAA2BjE,QAA3B,CAAoCiE,UAApC,CAAnB,EAAoE;MAClE,MAAM,IAAItiB,KAAJ,CACJ,gDACE,KAAKk/B,WADP,GAEE,6CAHE,CAAN;IAKD;;IACD,OAAO,KAAKgD,UAAL,CAAgB3yB,IAAhB,EAAsB+7B,QAAtB,EAAgC1H,QAAhC,EAA0CG,KAA1C,CAAP;EACD;EAED;AACF;AACA;;;EACEjC,0BAA0B,CAAC2I,YAAD,EAAuB;IAC/C,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe7P,2BAAf,CAAlB;;IACA,KAAK,MAAM,CAAC1G,EAAD,EAAKyV,GAAL,CAAX,IAAwBtpC,MAAM,CAAC8jB,OAAP9jB,CAAe,KAAKogC,uBAApBpgC,CAAxB,EAAsE;MACpE,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C,IAAI/3B,GAAG,CAACsR,MAAJtR,CAAWhB,KAAXgB,KAAqB,mBAAzB,EAA8C;UAC5C6nC,GAAG,CAACze,QAAJye,CACE;YACE7vB,IAAI,EAAE;UADR,CADF6vB,EAIE7nC,GAAG,CAACsR,MAAJtR,CAAW4yB,OAJbiV;QADF,OAOO;UACL;UACA;UACA,OAAO,KAAKlJ,uBAAL,CAA6BrN,MAAM,CAACc,EAAD,CAAnC,CAAP;;UACA,KAAKqV,oBAAL;;UACAI,GAAG,CAACze,QAAJye,CACE;YACE7vB,IAAI,EAAE,QADR;YAEE1G,MAAM,EAAEtR,GAAG,CAACsR,MAAJtR,CAAWhB;UAFrB,CADF6oC,EAKE7nC,GAAG,CAACsR,MAAJtR,CAAW4yB,OALbiV;QAOD;;QACD;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEnF,WAAW,CACT7mB,SADS,EAETuN,QAFS,EAGT5I,UAHS,EAID;IACR,MAAM4R,EAAE,GAAG,EAAE,KAAKsM,6BAAlB;IACA,KAAKC,uBAAL,CAA6BvM,EAA7B,IAAmC;MACjCvW,SADiC;MAEjCuN,QAAQ,EAAE,CAACuf,YAAD,EAAe/V,OAAf,KAA2B;QACnC,IAAI+V,YAAY,CAAC3wB,IAAb2wB,KAAsB,QAA1B,EAAoC;UAClCvf,QAAQ,CAACuf,YAAY,CAACr3B,MAAd,EAAsBshB,OAAtB,CAARxJ;QACD;MAL8B;MAOjC/X,OAAO,EAAE;QAACmP;MAAD,CAPwB;MAQjCgiB,cAAc,EAAE;IARiB,CAAnC;;IAUA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEqX,sBAAsB,CACpB5tB,SADoB,EAEpBuN,QAFoB,EAGpB/X,OAHoB,EAIZ;IACR,MAAM+gB,EAAE,GAAG,EAAE,KAAKsM,6BAAlB;IACA,KAAKC,uBAAL,CAA6BvM,EAA7B,IAAmC;MACjCvW,SADiC;MAEjCuN,QAFiC;MAGjC/X,OAHiC;MAIjCmxB,cAAc,EAAE;IAJiB,CAAnC;;IAMA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC+B,MAAvBuQ,uBAAuB,CAACvQ,EAAD,EAA4B;IACvD,IAAI,KAAKuM,uBAAL,CAA6BvM,EAA7B,CAAJ,EAAsC;MACpC,MAAM0W,OAAO,GAAG,KAAKnK,uBAAL,CAA6BvM,EAA7B,CAAhB;MACA,OAAO,KAAKuM,uBAAL,CAA6BvM,EAA7B,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,sBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,gCAA+Bk0B,EAAG,EAA7C,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACE6N,qBAAqB,CAAC0I,YAAD,EAAuB;IAC1C,MAAM3oC,GAAG,GAAGxB,MAAM,CAACmqC,YAAD,EAAe5P,sBAAf,CAAlB;;IACA,KAAK,MAAM8O,GAAX,IAAkBtpC,MAAM,CAACqb,MAAPrb,CAAc,KAAKkgC,kBAAnBlgC,CAAlB,EAA0D;MACxD,IAAIspC,GAAG,CAACrF,cAAJqF,KAAuB7nC,GAAG,CAAC+3B,YAA/B,EAA6C;QAC3C8P,GAAG,CAACze,QAAJye,CAAa7nC,GAAG,CAACsR,MAAjBu2B;QACA;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE6B,YAAY,CAACtgB,QAAD,EAAuC;IACjD,MAAMgJ,EAAE,GAAG,EAAE,KAAKoM,wBAAlB;IACA,KAAKC,kBAAL,CAAwBrM,EAAxB,IAA8B;MAC5BhJ,QAD4B;MAE5BoZ,cAAc,EAAE;IAFY,CAA9B;;IAIA,KAAKiF,oBAAL;;IACA,OAAOrV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxBuX,wBAAwB,CAACvX,EAAD,EAA4B;IACxD,IAAI,KAAKqM,kBAAL,CAAwBrM,EAAxB,CAAJ,EAAiC;MAC/B,MAAM0W,OAAO,GAAG,KAAKrK,kBAAL,CAAwBrM,EAAxB,CAAhB;MACA,OAAO,KAAKqM,kBAAL,CAAwBrM,EAAxB,CAAP;MACA,MAAM,KAAK4V,YAAL,CAAkBc,OAAlB,EAA2B,iBAA3B,CAAN;;MACA,KAAKrB,oBAAL;IAJF,OAKO;MACL,MAAM,IAAIvpC,KAAJ,CAAW,2BAA0Bk0B,EAAG,EAAxC,CAAN;IACD;EACF;;AAngFqB;AC1hExB;AACA;AACA;;AAcA;AACA;AACA;;;AACO,MAAMwX,OAAN,CAAc;EAGnB;AACF;AACA;AACA;AACA;AACA;EACE7qC,WAAW,CAAC8qC,OAAD,EAA2B;IAAA,KAR9BtzB,QAQ8B;;IACpC,IAAIszB,OAAJ,EAAa;MACX,KAAKtzB,QAAL,GAAgBszB,OAAhB;IADF,OAEO;MACL,KAAKtzB,QAAL,GAAgBrB,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,EAAhB;IACD;EACF;EAED;AACF;AACA;;;EACiB,OAAR40B,QAAQ,GAAY;IACzB,OAAO,IAAIF,OAAJ,CAAY10B,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,EAAZ,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACsB,OAAbwB,aAAa,CAClBJ,SADkB,EAElBjF,OAFkB,EAGT;IACT,MAAMw4B,OAAO,GAAG30B,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,CAAkBwB,aAAlBxB,CAAgCoB,SAAhCpB,CAAhB;;IACA,IAAI,CAAC7D,OAAD,IAAY,CAACA,OAAO,CAAC04B,cAAzB,EAAyC;MACvC,MAAMC,OAAO,GAAG,IAAIC,WAAJ,EAAhB;MACA,MAAM/uB,QAAQ,GAAG8uB,OAAO,CAAC/3B,MAAR+3B,CAAe,+BAAfA,CAAjB;MACA,MAAMnuB,SAAS,GAAG3G,IAAI,CAACsB,IAALtB,CAAUwJ,QAAVxJ,CAAmBgG,QAAnBhG,EAA6B20B,OAAO,CAACvzB,SAArCpB,CAAlB;;MACA,IAAI,CAACA,IAAI,CAACsB,IAALtB,CAAUwJ,QAAVxJ,CAAmB8J,MAAnB9J,CAA0BgG,QAA1BhG,EAAoC2G,SAApC3G,EAA+C20B,OAAO,CAACx2B,SAAvD6B,CAAL,EAAwE;QACtE,MAAM,IAAIhX,KAAJ,CAAU,+BAAV,CAAN;MACD;IACF;;IACD,OAAO,IAAI0rC,OAAJ,CAAYC,OAAZ,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,OAARK,QAAQ,CAACl2B,IAAD,EAA4B;IACzC,OAAO,IAAI41B,OAAJ,CAAY10B,IAAI,CAACsB,IAALtB,CAAUuB,OAAVvB,CAAkBg1B,QAAlBh1B,CAA2BlB,IAA3BkB,CAAZ,CAAP;EACD;EAED;AACF;AACA;;;EACe,IAAT7B,SAAS,GAAc;IACzB,OAAO,IAAIL,SAAJ,CAAc,KAAKuD,QAAL,CAAclD,SAA5B,CAAP;EACD;EAED;AACF;AACA;;;EACe,IAATiD,SAAS,GAAe;IAC1B,OAAO,KAAKC,QAAL,CAAcD,SAArB;EACD;;AAzEkB;;ACdrB,MAAM6zB,mBAAiB,GAAG,EAA1B;AACA,MAAMC,kBAAgB,GAAG,EAAzB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA;AACA;AACA;;AAiBA,MAAMC,0BAA0B,GAAGzzB,YAAY,CAACI,MAAbJ,CAAoB,CACrDA,YAAY,CAACiB,EAAbjB,CAAgB,eAAhBA,CADqD,EAErDA,YAAY,CAACiB,EAAbjB,CAAgB,SAAhBA,CAFqD,EAGrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,iBAAjBA,CAHqD,EAIrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,2BAAjBA,CAJqD,EAKrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,iBAAjBA,CALqD,EAMrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,2BAAjBA,CANqD,EAOrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,mBAAjBA,CAPqD,EAQrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,iBAAjBA,CARqD,EASrDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,yBAAjBA,CATqD,CAApBA,CAAnC;;AAYO,MAAM2zB,cAAN,CAAqB;EAC1B;AACF;AACA;EACEzrC,WAAW,GAAG;EAEd;AACF;AACA;;EAKE;AACF;AACA;AACA;AACA;;;EACuC,OAA9B0rC,8BAA8B,CACnCl8B,MADmC,EAEX;IACxB,MAAM;MAAC8E,SAAD;MAAYrG,OAAZ;MAAqB6O,SAArB;MAAgC6uB;IAAhC,IAAoDn8B,MAA1D;IAEAxQ,MAAM,CACJsV,SAAS,CAAC3T,MAAV2T,KAAqB+2B,kBADjB,EAEH,sBAAqBA,kBAAiB,uBAAsB/2B,SAAS,CAAC3T,MAAO,QAF1E,CAAN3B;IAKAA,MAAM,CACJ8d,SAAS,CAACnc,MAAVmc,KAAqBwuB,eADjB,EAEH,qBAAoBA,eAAgB,uBAAsBxuB,SAAS,CAACnc,MAAO,QAFxE,CAAN3B;IAKA,MAAM4sC,eAAe,GAAGL,0BAA0B,CAAC7yB,IAAnD;IACA,MAAMmzB,eAAe,GAAGD,eAAe,GAAGt3B,SAAS,CAAC3T,MAApD;IACA,MAAMmrC,iBAAiB,GAAGD,eAAe,GAAG/uB,SAAS,CAACnc,MAAtD;IACA,MAAMorC,aAAa,GAAG,CAAtB;IAEA,MAAM3lB,eAAe,GAAG5nB,MAAM,CAACqW,KAAPrW,CAAastC,iBAAiB,GAAG79B,OAAO,CAACtN,MAAzCnC,CAAxB;IAEA+sC,0BAA0B,CAACr4B,MAA3Bq4B,CACE;MACEQ,aADF;MAEEC,OAAO,EAAE,CAFX;MAGEH,eAHF;MAIEI,yBAAyB,EAAEN,gBAJ7B;MAKEC,eALF;MAMEM,yBAAyB,EAAEP,gBAN7B;MAOEG,iBAPF;MAQEK,eAAe,EAAEl+B,OAAO,CAACtN,MAR3B;MASEyrC,uBAAuB,EAAET;IAT3B,CADFJ,EAYEnlB,eAZFmlB;IAeAnlB,eAAe,CAAC3J,IAAhB2J,CAAqB9R,SAArB8R,EAAgCwlB,eAAhCxlB;IACAA,eAAe,CAAC3J,IAAhB2J,CAAqBtJ,SAArBsJ,EAAgCylB,eAAhCzlB;IACAA,eAAe,CAAC3J,IAAhB2J,CAAqBnY,OAArBmY,EAA8B0lB,iBAA9B1lB;IAEA,OAAO,IAAIzJ,sBAAJ,CAA2B;MAChC/M,IAAI,EAAE,EAD0B;MAEhCsF,SAAS,EAAEu2B,cAAc,CAACv2B,SAFM;MAGhCpC,IAAI,EAAEsT;IAH0B,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;;;EACwC,OAA/BimB,+BAA+B,CACpC78B,MADoC,EAEZ;IACxB,MAAM;MAAC88B,UAAD;MAAar+B,OAAb;MAAsB09B;IAAtB,IAA0Cn8B,MAAhD;IAEAxQ,MAAM,CACJstC,UAAU,CAAC3rC,MAAX2rC,KAAsBlB,mBADlB,EAEH,uBAAsBA,mBAAkB,uBAAsBkB,UAAU,CAAC3rC,MAAO,QAF7E,CAAN3B;;IAKA,IAAI;MACF,MAAM8rC,OAAO,GAAGD,OAAO,CAAClzB,aAARkzB,CAAsByB,UAAtBzB,CAAhB;MACA,MAAMv2B,SAAS,GAAGw2B,OAAO,CAACx2B,SAARw2B,CAAkBr2B,OAAlBq2B,EAAlB;MACA,MAAMhuB,SAAS,GAAG3G,IAAI,CAACsB,IAALtB,CAAUwJ,QAAVxJ,CAAmBlI,OAAnBkI,EAA4B20B,OAAO,CAACvzB,SAApCpB,CAAlB;MAEA,OAAO,KAAKu1B,8BAAL,CAAoC;QACzCp3B,SADyC;QAEzCrG,OAFyC;QAGzC6O,SAHyC;QAIzC6uB;MAJyC,CAApC,CAAP;IALF,EAWE,OAAOt+B,KAAP,EAAc;MACd,MAAM,IAAIlO,KAAJ,CAAW,+BAA8BkO,KAAM,EAA/C,CAAN;IACD;EACF;;AA9FyB;;AAAfo+B,eASJv2B,SATIu2B,GASmB,IAAIx3B,SAAJ,CAC5B,6CAD4B,CATnBw3B;AC9Bb;AACA;AACA;AACA;;MACac,eAAe,GAAG,IAAIt4B,SAAJ,CAC7B,6CAD6B;AAI/B;AACA;AACA;;AACO,MAAMu4B,UAAN,CAAiB;EACtB;;EAEA;;EAGA;AACF;AACA;AACA;AACA;EACExsC,WAAW,CAACysC,MAAD,EAAoBC,UAApB,EAA2C;IAAA,KATtDD,MASsD;IAAA,KAPtDC,UAOsD;IACpD,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,UAAL,GAAkBA,UAAlB;EACD;;AAdqB;AAiBxB;AACA;AACA;;;AACO,MAAMC,MAAN,CAAa;EAClB;;EAEA;;EAEA;;EAGA;AACF;AACA;EACE3sC,WAAW,CAAC4sC,aAAD,EAAwBlc,KAAxB,EAAuCmc,SAAvC,EAA6D;IAAA,KATxED,aASwE;IAAA,KAPxElc,KAOwE;IAAA,KALxEmc,SAKwE;IACtE,KAAKD,aAAL,GAAqBA,aAArB;IACA,KAAKlc,KAAL,GAAaA,KAAb;IACA,KAAKmc,SAAL,GAAiBA,SAAjB;EACD;EAED;AACF;AACA;;;AAnBoB;AAuBpB;AACA;AACA;;;AAzBaF,OAoBJ52B,OApBI42B,GAoBc,IAAIA,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB14B,SAAS,CAAC8B,OAA3B,CApBd42B;AAoIb;AACA;AACA;;AACO,MAAMG,gBAAN,CAAuB;EAC5B;AACF;AACA;EACE9sC,WAAW,GAAG;EAEd;AACF;AACA;;;EAC8B,OAArBijB,qBAAqB,CAC1B7H,WAD0B,EAEJ;IACtB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IAEA,MAAMiO,qBAAqB,GAAGrL,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;IACA,MAAMsL,SAAS,GAAGD,qBAAqB,CAAC9P,MAAtB8P,CAA6B/H,WAAW,CAACtI,IAAzCqQ,CAAlB;IAEA,IAAIlK,IAAJ;;IACA,KAAK,MAAM,CAACoK,MAAD,EAASnK,MAAT,CAAX,IAA+B1Z,MAAM,CAAC8jB,OAAP9jB,CAAeutC,yBAAfvtC,CAA/B,EAA0E;MACxE,IAAI0Z,MAAM,CAACmB,KAAPnB,IAAgBkK,SAApB,EAA+B;QAC7BnK,IAAI,GAAGoK,MAAPpK;QACA;MACD;IACF;;IAED,IAAI,CAACA,IAAL,EAAW;MACT,MAAM,IAAI9Z,KAAJ,CAAU,oDAAV,CAAN;IACD;;IAED,OAAO8Z,IAAP;EACD;EAED;AACF;AACA;;;EACyB,OAAhB+zB,gBAAgB,CACrB5xB,WADqB,EAEE;IACvB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC+I,UAAD;MAAaC;IAAb,IAAuB0J,UAAU,CACrCyqB,yBAAyB,CAACE,UADW,EAErC7xB,WAAW,CAACtI,IAFyB,CAAvC;IAKA,OAAO;MACLo6B,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAEL6C,UAAU,EAAE,IAAI6zB,UAAJ,CACV,IAAIv4B,SAAJ,CAAc0E,UAAU,CAAC8zB,MAAzB,CADU,EAEV,IAAIx4B,SAAJ,CAAc0E,UAAU,CAAC+zB,UAAzB,CAFU,CAFP;MAML9zB,MAAM,EAAE,IAAI+zB,MAAJ,CACN/zB,MAAM,CAACg0B,aADD,EAENh0B,MAAM,CAAC8X,KAFD,EAGN,IAAIzc,SAAJ,CAAc2E,MAAM,CAACi0B,SAArB,CAHM;IANH,CAAP;EAYD;EAED;AACF;AACA;;;EACuB,OAAdM,cAAc,CACnB/xB,WADmB,EAEE;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA0S,UAAU,CAACyqB,yBAAyB,CAACK,QAA3B,EAAqChyB,WAAW,CAACtI,IAAjD,CAAVwP;IAEA,OAAO;MACL4qB,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAELwkB,UAAU,EAAElf,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAF3B;MAGL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF;IAHjC,CAAP;EAKD;EAED;AACF;AACA;;;EACwB,OAAfu3B,eAAe,CACpBjyB,WADoB,EAEE;IACtB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA,MAAM;MAAC09B,aAAD;MAAgBC;IAAhB,IAA0CjrB,UAAU,CACxDyqB,yBAAyB,CAACS,SAD8B,EAExDpyB,WAAW,CAACtI,IAF4C,CAA1D;IAKA,MAAM26B,CAAuB,GAAG;MAC9BP,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MADH;MAE9B8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFR;MAG9B4P,mBAAmB,EAAE,IAAIzR,SAAJ,CAAcq5B,aAAd,CAHS;MAI9BC,sBAAsB,EAAE;QACtBlzB,KAAK,EAAEkzB;MADe;IAJM,CAAhC;;IAQA,IAAInyB,WAAW,CAACxL,IAAZwL,CAAiBza,MAAjBya,GAA0B,CAA9B,EAAiC;MAC/BqyB,CAAC,CAACC,eAAFD,GAAoBryB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAAxC23B;IACD;;IACD,OAAOA,CAAP;EACD;EAED;AACF;AACA;;;EACgC,OAAvBE,uBAAuB,CAC5BvyB,WAD4B,EAEE;IAC9B,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MACJ09B,aADI;MAEJC,sBAFI;MAGJK,aAHI;MAIJC;IAJI,IAKFvrB,UAAU,CACZyqB,yBAAyB,CAACe,iBADd,EAEZ1yB,WAAW,CAACtI,IAFA,CALd;IAUA,MAAM26B,CAA+B,GAAG;MACtCP,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MADK;MAEtCi4B,aAAa,EAAE3yB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFG;MAGtC83B,aAAa,EAAEA,aAHuB;MAItCC,cAAc,EAAE,IAAI55B,SAAJ,CAAc45B,cAAd,CAJsB;MAKtCnoB,mBAAmB,EAAE,IAAIzR,SAAJ,CAAcq5B,aAAd,CALiB;MAMtCC,sBAAsB,EAAE;QACtBlzB,KAAK,EAAEkzB;MADe;IANc,CAAxC;;IAUA,IAAInyB,WAAW,CAACxL,IAAZwL,CAAiBza,MAAjBya,GAA0B,CAA9B,EAAiC;MAC/BqyB,CAAC,CAACC,eAAFD,GAAoBryB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAAxC23B;IACD;;IACD,OAAOA,CAAP;EACD;EAED;AACF;AACA;;;EACoB,OAAXO,WAAW,CAAC5yB,WAAD,EAAwD;IACxE,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA,MAAM;MAAC8T;IAAD,IAAapB,UAAU,CAC3ByqB,yBAAyB,CAACkB,KADC,EAE3B7yB,WAAW,CAACtI,IAFe,CAA7B;IAKA,OAAO;MACLo6B,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAELo4B,gBAAgB,EAAE9yB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFjC;MAGL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAHjC;MAIL4N;IAJK,CAAP;EAMD;EAED;AACF;AACA;;;EACoB,OAAXyqB,WAAW,CAAC/yB,WAAD,EAAwD;IACxE,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA0S,UAAU,CAACyqB,yBAAyB,CAACqB,KAA3B,EAAkChzB,WAAW,CAACtI,IAA9C,CAAVwP;IAEA,OAAO;MACL4qB,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAELu4B,iBAAiB,EAAEjzB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFlC;MAGL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF;IAHjC,CAAP;EAKD;EAED;AACF;AACA;;;EACuB,OAAdw4B,cAAc,CACnBlzB,WADmB,EAEE;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA,MAAM;MAAC8T;IAAD,IAAapB,UAAU,CAC3ByqB,yBAAyB,CAACwB,QADC,EAE3BnzB,WAAW,CAACtI,IAFe,CAA7B;IAKA,MAAM26B,CAAsB,GAAG;MAC7BP,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MADJ;MAE7BmO,QAAQ,EAAE7I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFD;MAG7B8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAHT;MAI7B4N;IAJ6B,CAA/B;;IAMA,IAAItI,WAAW,CAACxL,IAAZwL,CAAiBza,MAAjBya,GAA0B,CAA9B,EAAiC;MAC/BqyB,CAAC,CAACC,eAAFD,GAAoBryB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAAxC23B;IACD;;IACD,OAAOA,CAAP;EACD;EAED;AACF;AACA;;;EACyB,OAAhBe,gBAAgB,CACrBpzB,WADqB,EAEE;IACvB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IACA0S,UAAU,CAACyqB,yBAAyB,CAAC0B,UAA3B,EAAuCrzB,WAAW,CAACtI,IAAnD,CAAVwP;IAEA,OAAO;MACL4qB,WAAW,EAAE9xB,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD5B;MAEL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF;IAFjC,CAAP;EAID;EAED;AACF;AACA;;;EACuB,OAAdoN,cAAc,CAAChO,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACb,MAAVa,CAAiBw5B,YAAY,CAACx5B,SAA9BA,CAAL,EAA+C;MAC7C,MAAM,IAAI/V,KAAJ,CAAU,oDAAV,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACuB,OAAdskB,cAAc,CAAC7T,IAAD,EAAmBgW,cAAnB,EAA2C;IAC9D,IAAIhW,IAAI,CAACjP,MAALiP,GAAcgW,cAAlB,EAAkC;MAChC,MAAM,IAAIzmB,KAAJ,CACH,8BAA6ByQ,IAAI,CAACjP,MAAO,4BAA2BilB,cAAe,EADhF,CAAN;IAGD;EACF;;AAxO2B;AA2O9B;AACA;AACA;;AAWA;AACA;AACA;AACA;;;MACamnB,yBAEZ,GAAGvtC,MAAM,CAACqmB,MAAPrmB,CAAc;EAChBytC,UAAU,EAAE;IACV5yB,KAAK,EAAE,CADG;IAEVnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,YAF0B,EAG1BA,QAH0B,CAApBnE;EAFE,CADI;EAShB01B,SAAS,EAAE;IACTnzB,KAAK,EAAE,CADE;IAETnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,eAAjB,CAF0B,EAG1BnE,YAAY,CAACK,GAAbL,CAAiB,wBAAjBA,CAH0B,CAApBA;EAFC,CATK;EAiBhBs1B,QAAQ,EAAE;IACR/yB,KAAK,EAAE,CADC;IAERnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAApBA;EAFA,CAjBM;EAqBhBm2B,KAAK,EAAE;IACL5zB,KAAK,EAAE,CADF;IAELnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,CAApBA;EAFH,CArBS;EA4BhBy2B,QAAQ,EAAE;IACRl0B,KAAK,EAAE,CADC;IAERnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,CAApBA;EAFA,CA5BM;EAmChB22B,UAAU,EAAE;IACVp0B,KAAK,EAAE,CADG;IAEVnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAApBA;EAFE,CAnCI;EAuChBs2B,KAAK,EAAE;IACL/zB,KAAK,EAAE,CADF;IAELnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAApBA;EAFH,CAvCS;EA2ChBg2B,iBAAiB,EAAE;IACjBzzB,KAAK,EAAE,CADU;IAEjBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,eAAjB,CAF0B,EAG1BnE,YAAY,CAACK,GAAbL,CAAiB,wBAAjBA,CAH0B,EAI1BmE,WAAkB,eAAlB,CAJ0B,EAK1BA,UAAiB,gBAAjB,CAL0B,CAApBnE;EAFS;AA3CH,CAAdtY;AAuDJ;AACA;AACA;;AAMA;AACA;AACA;;MACamvC,wBAAwB,GAAGnvC,MAAM,CAACqmB,MAAPrmB,CAAc;EACpDovC,MAAM,EAAE;IACNv0B,KAAK,EAAE;EADD,CAD4C;EAIpDw0B,UAAU,EAAE;IACVx0B,KAAK,EAAE;EADG;AAJwC,CAAd7a;AASxC;AACA;AACA;;AACO,MAAMkvC,YAAN,CAAmB;EACxB;AACF;AACA;EACE1uC,WAAW,GAAG;EAEd;AACF;AACA;;EAcE;AACF;AACA;;;EACmB,OAAV8uC,UAAU,CAACt/B,MAAD,EAAwD;IACvE,MAAM;MAAC09B,WAAD;MAAcv0B,UAAd;MAA0BC,MAAM,EAAEm2B;IAAlC,IAAiDv/B,MAAvD;IACA,MAAMoJ,MAAc,GAAGm2B,WAAW,IAAIpC,MAAM,CAAC52B,OAA7C;IACA,MAAMkD,IAAI,GAAG8zB,yBAAyB,CAACE,UAAvC;IACA,MAAMn6B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5BN,UAAU,EAAE;QACV8zB,MAAM,EAAEnuC,QAAQ,CAACqa,UAAU,CAAC8zB,MAAX9zB,CAAkBra,QAAlBqa,EAAD,CADN;QAEV+zB,UAAU,EAAEpuC,QAAQ,CAACqa,UAAU,CAAC+zB,UAAX/zB,CAAsBra,QAAtBqa,EAAD;MAFV,CADgB;MAK5BC,MAAM,EAAE;QACNg0B,aAAa,EAAEh0B,MAAM,CAACg0B,aADhB;QAENlc,KAAK,EAAE9X,MAAM,CAAC8X,KAFR;QAGNmc,SAAS,EAAEvuC,QAAQ,CAACsa,MAAM,CAACi0B,SAAPj0B,CAAiBta,QAAjBsa,EAAD;MAHb;IALoB,CAAP,CAAvB;IAWA,MAAMwN,eAAe,GAAG;MACtBxW,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEo3B,WAAT;QAAsBzvB,QAAQ,EAAE,KAAhC;QAAuCC,UAAU,EAAE;MAAnD,CADI,EAEJ;QAAC5H,MAAM,EAAEiL,kBAAT;QAA6BtD,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CAFI,CADgB;MAKtBxI,SAAS,EAAE,KAAKA,SALM;MAMtBpC;IANsB,CAAxB;IAQA,OAAO,IAAI6J,sBAAJ,CAA2ByJ,eAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;;;EAC8B,OAArBJ,qBAAqB,CAC1BxW,MAD0B,EAEb;IACb,MAAM0M,WAAW,GAAG,IAAIW,WAAJ,EAApB;IACAX,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACK,qBAAdL,CAAoC;MAClC9B,UAAU,EAAErU,MAAM,CAACqU,UADe;MAElCC,gBAAgB,EAAEtU,MAAM,CAAC09B,WAFS;MAGlC9oB,UAAU,EAAE5U,MAAM,CAAC4U,UAHe;MAIlCnP,IAAI,EAAEzF,MAAM,CAACyF,IAJqB;MAKlCyO,QAAQ,EAAElU,MAAM,CAACkU,QALiB;MAMlCC,KAAK,EAAE,KAAKA,KANsB;MAOlCzO,SAAS,EAAE,KAAKA;IAPkB,CAApCyQ,CADFzJ;IAYA,MAAM;MAACgxB,WAAD;MAAcv0B,UAAd;MAA0BC;IAA1B,IAAoCpJ,MAA1C;IACA,OAAO0M,WAAW,CAACgB,GAAZhB,CAAgB,KAAK4yB,UAAL,CAAgB;MAAC5B,WAAD;MAAcv0B,UAAd;MAA0BC;IAA1B,CAAhB,CAAhBsD,CAAP;EACD;EAED;AACF;AACA;;;EACsB,OAAb4J,aAAa,CAACtW,MAAD,EAAgD;IAClE,MAAM0M,WAAW,GAAG,IAAIW,WAAJ,EAApB;IACAX,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACG,aAAdH,CAA4B;MAC1B9B,UAAU,EAAErU,MAAM,CAACqU,UADO;MAE1BC,gBAAgB,EAAEtU,MAAM,CAAC09B,WAFC;MAG1BxpB,QAAQ,EAAElU,MAAM,CAACkU,QAHS;MAI1BC,KAAK,EAAE,KAAKA,KAJc;MAK1BzO,SAAS,EAAE,KAAKA;IALU,CAA5ByQ,CADFzJ;IAUA,MAAM;MAACgxB,WAAD;MAAcv0B,UAAd;MAA0BC;IAA1B,IAAoCpJ,MAA1C;IACA,OAAO0M,WAAW,CAACgB,GAAZhB,CAAgB,KAAK4yB,UAAL,CAAgB;MAAC5B,WAAD;MAAcv0B,UAAd;MAA0BC;IAA1B,CAAhB,CAAhBsD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,OAAR8yB,QAAQ,CAACx/B,MAAD,EAA2C;IACxD,MAAM;MAAC09B,WAAD;MAActqB,gBAAd;MAAgC0X;IAAhC,IAA8C9qB,MAApD;IAEA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAACK,QAAvC;IACA,MAAMt6B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,CAAvB;IAEA,OAAO,IAAI4D,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEo3B,WAAT;QAAsBzvB,QAAQ,EAAE,KAAhC;QAAuCC,UAAU,EAAE;MAAnD,CADI,EAEJ;QAAC5H,MAAM,EAAEwkB,UAAT;QAAqB7c,QAAQ,EAAE,KAA/B;QAAsCC,UAAU,EAAE;MAAlD,CAFI,EAGJ;QAAC5H,MAAM,EAAE6K,mBAAT;QAA8BlD,QAAQ,EAAE,KAAxC;QAA+CC,UAAU,EAAE;MAA3D,CAHI,EAIJ;QACE5H,MAAM,EAAEqL,2BADV;QAEE1D,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CAJI,EASJ;QAAC5H,MAAM,EAAEy2B,eAAT;QAA0B9uB,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CATI,EAUJ;QAAC5H,MAAM,EAAE8M,gBAAT;QAA2BnF,QAAQ,EAAE,IAArC;QAA2CC,UAAU,EAAE;MAAvD,CAVI,CADqB;MAa3BxI,SAAS,EAAE,KAAKA,SAbW;MAc3BpC;IAd2B,CAAtB,CAAP;EAgBD;EAED;AACF;AACA;AACA;;;EACkB,OAATm8B,SAAS,CAACz/B,MAAD,EAA4C;IAC1D,MAAM;MACJ09B,WADI;MAEJtqB,gBAFI;MAGJ8C,mBAHI;MAIJ6nB,sBAJI;MAKJG;IALI,IAMFl+B,MANJ;IAQA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAACS,SAAvC;IACA,MAAM16B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5Bq0B,aAAa,EAAEhvC,QAAQ,CAAConB,mBAAmB,CAACpnB,QAApBonB,EAAD,CADK;MAE5B6nB,sBAAsB,EAAEA,sBAAsB,CAAClzB;IAFnB,CAAP,CAAvB;IAKA,MAAMzK,IAAI,GAAG,CACX;MAACkG,MAAM,EAAEo3B,WAAT;MAAsBzvB,QAAQ,EAAE,KAAhC;MAAuCC,UAAU,EAAE;IAAnD,CADW,EAEX;MAAC5H,MAAM,EAAE6K,mBAAT;MAA8BlD,QAAQ,EAAE,KAAxC;MAA+CC,UAAU,EAAE;IAA3D,CAFW,EAGX;MAAC5H,MAAM,EAAE8M,gBAAT;MAA2BnF,QAAQ,EAAE,IAArC;MAA2CC,UAAU,EAAE;IAAvD,CAHW,CAAb;;IAKA,IAAIgwB,eAAJ,EAAqB;MACnB99B,IAAI,CAACvO,IAALuO,CAAU;QAACkG,MAAM,EAAE43B,eAAT;QAA0BjwB,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAAV9N;IACD;;IACD,OAAO,IAAIiN,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAD2B;MAE3BsF,SAAS,EAAE,KAAKA,SAFW;MAG3BpC;IAH2B,CAAtB,CAAP;EAKD;EAED;AACF;AACA;AACA;;;EAC0B,OAAjBo8B,iBAAiB,CAAC1/B,MAAD,EAAoD;IAC1E,MAAM;MACJ09B,WADI;MAEJa,aAFI;MAGJH,aAHI;MAIJC,cAJI;MAKJnoB,mBALI;MAMJ6nB,sBANI;MAOJG;IAPI,IAQFl+B,MARJ;IAUA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAACe,iBAAvC;IACA,MAAMh7B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5Bq0B,aAAa,EAAEhvC,QAAQ,CAAConB,mBAAmB,CAACpnB,QAApBonB,EAAD,CADK;MAE5B6nB,sBAAsB,EAAEA,sBAAsB,CAAClzB,KAFnB;MAG5BuzB,aAAa,EAAEA,aAHa;MAI5BC,cAAc,EAAEvvC,QAAQ,CAACuvC,cAAc,CAACvvC,QAAfuvC,EAAD;IAJI,CAAP,CAAvB;IAOA,MAAMj+B,IAAI,GAAG,CACX;MAACkG,MAAM,EAAEo3B,WAAT;MAAsBzvB,QAAQ,EAAE,KAAhC;MAAuCC,UAAU,EAAE;IAAnD,CADW,EAEX;MAAC5H,MAAM,EAAEi4B,aAAT;MAAwBtwB,QAAQ,EAAE,IAAlC;MAAwCC,UAAU,EAAE;IAApD,CAFW,EAGX;MAAC5H,MAAM,EAAE6K,mBAAT;MAA8BlD,QAAQ,EAAE,KAAxC;MAA+CC,UAAU,EAAE;IAA3D,CAHW,CAAb;;IAKA,IAAIgwB,eAAJ,EAAqB;MACnB99B,IAAI,CAACvO,IAALuO,CAAU;QAACkG,MAAM,EAAE43B,eAAT;QAA0BjwB,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAAV9N;IACD;;IACD,OAAO,IAAIiN,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAD2B;MAE3BsF,SAAS,EAAE,KAAKA,SAFW;MAG3BpC;IAH2B,CAAtB,CAAP;EAKD;EAED;AACF;AACA;;;EACc,OAALsa,KAAK,CAAC5d,MAAD,EAAwC;IAClD,MAAM;MAAC09B,WAAD;MAActqB,gBAAd;MAAgCsrB,gBAAhC;MAAkDxqB;IAAlD,IAA8DlU,MAApE;IAEA,MAAM0M,WAAW,GAAG,IAAIW,WAAJ,EAApB;IACAX,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACG,aAAdH,CAA4B;MAC1B9B,UAAU,EAAEjB,gBADc;MAE1BkB,gBAAgB,EAAEoqB,gBAFQ;MAG1BxqB,QAAQ,EAAE,CAHgB;MAI1BC,KAAK,EAAE,KAAKA,KAJc;MAK1BzO,SAAS,EAAE,KAAKA;IALU,CAA5ByQ,CADFzJ;IASA,MAAMjD,IAAI,GAAG8zB,yBAAyB,CAACkB,KAAvC;IACA,MAAMn7B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAACyK;IAAD,CAAP,CAAvB;IAEA,OAAOxH,WAAW,CAACgB,GAAZhB,CAAgB;MACrBtM,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEo3B,WAAT;QAAsBzvB,QAAQ,EAAE,KAAhC;QAAuCC,UAAU,EAAE;MAAnD,CADI,EAEJ;QAAC5H,MAAM,EAAEo4B,gBAAT;QAA2BzwB,QAAQ,EAAE,KAArC;QAA4CC,UAAU,EAAE;MAAxD,CAFI,EAGJ;QAAC5H,MAAM,EAAE8M,gBAAT;QAA2BnF,QAAQ,EAAE,IAArC;QAA2CC,UAAU,EAAE;MAAvD,CAHI,CADe;MAMrBxI,SAAS,EAAE,KAAKA,SANK;MAOrBpC;IAPqB,CAAhBoJ,CAAP;EASD;EAED;AACF;AACA;;;EACc,OAALizB,KAAK,CAAC3/B,MAAD,EAAwC;IAClD,MAAM;MAAC09B,WAAD;MAAcmB,iBAAd;MAAiCzrB;IAAjC,IAAqDpT,MAA3D;IACA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAACqB,KAAvC;IACA,MAAMt7B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,CAAvB;IAEA,OAAO,IAAI4D,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEo3B,WAAT;QAAsBzvB,QAAQ,EAAE,KAAhC;QAAuCC,UAAU,EAAE;MAAnD,CADI,EAEJ;QAAC5H,MAAM,EAAEu4B,iBAAT;QAA4B5wB,QAAQ,EAAE,KAAtC;QAA6CC,UAAU,EAAE;MAAzD,CAFI,EAGJ;QAAC5H,MAAM,EAAE6K,mBAAT;QAA8BlD,QAAQ,EAAE,KAAxC;QAA+CC,UAAU,EAAE;MAA3D,CAHI,EAIJ;QACE5H,MAAM,EAAEqL,2BADV;QAEE1D,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CAJI,EASJ;QAAC5H,MAAM,EAAE8M,gBAAT;QAA2BnF,QAAQ,EAAE,IAArC;QAA2CC,UAAU,EAAE;MAAvD,CATI,CADqB;MAY3BxI,SAAS,EAAE,KAAKA,SAZW;MAa3BpC;IAb2B,CAAtB,CAAP;EAeD;EAED;AACF;AACA;;;EACiB,OAARs8B,QAAQ,CAAC5/B,MAAD,EAA2C;IACxD,MAAM;MAAC09B,WAAD;MAActqB,gBAAd;MAAgCqB,QAAhC;MAA0CP,QAA1C;MAAoDgqB;IAApD,IACJl+B,MADF;IAEA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAACwB,QAAvC;IACA,MAAMz7B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAACyK;IAAD,CAAP,CAAvB;IAEA,MAAM9T,IAAI,GAAG,CACX;MAACkG,MAAM,EAAEo3B,WAAT;MAAsBzvB,QAAQ,EAAE,KAAhC;MAAuCC,UAAU,EAAE;IAAnD,CADW,EAEX;MAAC5H,MAAM,EAAEmO,QAAT;MAAmBxG,QAAQ,EAAE,KAA7B;MAAoCC,UAAU,EAAE;IAAhD,CAFW,EAGX;MAAC5H,MAAM,EAAE6K,mBAAT;MAA8BlD,QAAQ,EAAE,KAAxC;MAA+CC,UAAU,EAAE;IAA3D,CAHW,EAIX;MACE5H,MAAM,EAAEqL,2BADV;MAEE1D,QAAQ,EAAE,KAFZ;MAGEC,UAAU,EAAE;IAHd,CAJW,EASX;MAAC5H,MAAM,EAAE8M,gBAAT;MAA2BnF,QAAQ,EAAE,IAArC;MAA2CC,UAAU,EAAE;IAAvD,CATW,CAAb;;IAWA,IAAIgwB,eAAJ,EAAqB;MACnB99B,IAAI,CAACvO,IAALuO,CAAU;QAACkG,MAAM,EAAE43B,eAAT;QAA0BjwB,QAAQ,EAAE,KAApC;QAA2CC,UAAU,EAAE;MAAvD,CAAV9N;IACD;;IACD,OAAO,IAAIiN,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAD2B;MAE3BsF,SAAS,EAAE,KAAKA,SAFW;MAG3BpC;IAH2B,CAAtB,CAAP;EAKD;EAED;AACF;AACA;;;EACmB,OAAVu8B,UAAU,CAAC7/B,MAAD,EAA6C;IAC5D,MAAM;MAAC09B,WAAD;MAActqB;IAAd,IAAkCpT,MAAxC;IACA,MAAMyJ,IAAI,GAAG8zB,yBAAyB,CAAC0B,UAAvC;IACA,MAAM37B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,CAAvB;IAEA,OAAO,IAAI4D,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEo3B,WAAT;QAAsBzvB,QAAQ,EAAE,KAAhC;QAAuCC,UAAU,EAAE;MAAnD,CADI,EAEJ;QAAC5H,MAAM,EAAE6K,mBAAT;QAA8BlD,QAAQ,EAAE,KAAxC;QAA+CC,UAAU,EAAE;MAA3D,CAFI,EAGJ;QAAC5H,MAAM,EAAE8M,gBAAT;QAA2BnF,QAAQ,EAAE,IAArC;QAA2CC,UAAU,EAAE;MAAvD,CAHI,CADqB;MAM3BxI,SAAS,EAAE,KAAKA,SANW;MAO3BpC;IAP2B,CAAtB,CAAP;EASD;;AAzSuB;;AAAb47B,aASJx5B,SATIw5B,GASmB,IAAIz6B,SAAJ,CAC5B,6CAD4B,CATnBy6B;AAAAA,aAoBJ/qB,KApBI+qB,GAoBY,GApBZA;ACtfb,MAAM;EAACY,eAAD;EAAkBC;AAAlB,IAA+BC,SAArC;AAEA,MAAMpE,iBAAiB,GAAG,EAA1B;AACA,MAAMqE,sBAAsB,GAAG,EAA/B;AACA,MAAMpE,gBAAgB,GAAG,EAAzB;AACA,MAAMqE,iCAAiC,GAAG,EAA1C;AAEA;AACA;AACA;;AA6BA,MAAMC,4BAA4B,GAAG73B,YAAY,CAACI,MAAbJ,CAAoB,CACvDA,YAAY,CAACiB,EAAbjB,CAAgB,eAAhBA,CADuD,EAEvDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,iBAAjBA,CAFuD,EAGvDA,YAAY,CAACiB,EAAbjB,CAAgB,2BAAhBA,CAHuD,EAIvDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,kBAAjBA,CAJuD,EAKvDA,YAAY,CAACiB,EAAbjB,CAAgB,4BAAhBA,CALuD,EAMvDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,mBAAjBA,CANuD,EAOvDA,YAAY,CAAC0zB,GAAb1zB,CAAiB,iBAAjBA,CAPuD,EAQvDA,YAAY,CAACiB,EAAbjB,CAAgB,yBAAhBA,CARuD,EASvDA,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsB,YAAtBA,CATuD,EAUvDA,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsB,WAAtBA,CAVuD,EAWvDA,YAAY,CAACiB,EAAbjB,CAAgB,YAAhBA,CAXuD,CAApBA,CAArC;;AAcO,MAAM83B,gBAAN,CAAuB;EAC5B;AACF;AACA;EACE5vC,WAAW,GAAG;EAEd;AACF;AACA;;EAKE;AACF;AACA;AACA;;;EAC8B,OAArB6vC,qBAAqB,CAC1Bv7B,SAD0B,EAElB;IACRtV,MAAM,CACJsV,SAAS,CAAC3T,MAAV2T,KAAqB+2B,gBADjB,EAEH,sBAAqBA,gBAAiB,uBAAsB/2B,SAAS,CAAC3T,MAAO,QAF1E,CAAN3B;;IAKA,IAAI;MACF,OAAOR,MAAM,CAACG,IAAPH,CACLsxC,IAAI,CAACC,UAALD,CAAgBxqC,MAAhBwqC,CAAuBxxC,QAAQ,CAACgW,SAAD,CAA/Bw7B,EAA4CrqC,MAA5CqqC,EADKtxC,EAELwC,KAFKxC,CAEC,CAACixC,sBAFFjxC,CAAP;IADF,EAIE,OAAO6O,KAAP,EAAc;MACd,MAAM,IAAIlO,KAAJ,CAAW,wCAAuCkO,KAAM,EAAxD,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;;;EACuC,OAA9Bq+B,8BAA8B,CACnCl8B,MADmC,EAEX;IACxB,MAAM;MAAC8E,SAAD;MAAYrG,OAAZ;MAAqB6O,SAArB;MAAgCkzB,UAAhC;MAA4CrE;IAA5C,IACJn8B,MADF;IAEA,OAAOogC,gBAAgB,CAACK,+BAAjBL,CAAiD;MACtDM,UAAU,EAAEN,gBAAgB,CAACC,qBAAjBD,CAAuCt7B,SAAvCs7B,CAD0C;MAEtD3hC,OAFsD;MAGtD6O,SAHsD;MAItDkzB,UAJsD;MAKtDrE;IALsD,CAAjDiE,CAAP;EAOD;EAED;AACF;AACA;AACA;;;EACwC,OAA/BK,+BAA+B,CACpCzgC,MADoC,EAEZ;IACxB,MAAM;MACJ0gC,UAAU,EAAEC,UADR;MAEJliC,OAFI;MAGJ6O,SAHI;MAIJkzB,UAJI;MAKJrE,gBAAgB,GAAG;IALf,IAMFn8B,MANJ;IAQA,IAAI0gC,UAAJ;;IACA,IAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;MAClC,IAAIA,UAAU,CAACC,UAAXD,CAAsB,IAAtBA,CAAJ,EAAiC;QAC/BD,UAAU,GAAG1xC,MAAM,CAACG,IAAPH,CAAY2xC,UAAU,CAACE,MAAXF,CAAkB,CAAlBA,CAAZ3xC,EAAkC,KAAlCA,CAAb0xC;MADF,OAEO;QACLA,UAAU,GAAG1xC,MAAM,CAACG,IAAPH,CAAY2xC,UAAZ3xC,EAAwB,KAAxBA,CAAb0xC;MACD;IALH,OAMO;MACLA,UAAU,GAAGC,UAAbD;IACD;;IAEDlxC,MAAM,CACJkxC,UAAU,CAACvvC,MAAXuvC,KAAsBT,sBADlB,EAEH,mBAAkBA,sBAAuB,uBAAsBS,UAAU,CAACvvC,MAAO,QAF9E,CAAN3B;IAKA,MAAMsxC,SAAS,GAAG,IAAIZ,iCAAtB;IACA,MAAMa,gBAAgB,GAAGD,SAAzB;IACA,MAAMzE,eAAe,GAAGyE,SAAS,GAAGJ,UAAU,CAACvvC,MAA/C;IACA,MAAMmrC,iBAAiB,GAAGD,eAAe,GAAG/uB,SAAS,CAACnc,MAA5BkrC,GAAqC,CAA/D;IACA,MAAME,aAAa,GAAG,CAAtB;IAEA,MAAM3lB,eAAe,GAAG5nB,MAAM,CAACqW,KAAPrW,CACtBmxC,4BAA4B,CAACj3B,IAA7Bi3B,GAAoC1hC,OAAO,CAACtN,MADtBnC,CAAxB;IAIAmxC,4BAA4B,CAACz8B,MAA7By8B,CACE;MACE5D,aADF;MAEEF,eAFF;MAGEI,yBAAyB,EAAEN,gBAH7B;MAIE4E,gBAJF;MAKEC,0BAA0B,EAAE7E,gBAL9B;MAMEG,iBANF;MAOEK,eAAe,EAAEl+B,OAAO,CAACtN,MAP3B;MAQEyrC,uBAAuB,EAAET,gBAR3B;MASE7uB,SAAS,EAAExe,QAAQ,CAACwe,SAAD,CATrB;MAUEozB,UAAU,EAAE5xC,QAAQ,CAAC4xC,UAAD,CAVtB;MAWEF;IAXF,CADFL,EAcEvpB,eAdFupB;IAiBAvpB,eAAe,CAAC3J,IAAhB2J,CAAqB9nB,QAAQ,CAAC2P,OAAD,CAA7BmY,EAAwCupB,4BAA4B,CAACj3B,IAArE0N;IAEA,OAAO,IAAIzJ,sBAAJ,CAA2B;MAChC/M,IAAI,EAAE,EAD0B;MAEhCsF,SAAS,EAAE06B,gBAAgB,CAAC16B,SAFI;MAGhCpC,IAAI,EAAEsT;IAH0B,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;;;EACwC,OAA/BimB,+BAA+B,CACpC78B,MADoC,EAEZ;IACxB,MAAM;MAAC88B,UAAU,EAAEmE,IAAb;MAAmBxiC,OAAnB;MAA4B09B;IAA5B,IAAgDn8B,MAAtD;IAEAxQ,MAAM,CACJyxC,IAAI,CAAC9vC,MAAL8vC,KAAgBrF,iBADZ,EAEH,uBAAsBA,iBAAkB,uBAAsBqF,IAAI,CAAC9vC,MAAO,QAFvE,CAAN3B;;IAKA,IAAI;MACF,MAAMstC,UAAU,GAAGhuC,QAAQ,CAACmyC,IAAD,CAA3B;MACA,MAAMn8B,SAAS,GAAGg7B,eAAe,CAAChD,UAAD,EAAa,KAAb,CAAfgD,CAAmCtuC,KAAnCsuC,CAAyC,CAAzCA,CAAlB,CAFE;;MAGF,MAAMoB,WAAW,GAAGlyC,MAAM,CAACG,IAAPH,CAClBsxC,IAAI,CAACC,UAALD,CAAgBxqC,MAAhBwqC,CAAuBxxC,QAAQ,CAAC2P,OAAD,CAA/B6hC,EAA0CrqC,MAA1CqqC,EADkBtxC,CAApB;MAGA,MAAM;QAACse,SAAD;QAAY6zB,KAAK,EAAEX;MAAnB,IAAiCT,SAAS,CAACmB,WAAD,EAAcpE,UAAd,CAAhD;MAEA,OAAO,KAAKZ,8BAAL,CAAoC;QACzCp3B,SADyC;QAEzCrG,OAFyC;QAGzC6O,SAHyC;QAIzCkzB,UAJyC;QAKzCrE;MALyC,CAApC,CAAP;IARF,EAeE,OAAOt+B,KAAP,EAAc;MACd,MAAM,IAAIlO,KAAJ,CAAW,+BAA8BkO,KAAM,EAA/C,CAAN;IACD;EACF;;AAvJ2B;;AAAjBuiC,iBASJ16B,SATI06B,GASmB,IAAI37B,SAAJ,CAC5B,6CAD4B,CATnB27B;MClDAgB,kBAAkB,GAAG,IAAI38B,SAAJ,CAChC,6CADgC;AAIlC;AACA;AACA;;AAoBA,MAAM48B,UAAU,GAAG1d,IAAI,CAAC;EACtBjjB,IAAI,EAAEyiB,MAAM,EADU;EAEtBme,OAAO,EAAEvd,QAAQ,CAACZ,MAAM,EAAP,CAFK;EAGtBoe,OAAO,EAAExd,QAAQ,CAACZ,MAAM,EAAP,CAHK;EAItBqe,eAAe,EAAEzd,QAAQ,CAACZ,MAAM,EAAP;AAJH,CAAD,CAAvB;AAOA;AACA;AACA;;AACO,MAAMse,aAAN,CAAoB;EACzB;AACF;AACA;;EAEE;AACF;AACA;;EAGE;AACF;AACA;AACA;AACA;AACA;EACEjxC,WAAW,CAAC8L,GAAD,EAAiBqB,IAAjB,EAA6B;IAAA,KAZxCrB,GAYwC;IAAA,KARxCqB,IAQwC;IACtC,KAAKrB,GAAL,GAAWA,GAAX;IACA,KAAKqB,IAAL,GAAYA,IAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACuB,OAAd+jC,cAAc,CACnBtyC,MADmB,EAEG;IACtB,MAAM8a,aAAa,GAAG,EAAtB;IAEA,IAAI0C,SAAS,GAAG,CAAC,GAAGxd,MAAJ,CAAhB;IACA,MAAMuyC,cAAc,GAAGh2B,aAAsBiB,SAAtB,CAAvB;IACA,IAAI+0B,cAAc,KAAK,CAAvB,EAA0B,OAAO,IAAP;IAE1B,MAAMC,UAA4B,GAAG,EAArC;;IACA,KAAK,IAAI3wC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1B,MAAM6T,SAAS,GAAG,IAAIL,SAAJ,CAAcmI,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmB1C,aAAnB0C,CAAd,CAAlB;MACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgB1C,aAAhB0C,CAAZA;MACA,MAAMqB,QAAQ,GAAGrB,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,EAAmB,CAAnBA,EAAsB,CAAtBA,MAA6B,CAA9C;MACAA,SAAS,GAAGA,SAAS,CAACpb,KAAVob,CAAgB,CAAhBA,CAAZA;MACAg1B,UAAU,CAAC/vC,IAAX+vC,CAAgB;QAAC98B,SAAD;QAAYmJ;MAAZ,CAAhB2zB;IACD;;IAED,IAAIA,UAAU,CAAC,CAAD,CAAVA,CAAc98B,SAAd88B,CAAwB/8B,MAAxB+8B,CAA+BR,kBAA/BQ,CAAJ,EAAwD;MACtD,IAAIA,UAAU,CAAC,CAAD,CAAVA,CAAc3zB,QAAlB,EAA4B;QAC1B,MAAM4zB,OAAY,GAAGp1B,aAAoB5I,MAApB4I,CAA2Bzd,MAAM,CAACG,IAAPH,CAAY4d,SAAZ5d,CAA3Byd,CAArB;QACA,MAAM9O,IAAI,GAAG2C,IAAI,CAACuc,KAALvc,CAAWuhC,OAAXvhC,CAAb;QACAwhC,QAAU,CAACnkC,IAAD,EAAO0jC,UAAP,CAAVS;QACA,OAAO,IAAIL,aAAJ,CAAkBG,UAAU,CAAC,CAAD,CAAVA,CAAc98B,SAAhC,EAA2CnH,IAA3C,CAAP;MACD;IACF;;IAED,OAAO,IAAP;EACD;;AAxDwB;;MCzCdokC,eAAe,GAAG,IAAIt9B,SAAJ,CAC7B,6CAD6B;AAkC/B;AACA;AACA;AACA;AACA;;AACA,MAAMu9B,iBAAiB,GAAG15B,YAAY,CAACI,MAAbJ,CAAoB,CAC5CmE,UAAiB,YAAjB,CAD4C,EAE5CA,UAAiB,sBAAjB,CAF4C,EAG5CnE,YAAY,CAACiB,EAAbjB,CAAgB,YAAhBA,CAH4C,EAI5CA,YAAY,CAAC0K,IAAb1K,EAJ4C;AAK5CA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAAC0K,IAAb1K,CAAkB,MAAlBA,CADkB,EAElBA,YAAY,CAACK,GAAbL,CAAiB,mBAAjBA,CAFkB,CAApBA,CADFA,EAKEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CALFA,EAME,OANFA,CAL4C,EAa5CA,YAAY,CAACiB,EAAbjB,CAAgB,eAAhBA,CAb4C,EAc5CA,YAAY,CAAC0K,IAAb1K,CAAkB,UAAlBA,CAd4C,EAe5CA,YAAY,CAAC0K,IAAb1K,EAf4C;AAgB5CA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAAC0K,IAAb1K,CAAkB,OAAlBA,CADkB,EAElBmE,UAAiB,iBAAjB,CAFkB,CAApBnE,CADFA,EAKEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CALFA,EAME,kBANFA,CAhB4C,EAwB5CA,YAAY,CAACI,MAAbJ,CACE,CACEA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBmE,UAAiB,kBAAjB,CADkB,EAElBnE,YAAY,CAAC0K,IAAb1K,CAAkB,6BAAlBA,CAFkB,EAGlBA,YAAY,CAAC0K,IAAb1K,CAAkB,aAAlBA,CAHkB,CAApBA,CADFA,EAME,EANFA,EAOE,KAPFA,CADF,EAUEA,YAAY,CAAC0K,IAAb1K,CAAkB,KAAlBA,CAVF,EAWEA,YAAY,CAACiB,EAAbjB,CAAgB,SAAhBA,CAXF,CADFA,EAcE,aAdFA,CAxB4C,EAwC5CA,YAAY,CAAC0K,IAAb1K,EAxC4C;AAyC5CA,YAAY,CAACiE,GAAbjE,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAAC0K,IAAb1K,CAAkB,OAAlBA,CADkB,EAElBA,YAAY,CAAC0K,IAAb1K,CAAkB,SAAlBA,CAFkB,EAGlBA,YAAY,CAAC0K,IAAb1K,CAAkB,aAAlBA,CAHkB,CAApBA,CADFA,EAMEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CANFA,EAOE,cAPFA,CAzC4C,EAkD5CA,YAAY,CAACI,MAAbJ,CACE,CAACA,YAAY,CAAC0K,IAAb1K,CAAkB,MAAlBA,CAAD,EAA4BA,YAAY,CAAC0K,IAAb1K,CAAkB,WAAlBA,CAA5B,CADFA,EAEE,eAFFA,CAlD4C,CAApBA,CAA1B;AAoEA;AACA;AACA;;AACO,MAAM25B,WAAN,CAAkB;EAWvB;AACF;AACA;EACEzxC,WAAW,CAAC0O,IAAD,EAAwB;IAAA,KAbnC6rB,UAamC;IAAA,KAZnCmX,oBAYmC;IAAA,KAXnC/W,UAWmC;IAAA,KAVnCE,QAUmC;IAAA,KATnC8W,KASmC;IAAA,KARnCC,gBAQmC;IAAA,KAPnCC,WAOmC;IAAA,KANnCnX,YAMmC;IAAA,KALnCoX,aAKmC;IACjC,KAAKvX,UAAL,GAAkB7rB,IAAI,CAAC6rB,UAAvB;IACA,KAAKmX,oBAAL,GAA4BhjC,IAAI,CAACgjC,oBAAjC;IACA,KAAK/W,UAAL,GAAkBjsB,IAAI,CAACisB,UAAvB;IACA,KAAKE,QAAL,GAAgBnsB,IAAI,CAACmsB,QAArB;IACA,KAAK8W,KAAL,GAAajjC,IAAI,CAACijC,KAAlB;IACA,KAAKC,gBAAL,GAAwBljC,IAAI,CAACkjC,gBAA7B;IACA,KAAKC,WAAL,GAAmBnjC,IAAI,CAACmjC,WAAxB;IACA,KAAKnX,YAAL,GAAoBhsB,IAAI,CAACgsB,YAAzB;IACA,KAAKoX,aAAL,GAAqBpjC,IAAI,CAACojC,aAA1B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACwB,OAAfhvB,eAAe,CACpBlkB,MADoB,EAEP;IACb,MAAMmzC,aAAa,GAAG,CAAtB;IACA,MAAMC,EAAE,GAAGR,iBAAiB,CAACn+B,MAAlBm+B,CAAyBlzC,QAAQ,CAACM,MAAD,CAAjC4yC,EAA2CO,aAA3CP,CAAX;IAEA,IAAI3W,QAAuB,GAAGmX,EAAE,CAACnX,QAAjC;;IACA,IAAI,CAACmX,EAAE,CAACC,aAAR,EAAuB;MACrBpX,QAAQ,GAAG,IAAXA;IACD;;IAED,OAAO,IAAI4W,WAAJ,CAAgB;MACrBlX,UAAU,EAAE,IAAItmB,SAAJ,CAAc+9B,EAAE,CAACzX,UAAjB,CADS;MAErBmX,oBAAoB,EAAE,IAAIz9B,SAAJ,CAAc+9B,EAAE,CAACN,oBAAjB,CAFD;MAGrB/W,UAAU,EAAEqX,EAAE,CAACrX,UAHM;MAIrBgX,KAAK,EAAEK,EAAE,CAACL,KAJW;MAKrB9W,QALqB;MAMrB+W,gBAAgB,EAAEI,EAAE,CAACJ,gBAAHI,CAAoBr+B,GAApBq+B,CAAwBE,oBAAxBF,CANG;MAOrBH,WAAW,EAAEM,cAAc,CAACH,EAAE,CAACH,WAAJ,CAPN;MAQrBnX,YAAY,EAAEsX,EAAE,CAACtX,YARI;MASrBoX,aAAa,EAAEE,EAAE,CAACF;IATG,CAAhB,CAAP;EAWD;;AAtDsB;;AAyDzB,SAASI,oBAAT,QAAyE;EAAA,IAA3C;IAACxhB,KAAD;IAAQ0hB;EAAR,CAA2C;EACvE,OAAO;IACL1hB,KADK;IAEL0hB,eAAe,EAAE,IAAIn+B,SAAJ,CAAcm+B,eAAd;EAFZ,CAAP;AAID;;AAED,SAASC,gBAAT,QAIe;EAAA,IAJW;IACxBzvB,gBADwB;IAExB0vB,2BAFwB;IAGxBC;EAHwB,CAIX;EACb,OAAO;IACL3vB,gBAAgB,EAAE,IAAI3O,SAAJ,CAAc2O,gBAAd,CADb;IAEL0vB,2BAFK;IAGLC;EAHK,CAAP;AAKD;;AAED,SAASJ,cAAT,QAQiB;EAAA,IARO;IACtBjvC,GADsB;IAEtBsvC,GAFsB;IAGtBC;EAHsB,CAQP;;EACf,IAAIA,OAAJ,EAAa;IACX,OAAO,EAAP;EACD;;EAED,OAAO,CAAC,GAAGvvC,GAAG,CAAClC,KAAJkC,CAAUsvC,GAAG,GAAG,CAAhBtvC,EAAmByQ,GAAnBzQ,CAAuBmvC,gBAAvBnvC,CAAJ,EAA8C,GAAGA,GAAG,CAAClC,KAAJkC,CAAU,CAAVA,EAAasvC,GAAbtvC,CAAjD,CAAP;AACD;ACrMD;AACA;AACA;;;AACO,MAAMwvC,QAAN,CAAe;EAIA;EAEpB1yC,WAAW,CACTu6B,UADS,EAET6X,eAFS,EAGTV,oBAHS,EAIT/W,UAJS,EAKT;IAAA,KAVFJ,UAUE;IAAA,KATF6X,eASE;IAAA,KARFV,oBAQE;IAAA,KAPF/W,UAOE;IACA,KAAKJ,UAAL,GAAkBA,UAAlB;IACA,KAAK6X,eAAL,GAAuBA,eAAvB;IACA,KAAKV,oBAAL,GAA4BA,oBAA5B;IACA,KAAK/W,UAAL,GAAkBA,UAAlB;EACD;;AAhBmB;AAmBtB;AACA;AACA;;AAsCA;AACA;AACA;;;AACO,MAAMgY,eAAN,CAAsB;EAC3B;AACF;AACA;EACE3yC,WAAW,GAAG;EAEd;AACF;AACA;;;EAC8B,OAArBijB,qBAAqB,CAC1B7H,WAD0B,EAEL;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IAEA,MAAMiO,qBAAqB,GAAGrL,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;IACA,MAAMsL,SAAS,GAAGD,qBAAqB,CAAC9P,MAAtB8P,CAA6B/H,WAAW,CAACtI,IAAzCqQ,CAAlB;IAEA,IAAIlK,IAAJ;;IACA,KAAK,MAAM,CAACoK,MAAD,EAASnK,MAAT,CAAX,IAA+B1Z,MAAM,CAAC8jB,OAAP9jB,CAAeozC,wBAAfpzC,CAA/B,EAAyE;MACvE,IAAI0Z,MAAM,CAACmB,KAAPnB,IAAgBkK,SAApB,EAA+B;QAC7BnK,IAAI,GAAGoK,MAAPpK;QACA;MACD;IACF;;IAED,IAAI,CAACA,IAAL,EAAW;MACT,MAAM,IAAI9Z,KAAJ,CAAU,mDAAV,CAAN;IACD;;IAED,OAAO8Z,IAAP;EACD;EAED;AACF;AACA;;;EACgC,OAAvB45B,uBAAuB,CAC5Bz3B,WAD4B,EAEH;IACzB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAACkJ;IAAD,IAAawJ,UAAU,CAC3BswB,wBAAwB,CAACE,iBADE,EAE3B13B,WAAW,CAACtI,IAFe,CAA7B;IAKA,OAAO;MACLwnB,UAAU,EAAElf,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELykB,UAAU,EAAEnf,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAF3B;MAGLgD,QAAQ,EAAE,IAAI45B,QAAJ,CACR,IAAIz+B,SAAJ,CAAc6E,QAAQ,CAACyhB,UAAvB,CADQ,EAER,IAAItmB,SAAJ,CAAc6E,QAAQ,CAACs5B,eAAvB,CAFQ,EAGR,IAAIn+B,SAAJ,CAAc6E,QAAQ,CAAC44B,oBAAvB,CAHQ,EAIR54B,QAAQ,CAAC6hB,UAJD;IAHL,CAAP;EAUD;EAED;AACF;AACA;;;EACwB,OAAf0S,eAAe,CACpBjyB,WADoB,EAEC;IACrB,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC09B,aAAD;MAAgByF;IAAhB,IAAyCzwB,UAAU,CACvDswB,wBAAwB,CAACpF,SAD8B,EAEvDpyB,WAAW,CAACtI,IAF2C,CAAzD;IAKA,OAAO;MACLwnB,UAAU,EAAElf,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAEL8M,gBAAgB,EAAExH,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAFjC;MAGL4P,mBAAmB,EAAE,IAAIzR,SAAJ,CAAcq5B,aAAd,CAHhB;MAILyF,qBAAqB,EAAE;QACrB14B,KAAK,EAAE04B;MADc;IAJlB,CAAP;EAQD;EAED;AACF;AACA;;;EACuB,OAAdzE,cAAc,CACnBlzB,WADmB,EAEY;IAC/B,KAAK8H,cAAL,CAAoB9H,WAAW,CAAClG,SAAhC;IACA,KAAKuO,cAAL,CAAoBrI,WAAW,CAACxL,IAAhC,EAAsC,CAAtC;IAEA,MAAM;MAAC8T;IAAD,IAAapB,UAAU,CAC3BswB,wBAAwB,CAACrE,QADE,EAE3BnzB,WAAW,CAACtI,IAFe,CAA7B;IAKA,OAAO;MACLwnB,UAAU,EAAElf,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAD3B;MAELk9B,0BAA0B,EAAE53B,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF,MAF3C;MAGL4N,QAHK;MAILO,QAAQ,EAAE7I,WAAW,CAACxL,IAAZwL,CAAiB,CAAjBA,EAAoBtF;IAJzB,CAAP;EAMD;EAED;AACF;AACA;;;EACuB,OAAdoN,cAAc,CAAChO,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACb,MAAVa,CAAiB+9B,WAAW,CAAC/9B,SAA7BA,CAAL,EAA8C;MAC5C,MAAM,IAAI/V,KAAJ,CAAU,mDAAV,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACuB,OAAdskB,cAAc,CAAC7T,IAAD,EAAmBgW,cAAnB,EAA2C;IAC9D,IAAIhW,IAAI,CAACjP,MAALiP,GAAcgW,cAAlB,EAAkC;MAChC,MAAM,IAAIzmB,KAAJ,CACH,8BAA6ByQ,IAAI,CAACjP,MAAO,4BAA2BilB,cAAe,EADhF,CAAN;IAGD;EACF;;AA1H0B;AA6H7B;AACA;AACA;;;AAMA,MAAMgtB,wBAEL,GAAGpzC,MAAM,CAACqmB,MAAPrmB,CAAc;EAChBszC,iBAAiB,EAAE;IACjBz4B,KAAK,EAAE,CADU;IAEjBnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAF0B,CAApBnE;EAFS,CADH;EAQhB01B,SAAS,EAAE;IACTnzB,KAAK,EAAE,CADE;IAETnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BmE,UAAiB,eAAjB,CAF0B,EAG1BnE,YAAY,CAACK,GAAbL,CAAiB,uBAAjBA,CAH0B,CAApBA;EAFC,CARK;EAgBhBy2B,QAAQ,EAAE;IACRl0B,KAAK,EAAE,CADC;IAERnB,MAAM,EAAEpB,YAAY,CAACI,MAAbJ,CAAoB,CAC1BA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD0B,EAE1BA,YAAY,CAACe,IAAbf,CAAkB,UAAlBA,CAF0B,CAApBA;EAFA;AAhBM,CAAdtY,CAFJ;AA2BA;AACA;AACA;;AAMA;AACA;AACA;;MACa0zC,uBAAuB,GAAG1zC,MAAM,CAACqmB,MAAPrmB,CAAc;EACnD2zC,KAAK,EAAE;IACL94B,KAAK,EAAE;EADF,CAD4C;EAInDw0B,UAAU,EAAE;IACVx0B,KAAK,EAAE;EADG;AAJuC,CAAd7a;AASvC;AACA;AACA;;AACO,MAAMyzC,WAAN,CAAkB;EACvB;AACF;AACA;EACEjzC,WAAW,GAAG;EAEd;AACF;AACA;;EAcE;AACF;AACA;;;EAC0B,OAAjBozC,iBAAiB,CACtB5jC,MADsB,EAEE;IACxB,MAAM;MAAC8qB,UAAD;MAAaC,UAAb;MAAyBzhB;IAAzB,IAAqCtJ,MAA3C;IACA,MAAMyJ,IAAI,GAAG25B,wBAAwB,CAACE,iBAAtC;IACA,MAAMhgC,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5BH,QAAQ,EAAE;QACRyhB,UAAU,EAAEj8B,QAAQ,CAACwa,QAAQ,CAACyhB,UAATzhB,CAAoBxa,QAApBwa,EAAD,CADZ;QAERs5B,eAAe,EAAE9zC,QAAQ,CAACwa,QAAQ,CAACs5B,eAATt5B,CAAyBxa,QAAzBwa,EAAD,CAFjB;QAGR44B,oBAAoB,EAAEpzC,QAAQ,CAC5Bwa,QAAQ,CAAC44B,oBAAT54B,CAA8Bxa,QAA9Bwa,EAD4B,CAHtB;QAMR6hB,UAAU,EAAE7hB,QAAQ,CAAC6hB;MANb;IADkB,CAAP,CAAvB;IAUA,MAAMvU,eAAe,GAAG;MACtBxW,IAAI,EAAE,CACJ;QAACkG,MAAM,EAAEwkB,UAAT;QAAqB7c,QAAQ,EAAE,KAA/B;QAAsCC,UAAU,EAAE;MAAlD,CADI,EAEJ;QAAC5H,MAAM,EAAEiL,kBAAT;QAA6BtD,QAAQ,EAAE,KAAvC;QAA8CC,UAAU,EAAE;MAA1D,CAFI,EAGJ;QAAC5H,MAAM,EAAE6K,mBAAT;QAA8BlD,QAAQ,EAAE,KAAxC;QAA+CC,UAAU,EAAE;MAA3D,CAHI,EAIJ;QAAC5H,MAAM,EAAEykB,UAAT;QAAqB9c,QAAQ,EAAE,IAA/B;QAAqCC,UAAU,EAAE;MAAjD,CAJI,CADgB;MAOtBxI,SAAS,EAAE,KAAKA,SAPM;MAQtBpC;IARsB,CAAxB;IAUA,OAAO,IAAI6J,sBAAJ,CAA2ByJ,eAA3B,CAAP;EACD;EAED;AACF;AACA;;;EACsB,OAAbN,aAAa,CAACtW,MAAD,EAA+C;IACjE,MAAM0M,WAAW,GAAG,IAAIW,WAAJ,EAApB;IACAX,WAAW,CAACgB,GAAZhB,CACEyJ,aAAa,CAACG,aAAdH,CAA4B;MAC1B9B,UAAU,EAAErU,MAAM,CAACqU,UADO;MAE1BC,gBAAgB,EAAEtU,MAAM,CAAC8qB,UAFC;MAG1B5W,QAAQ,EAAElU,MAAM,CAACkU,QAHS;MAI1BC,KAAK,EAAE,KAAKA,KAJc;MAK1BzO,SAAS,EAAE,KAAKA;IALU,CAA5ByQ,CADFzJ;IAUA,OAAOA,WAAW,CAACgB,GAAZhB,CACL,KAAKk3B,iBAAL,CAAuB;MACrB9Y,UAAU,EAAE9qB,MAAM,CAAC8qB,UADE;MAErBC,UAAU,EAAE/qB,MAAM,CAACsJ,QAAPtJ,CAAgB+qB,UAFP;MAGrBzhB,QAAQ,EAAEtJ,MAAM,CAACsJ;IAHI,CAAvB,CADKoD,CAAP;EAOD;EAED;AACF;AACA;;;EACkB,OAAT+yB,SAAS,CAACz/B,MAAD,EAA2C;IACzD,MAAM;MACJ8qB,UADI;MAEJ1X,gBAFI;MAGJ8C,mBAHI;MAIJqtB;IAJI,IAKFvjC,MALJ;IAOA,MAAMyJ,IAAI,GAAG25B,wBAAwB,CAACpF,SAAtC;IACA,MAAM16B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAC5Bq0B,aAAa,EAAEhvC,QAAQ,CAAConB,mBAAmB,CAACpnB,QAApBonB,EAAD,CADK;MAE5BqtB,qBAAqB,EAAEA,qBAAqB,CAAC14B;IAFjB,CAAP,CAAvB;IAKA,MAAMzK,IAAI,GAAG,CACX;MAACkG,MAAM,EAAEwkB,UAAT;MAAqB7c,QAAQ,EAAE,KAA/B;MAAsCC,UAAU,EAAE;IAAlD,CADW,EAEX;MAAC5H,MAAM,EAAE6K,mBAAT;MAA8BlD,QAAQ,EAAE,KAAxC;MAA+CC,UAAU,EAAE;IAA3D,CAFW,EAGX;MAAC5H,MAAM,EAAE8M,gBAAT;MAA2BnF,QAAQ,EAAE,IAArC;MAA2CC,UAAU,EAAE;IAAvD,CAHW,CAAb;IAMA,OAAO,IAAIb,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAD2B;MAE3BsF,SAAS,EAAE,KAAKA,SAFW;MAG3BpC;IAH2B,CAAtB,CAAP;EAKD;EAED;AACF;AACA;;;EACiB,OAARs8B,QAAQ,CAAC5/B,MAAD,EAAqD;IAClE,MAAM;MAAC8qB,UAAD;MAAa0Y,0BAAb;MAAyCtvB,QAAzC;MAAmDO;IAAnD,IAA+DzU,MAArE;IACA,MAAMyJ,IAAI,GAAG25B,wBAAwB,CAACrE,QAAtC;IACA,MAAMz7B,IAAI,GAAGqP,UAAU,CAAClJ,IAAD,EAAO;MAACyK;IAAD,CAAP,CAAvB;IAEA,MAAM9T,IAAI,GAAG,CACX;MAACkG,MAAM,EAAEwkB,UAAT;MAAqB7c,QAAQ,EAAE,KAA/B;MAAsCC,UAAU,EAAE;IAAlD,CADW,EAEX;MAAC5H,MAAM,EAAEmO,QAAT;MAAmBxG,QAAQ,EAAE,KAA7B;MAAoCC,UAAU,EAAE;IAAhD,CAFW,EAGX;MAAC5H,MAAM,EAAEk9B,0BAAT;MAAqCv1B,QAAQ,EAAE,IAA/C;MAAqDC,UAAU,EAAE;IAAjE,CAHW,CAAb;IAMA,OAAO,IAAIb,WAAJ,GAAkBK,GAAlB,CAAsB;MAC3BtN,IAD2B;MAE3BsF,SAAS,EAAE,KAAKA,SAFW;MAG3BpC;IAH2B,CAAtB,CAAP;EAKD;;AA9HsB;;AAAZmgC,YASJ/9B,SATI+9B,GASmB,IAAIh/B,SAAJ,CAC5B,6CAD4B,CATnBg/B;AAAAA,YAoBJtvB,KApBIsvB,GAoBY,IApBZA;AC5Pb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeI,4BAAf,CACLhyB,UADK,EAELinB,cAFK,EAGLh2B,OAHK,EAI0B;EAC/B,MAAMgP,WAAW,GAAGhP,OAAO,IAAI;IAC7BiP,aAAa,EAAEjP,OAAO,CAACiP,aADM;IAE7BC,mBAAmB,EAAElP,OAAO,CAACkP,mBAARlP,IAA+BA,OAAO,CAACmP;EAF/B,CAA/B;EAKA,MAAM3E,SAAS,GAAG,MAAMuE,UAAU,CAACgnB,kBAAXhnB,CACtBinB,cADsBjnB,EAEtBC,WAFsBD,CAAxB;EAKA,MAAMO,MAAM,GAAG,CACb,MAAMP,UAAU,CAACQ,kBAAXR,CACJvE,SADIuE,EAEJ/O,OAAO,IAAIA,OAAO,CAACmP,UAFfJ,CADO,EAKbphB,KALF;;EAOA,IAAI2hB,MAAM,CAAChM,GAAX,EAAgB;IACd,MAAM,IAAIzW,KAAJ,CACH,mBAAkB2d,SAAU,YAAWhN,IAAI,CAACC,SAALD,CAAe8R,MAAf9R,CAAuB,GAD3D,CAAN;EAGD;;EAED,OAAOgN,SAAP;AACD;;AC7CD,MAAMmV,QAAQ,GAAG;EACfqhB,IAAI,EAAE;IACJC,MAAM,EAAE,8BADJ;IAEJC,OAAO,EAAE,+BAFL;IAGJ,gBAAgB;EAHZ,CADS;EAMfC,KAAK,EAAE;IACLF,MAAM,EAAE,+BADH;IAELC,OAAO,EAAE,gCAFJ;IAGL,gBAAgB;EAHX;AANQ,CAAjB;AAeA;AACA;AACA;;AACO,SAASE,aAAT,CAAuBC,OAAvB,EAA0CC,GAA1C,EAAiE;EACtE,MAAM9nC,GAAG,GAAG8nC,GAAG,KAAK,KAARA,GAAgB,MAAhBA,GAAyB,OAArC;;EAEA,IAAI,CAACD,OAAL,EAAc;IACZ,OAAO1hB,QAAQ,CAACnmB,GAAD,CAARmmB,CAAc,QAAdA,CAAP;EACD;;EAED,MAAMpF,GAAG,GAAGoF,QAAQ,CAACnmB,GAAD,CAARmmB,CAAc0hB,OAAd1hB,CAAZ;;EACA,IAAI,CAACpF,GAAL,EAAU;IACR,MAAM,IAAI1tB,KAAJ,CAAW,WAAU2M,GAAI,aAAY6nC,OAAQ,EAA7C,CAAN;EACD;;EACD,OAAO9mB,GAAP;AACD;ACHD;AACA;AACA;;;MACagnB,gBAAgB,GAAG","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","require$$4","RIPEMD160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","createProgramAddress","seeds","TypeError","publicKeyBytes","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","global","self","this","__self__","F","fetch","DOMException","support","searchParams","iterable","Symbol","Blob","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","oldValue","get","hasOwnProperty","callback","thisArg","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","view","bufferClone","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","then","text","json","parse","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","url","credentials","mode","signal","referrer","clone","trim","split","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","Response","bodyInit","ok","statusText","response","redirectStatuses","redirect","RangeError","location","stack","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","makeWebsocketUrl","endpoint","URL","useHttps","protocol","host","port","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","clientBrowser","RpcClient","agent","too_many_requests_retries","waitTime","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfo","publicKeys","configOrCommitment","encoding","getStakeActivation","getProgramAccounts","extra","filters","getParsedProgramAccounts","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getParsedTransaction","getParsedTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","_unsubscribe","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    configOrCommitment?: GetMultipleAccountsConfig | Commitment,\n  ): Promise<(AccountInfo<Buffer | ParsedAccountData> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    let commitment;\n    let encoding: 'base64' | 'jsonParsed' = 'base64';\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n        encoding = 'base64';\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding || 'base64';\n      }\n    }\n\n    const args = this._buildArgs([keys], commitment, encoding);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\nexport type AuthorizedVoter = {\n  epoch: number;\n  authorizedVoter: PublicKey;\n};\n\nexport type PriorVoter = {\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n};\n\nexport type BlockTimestamp = {\n  slot: number;\n  timetamp: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({epoch, authorizedVoter}: AuthorizedVoter) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoter) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty,\n}: {\n  buf: PriorVoter[];\n  idx: number;\n  isEmpty: boolean;\n}): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  | 'Authorize'\n  | 'InitializeAccount'\n  | 'Withdraw';\n\nconst VOTE_INSTRUCTION_LAYOUTS: {\n  [type in VoteInstructionType]: InstructionType;\n} = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}