{"ast":null,"code":"import { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\nexport default class Provider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  static defaultOptions() {\n    return {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n  }\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static local(url, opts) {\n    opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n    const connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  }\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static env() {\n    if (isBrowser) {\n      throw new Error(`Provider env is not available on browser.`);\n    }\n\n    const process = require(\"process\");\n\n    const url = process.env.ANCHOR_PROVIDER_URL;\n\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n\n    const options = Provider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, options);\n  }\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provider wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async send(tx, signers, opts) {\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n    const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    return txId;\n  }\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n\n\n  async sendAll(reqs, opts) {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = reqs.map(r => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n      signers.filter(s => s !== undefined).forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n    }\n\n    return sigs;\n  }\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async simulate(tx, signers) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.opts;\n\n    var _a, _b, _c;\n\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    return await simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n  }\n\n}\n/**\n * Node only wallet.\n */\n\nexport class NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n\n  static local() {\n    const process = require(\"process\");\n\n    const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n      encoding: \"utf-8\"\n    }))));\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n\n} // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = {\n    encoding: \"base64\",\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n\n  return res.result;\n}\n/**\n * Sets the default provider on the client.\n */\n\n\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\n\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n} // Global provider used as the default when a provider is not given.\n\nlet _provider = null;","map":{"version":3,"mappings":"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","names":["Connection","Keypair","sendAndConfirmRawTransaction","isBrowser","Provider","constructor","connection","wallet","opts","defaultOptions","preflightCommitment","commitment","local","url","NodeWallet","env","Error","process","require","ANCHOR_PROVIDER_URL","undefined","options","send","tx","signers","feePayer","publicKey","recentBlockhash","getRecentBlockhash","blockhash","signTransaction","filter","s","forEach","kp","partialSign","rawTx","serialize","txId","sendAll","reqs","txs","map","r","signedTxs","signAllTransactions","sigs","k","length","push","simulate","_a","simulateTransaction","_b","_c","payer","fromSecretKey","Buffer","from","JSON","parse","readFileSync","ANCHOR_WALLET","encoding","t","transaction","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","args","res","_rpcRequest","error","message","result","setProvider","provider","_provider","getProvider"],"sourceRoot":"","sources":["../../src/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}