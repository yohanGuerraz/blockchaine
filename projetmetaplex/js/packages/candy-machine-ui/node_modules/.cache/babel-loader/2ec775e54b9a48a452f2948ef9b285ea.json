{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Guerraz Yohan\\\\Desktop\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\src\\\\MintButton.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { findGatewayToken, getGatewayTokenAddressForOwnerAndGatekeeperNetwork, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\n_c = CTAButton;\nexport const MintButton = _ref => {\n  _s();\n\n  let {\n    onMint,\n    candyMachine,\n    isMinting,\n    setIsMinting,\n    isActive\n  } = _ref;\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this);\n    } else if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isPresale || candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isWhitelistOnly) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(connection.connection, webSocketSubscriptionId);\n      await onMint();\n      setClicked(false);\n      setVerified(false);\n    };\n\n    if (verified && clicked) {\n      mint();\n    }\n  }, [verified, clicked, connection.connection, onMint, webSocketSubscriptionId]);\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [GatewayStatus.NOT_REQUESTED, GatewayStatus.REFRESH_TOKEN_REQUIRED];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n\n    if (fromStates.find(state => previousGatewayStatus === state) && !invalidToStates.find(state => gatewayStatus === state)) {\n      setIsMinting(true);\n    }\n\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    disabled: isMinting || !isActive,\n    onClick: async () => {\n      if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper) {\n        const network = candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n\n        if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            await onMint();\n          } else {\n            // setIsMinting(true);\n            await requestGatewayToken();\n            console.log('after: ', gatewayStatus);\n          }\n        } else if (network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' || network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt') {\n          setClicked(true);\n          const gatewayToken = await findGatewayToken(connection.connection, wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n\n          if (gatewayToken !== null && gatewayToken !== void 0 && gatewayToken.isValid()) {\n            await onMint();\n          } else {\n            window.open(`https://verify.encore.fans/?gkNetwork=${network}`, '_blank');\n            const gatewayTokenAddress = await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n            setWebSocketSubscriptionId(onGatewayTokenChange(connection.connection, gatewayTokenAddress, () => setVerified(true), 'confirmed'));\n          }\n        } else {\n          setClicked(false);\n          throw new Error(`Unknown Gatekeeper Network: ${network}`);\n        }\n      } else {\n        await onMint();\n        setClicked(false);\n      }\n    },\n    variant: \"contained\",\n    children: getMintButtonContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintButton, \"r88RFSrNCKsjJvHHtLfbmAHGvyA=\", false, function () {\n  return [useWallet, useConnection, useGateway, usePrevious];\n});\n\n_c2 = MintButton;\n\nfunction usePrevious(value) {\n  _s2();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n_s2(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"names":["styled","Button","CircularProgress","GatewayStatus","useGateway","useEffect","useState","useRef","useConnection","useWallet","findGatewayToken","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","removeAccountChangeListener","CTAButton","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","connection","verified","setVerified","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","getMintButtonContent","state","isSoldOut","isPresale","isWhitelistOnly","mint","previousGatewayStatus","usePrevious","fromStates","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","console","log","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","gatewayToken","publicKey","isValid","window","open","gatewayTokenAddress","Error","value","ref","current"],"sources":["C:/Users/Guerraz Yohan/Desktop/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from '@identity.com/solana-gateway-ts';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return 'WHITELIST MINT';\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId,\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find(state => previousGatewayStatus === state) &&\r\n      !invalidToStates.find(state => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log('change: ', gatewayStatus);\r\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              await requestGatewayToken();\r\n              console.log('after: ', gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\r\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                '_blank',\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  'confirmed',\r\n                ),\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}