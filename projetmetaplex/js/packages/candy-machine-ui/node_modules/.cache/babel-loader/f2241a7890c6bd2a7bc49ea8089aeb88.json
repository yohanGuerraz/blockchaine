{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst useChain_1 = __importDefault(require(\"./useChain\"));\n\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst actionCreator_1 = require(\"../actionCreator\");\n\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\n\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\n\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\n\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\n\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\n\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\n\nconst status_1 = require(\"../utils/status\");\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\n\n\nconst useOrchestration = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    stage,\n    chainImplementation,\n    gatekeeperClient\n  } = _ref;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  const {\n    gatewayToken,\n    walletToRefresh,\n    civicPass,\n    refreshTokenState,\n    gatewayStatus,\n    gatekeeperNetworkAddress,\n    ownerSigns,\n    renderIframe,\n    refreshTimeoutId\n  } = state;\n  const networkConfig = (0, networkConfig_1.default)({\n    gatekeeperNetworkAddress,\n    stage\n  }); // Register our hooks here\n\n  const {\n    waitForConfirmPOWO,\n    waitForPOWO,\n    waitForHandleTransaction\n  } = (0, usePOWO_1.default)({\n    wallet,\n    chainImplementation\n  }, state, dispatch);\n  const gatekeeperEndpoint = chainImplementation.httpConfig.baseUrl;\n  const {\n    waitForGatekeeperIssuanceRequest\n  } = (0, useGatekeeper_1.default)({\n    wallet,\n    stage,\n    gatekeeperClient\n  }, state, dispatch);\n  const {\n    checkForRefreshWithTimeout,\n    refreshToken,\n    waitForUnexpiredGatewayToken\n  } = (0, useRefresh_1.default)({\n    stage,\n    gatekeeperClient,\n    networkConfig\n  }, state, dispatch);\n  (0, useCivicPass_1.default)({\n    wallet\n  }, state, dispatch);\n  (0, useCivicPassEventListener_1.default)({\n    wallet,\n    chainImplementation\n  });\n  (0, useChain_1.default)({\n    wallet,\n    chainImplementation,\n    networkConfig\n  }, state, dispatch);\n  (0, useGatekeeperRecord_1.default)({\n    wallet,\n    gatekeeperClient,\n    httpConfig: chainImplementation.httpConfig,\n    networkConfig\n  }, state, dispatch);\n  /**\n   * Refresh Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * wait until we have a payload that has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n      logger_1.default.debug('Refresh payload...', {\n        refreshPayload,\n        refreshPayloadState: refreshPayload === undefined\n      });\n\n      if (refreshPayload !== undefined) {\n        logger_1.default.debug('Refreshing token...');\n        resolve(refreshPayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * When we have a token start check the next expiration so we can prompt the user to refresh\n   */\n\n  (0, react_1.useEffect)(() => {\n    logger_1.default.debug('useOrchestration', {\n      gatewayStatus: gatewayStatus && (0, status_1.statusDisplayValue)(gatewayStatus),\n      refreshTokenState: refreshTokenState && types_1.RefreshTokenState[refreshTokenState]\n    });\n\n    if (gatewayStatus === types_1.GatewayStatus.ACTIVE || refreshTokenState === types_1.RefreshTokenState.COMPLETED) {\n      logger_1.default.debug('Start polling for the refresh interval');\n      checkForRefreshWithTimeout(wallet);\n    }\n  }, [gatewayStatus, refreshTokenState, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, renderIframe]);\n  /**\n   * Whenever the iFrame is rendered, clear the timeout\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (renderIframe && refreshTimeoutId) {\n      logger_1.default.debug('useEffect:dispatch refresh_clear_timeout');\n      clearTimeout(refreshTimeoutId);\n      dispatch({\n        type: 'refresh_clear_timeout'\n      });\n    }\n  }, [renderIframe, refreshTimeoutId]);\n  /**\n   * Issuance Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * poll until a gatekeeper record is found, once active check the chain for a token\n   * then dispatch a tokenChange event that will result in the token getting saved to state\n   * start token refresh polling once a valid token is set\n   */\n\n  const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n    if (wallet) {\n      logger_1.default.debug('waitForOnChainToken');\n      const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n        wallet,\n        chainImplementation,\n        gatekeeperClient,\n        dispatch,\n        networkConfig,\n        ownerSigns\n      });\n      await actionCreator.waitForGatewayToken();\n    }\n\n    return null;\n  }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n  /**\n   * wait until a presentation request id has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n      logger_1.default.debug('Issuance payload...', issuancePayload);\n\n      if (issuancePayload !== undefined) {\n        resolve(issuancePayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  const checkForRequiredProof = (0, react_1.useCallback)(async _ref2 => {\n    let {\n      requiresProofOfWalletOwnership,\n      payload\n    } = _ref2;\n    logger_1.default.debug('Checking for required proof', {\n      requiresProofOfWalletOwnership,\n      payload\n    });\n\n    if (requiresProofOfWalletOwnership) {\n      const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n      return result;\n    }\n\n    return {\n      payload\n    };\n  }, [waitForConfirmPOWO, waitForPOWO]);\n  /**\n   * New token request flow:\n   * wait for the user to request a new token\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to request a new token issuance\n   * wait for a gatekeeper record to be created\n   * once this flow is complete a new Gatekeeper token should be available and set in state\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (!ownerSigns) {\n      logger_1.default.debug('useEffect: waitForCivicPassIssuanceResponsePayload !ownerSigns');\n      waitForCivicPassIssuanceResponsePayload().then(checkForRequiredProof).then(waitForGatekeeperIssuanceRequest).then(waitForOnChainToken).then(() => checkForRefreshWithTimeout(wallet)).catch(error => {\n        dispatch({\n          type: 'civicPass_issuance_failure'\n        });\n        logger_1.default.error('ERROR newTokenRequestFlow', error);\n      });\n    }\n  }, [waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken, ownerSigns]);\n  (0, react_1.useEffect)(() => {\n    if (ownerSigns) {\n      logger_1.default.debug('useEffect: waitForCivicPassIssuanceResponsePayload ownerSigns');\n      waitForCivicPassIssuanceResponsePayload().then(waitForGatekeeperIssuanceRequest).then(waitForHandleTransaction).then(waitForOnChainToken).then(() => checkForRefreshWithTimeout(wallet)).catch(error => {\n        dispatch({\n          type: 'civicPass_issuance_failure'\n        });\n        logger_1.default.error('ERROR newTokenRequestFlow', error);\n      });\n    }\n  }, [waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken, ownerSigns]);\n  /**\n   * Refresh start flow:\n   * Triggered when we have a refreshResponse payload\n   * wait refresh to be triggered from the iFrame\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to refresh the token\n   * check if token is expired and timeout if token does not update within timeframe\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (!ownerSigns) {\n      logger_1.default.debug('useEffect: waitForCivicPassRefreshResponsePayload !ownerSigns');\n      const useWallet = walletToRefresh || wallet;\n      waitForCivicPassRefreshResponsePayload().then(checkForRequiredProof).then(refreshToken(useWallet)).then(waitForUnexpiredGatewayToken).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, ownerSigns]);\n  (0, react_1.useEffect)(() => {\n    if (ownerSigns) {\n      logger_1.default.debug('useEffect: waitForCivicPassRefreshResponsePayload ownerSigns');\n      const useWallet = walletToRefresh || wallet;\n      waitForCivicPassRefreshResponsePayload().then(refreshToken(useWallet)).then(waitForHandleTransaction).then(waitForUnexpiredGatewayToken).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, walletToRefresh === null || walletToRefresh === void 0 ? void 0 : walletToRefresh.publicKey, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, ownerSigns]);\n  /**\n   * Refresh complete flow:\n   * Triggered by token change event\n   * Check the refresh token state\n   * Check if token is unexpired and clear timeout if token is not expired\n   * Complete the refresh event and clear the refresh response payload\n   */\n\n  (0, react_1.useEffect)(() => {\n    const useWallet = walletToRefresh || wallet;\n\n    if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n      logger_1.default.debug('useEffect: Refresh complete flow');\n      waitForUnexpiredGatewayToken().then(() => checkForRefreshWithTimeout(useWallet)).then(() => {\n        dispatch({\n          type: 'refresh_complete'\n        });\n      }).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.identifier, refreshTokenState, walletToRefresh === null || walletToRefresh === void 0 ? void 0 : walletToRefresh.publicKey, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey]);\n};\n\nexports.default = useOrchestration;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","types_1","useChain_1","useRefresh_1","useWalletHooks_1","actionCreator_1","usePOWO_1","useGatekeeper_1","useGatekeeperRecord_1","networkConfig_1","useCivicPass_1","useCivicPassEventListener_1","status_1","useOrchestration","state","dispatch","wallet","stage","chainImplementation","gatekeeperClient","expectWalletConnected","default","gatewayToken","walletToRefresh","civicPass","refreshTokenState","gatewayStatus","gatekeeperNetworkAddress","ownerSigns","renderIframe","refreshTimeoutId","networkConfig","waitForConfirmPOWO","waitForPOWO","waitForHandleTransaction","gatekeeperEndpoint","httpConfig","baseUrl","waitForGatekeeperIssuanceRequest","checkForRefreshWithTimeout","refreshToken","waitForUnexpiredGatewayToken","waitForCivicPassRefreshResponsePayload","useCallback","debug","result","Promise","resolve","responsePayload","refreshPayload","CivicPassMessageAction","REFRESH","refreshPayloadState","undefined","useEffect","statusDisplayValue","RefreshTokenState","GatewayStatus","ACTIVE","COMPLETED","publicKey","clearTimeout","type","waitForOnChainToken","actionCreator","gatewayTokenActionCreator","waitForGatewayToken","waitForCivicPassIssuanceResponsePayload","issuancePayload","ISSUANCE","checkForRequiredProof","requiresProofOfWalletOwnership","payload","then","catch","error","useWallet","WAIT_FOR_ON_CHAIN","identifier"],"sources":["C:/Users/Guerraz Yohan/Desktop/metaplex/js/packages/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useOrchestration.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst useChain_1 = __importDefault(require(\"./useChain\"));\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst actionCreator_1 = require(\"../actionCreator\");\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\nconst status_1 = require(\"../utils/status\");\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\nconst useOrchestration = ({ wallet, stage, chainImplementation, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const { gatewayToken, walletToRefresh, civicPass, refreshTokenState, gatewayStatus, gatekeeperNetworkAddress, ownerSigns, renderIframe, refreshTimeoutId, } = state;\n    const networkConfig = (0, networkConfig_1.default)({ gatekeeperNetworkAddress, stage });\n    // Register our hooks here\n    const { waitForConfirmPOWO, waitForPOWO, waitForHandleTransaction } = (0, usePOWO_1.default)({ wallet, chainImplementation }, state, dispatch);\n    const gatekeeperEndpoint = chainImplementation.httpConfig.baseUrl;\n    const { waitForGatekeeperIssuanceRequest } = (0, useGatekeeper_1.default)({ wallet, stage, gatekeeperClient }, state, dispatch);\n    const { checkForRefreshWithTimeout, refreshToken, waitForUnexpiredGatewayToken } = (0, useRefresh_1.default)({ stage, gatekeeperClient, networkConfig }, state, dispatch);\n    (0, useCivicPass_1.default)({ wallet }, state, dispatch);\n    (0, useCivicPassEventListener_1.default)({ wallet, chainImplementation });\n    (0, useChain_1.default)({ wallet, chainImplementation, networkConfig }, state, dispatch);\n    (0, useGatekeeperRecord_1.default)({ wallet, gatekeeperClient, httpConfig: chainImplementation.httpConfig, networkConfig }, state, dispatch);\n    /**\n     * Refresh Flows ----------------------------------------------------------------\n     */\n    /**\n     * wait until we have a payload that has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n            logger_1.default.debug('Refresh payload...', {\n                refreshPayload,\n                refreshPayloadState: refreshPayload === undefined,\n            });\n            if (refreshPayload !== undefined) {\n                logger_1.default.debug('Refreshing token...');\n                resolve(refreshPayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * When we have a token start check the next expiration so we can prompt the user to refresh\n     */\n    (0, react_1.useEffect)(() => {\n        logger_1.default.debug('useOrchestration', {\n            gatewayStatus: gatewayStatus && (0, status_1.statusDisplayValue)(gatewayStatus),\n            refreshTokenState: refreshTokenState && types_1.RefreshTokenState[refreshTokenState],\n        });\n        if (gatewayStatus === types_1.GatewayStatus.ACTIVE || refreshTokenState === types_1.RefreshTokenState.COMPLETED) {\n            logger_1.default.debug('Start polling for the refresh interval');\n            checkForRefreshWithTimeout(wallet);\n        }\n    }, [gatewayStatus, refreshTokenState, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, renderIframe]);\n    /**\n     * Whenever the iFrame is rendered, clear the timeout\n     */\n    (0, react_1.useEffect)(() => {\n        if (renderIframe && refreshTimeoutId) {\n            logger_1.default.debug('useEffect:dispatch refresh_clear_timeout');\n            clearTimeout(refreshTimeoutId);\n            dispatch({ type: 'refresh_clear_timeout' });\n        }\n    }, [renderIframe, refreshTimeoutId]);\n    /**\n     * Issuance Flows ----------------------------------------------------------------\n     */\n    /**\n     * poll until a gatekeeper record is found, once active check the chain for a token\n     * then dispatch a tokenChange event that will result in the token getting saved to state\n     * start token refresh polling once a valid token is set\n     */\n    const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n        if (wallet) {\n            logger_1.default.debug('waitForOnChainToken');\n            const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n                wallet,\n                chainImplementation,\n                gatekeeperClient,\n                dispatch,\n                networkConfig,\n                ownerSigns,\n            });\n            await actionCreator.waitForGatewayToken();\n        }\n        return null;\n    }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n    /**\n     * wait until a presentation request id has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n            logger_1.default.debug('Issuance payload...', issuancePayload);\n            if (issuancePayload !== undefined) {\n                resolve(issuancePayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const checkForRequiredProof = (0, react_1.useCallback)(async ({ requiresProofOfWalletOwnership, payload, }) => {\n        logger_1.default.debug('Checking for required proof', { requiresProofOfWalletOwnership, payload });\n        if (requiresProofOfWalletOwnership) {\n            const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n            return result;\n        }\n        return { payload };\n    }, [waitForConfirmPOWO, waitForPOWO]);\n    /**\n     * New token request flow:\n     * wait for the user to request a new token\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to request a new token issuance\n     * wait for a gatekeeper record to be created\n     * once this flow is complete a new Gatekeeper token should be available and set in state\n     */\n    (0, react_1.useEffect)(() => {\n        if (!ownerSigns) {\n            logger_1.default.debug('useEffect: waitForCivicPassIssuanceResponsePayload !ownerSigns');\n            waitForCivicPassIssuanceResponsePayload()\n                .then(checkForRequiredProof)\n                .then(waitForGatekeeperIssuanceRequest)\n                .then(waitForOnChainToken)\n                .then(() => checkForRefreshWithTimeout(wallet))\n                .catch((error) => {\n                dispatch({ type: 'civicPass_issuance_failure' });\n                logger_1.default.error('ERROR newTokenRequestFlow', error);\n            });\n        }\n    }, [\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n        ownerSigns,\n    ]);\n    (0, react_1.useEffect)(() => {\n        if (ownerSigns) {\n            logger_1.default.debug('useEffect: waitForCivicPassIssuanceResponsePayload ownerSigns');\n            waitForCivicPassIssuanceResponsePayload()\n                .then(waitForGatekeeperIssuanceRequest)\n                .then(waitForHandleTransaction)\n                .then(waitForOnChainToken)\n                .then(() => checkForRefreshWithTimeout(wallet))\n                .catch((error) => {\n                dispatch({ type: 'civicPass_issuance_failure' });\n                logger_1.default.error('ERROR newTokenRequestFlow', error);\n            });\n        }\n    }, [\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n        ownerSigns,\n    ]);\n    /**\n     * Refresh start flow:\n     * Triggered when we have a refreshResponse payload\n     * wait refresh to be triggered from the iFrame\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to refresh the token\n     * check if token is expired and timeout if token does not update within timeframe\n     */\n    (0, react_1.useEffect)(() => {\n        if (!ownerSigns) {\n            logger_1.default.debug('useEffect: waitForCivicPassRefreshResponsePayload !ownerSigns');\n            const useWallet = walletToRefresh || wallet;\n            waitForCivicPassRefreshResponsePayload()\n                .then(checkForRequiredProof)\n                .then(refreshToken(useWallet))\n                .then(waitForUnexpiredGatewayToken)\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, ownerSigns]);\n    (0, react_1.useEffect)(() => {\n        if (ownerSigns) {\n            logger_1.default.debug('useEffect: waitForCivicPassRefreshResponsePayload ownerSigns');\n            const useWallet = walletToRefresh || wallet;\n            waitForCivicPassRefreshResponsePayload()\n                .then(refreshToken(useWallet))\n                .then(waitForHandleTransaction)\n                .then(waitForUnexpiredGatewayToken)\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, walletToRefresh === null || walletToRefresh === void 0 ? void 0 : walletToRefresh.publicKey, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, ownerSigns]);\n    /**\n     * Refresh complete flow:\n     * Triggered by token change event\n     * Check the refresh token state\n     * Check if token is unexpired and clear timeout if token is not expired\n     * Complete the refresh event and clear the refresh response payload\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n            logger_1.default.debug('useEffect: Refresh complete flow');\n            waitForUnexpiredGatewayToken()\n                .then(() => checkForRefreshWithTimeout(useWallet))\n                .then(() => {\n                dispatch({ type: 'refresh_complete' });\n            })\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.identifier, refreshTokenState, walletToRefresh === null || walletToRefresh === void 0 ? void 0 : walletToRefresh.publicKey, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey]);\n};\nexports.default = useOrchestration;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}