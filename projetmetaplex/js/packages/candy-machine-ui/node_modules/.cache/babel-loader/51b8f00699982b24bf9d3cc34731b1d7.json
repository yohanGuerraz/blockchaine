{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\n\nconst types_1 = require(\"../types\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst config_1 = require(\"../config\");\n\nconst testRetryMultipler = () => parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\n\nclass GatekeeperClient {\n  constructor(gatekeeperClientConfig) {\n    this.baseUrl = gatekeeperClientConfig.baseUrl;\n    this.stage = gatekeeperClientConfig.stage;\n    this.queryParams = gatekeeperClientConfig.queryParams;\n    this.headers = gatekeeperClientConfig.headers;\n    this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch; // By default retry on every 5xx or other Error (e.g. network failure):\n\n    this.defaultRetryParams = {\n      retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n      retryOn: (attempt, retries, error, response) => attempt < retries && (!!error || !response || response.status >= 500),\n      retryDelay: attempt => 2 ** attempt * 1000 * testRetryMultipler()\n    };\n    this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n  }\n\n  addQueryParams(url) {\n    if (!this.queryParams) return;\n    Object.entries(this.queryParams).forEach(_ref => {\n      let [key, value] = _ref;\n      url.searchParams.append(key, value);\n    });\n  }\n\n  urlForWallet(walletAddress) {\n    const url = new URL(`${this.baseUrl}/${walletAddress}`);\n    this.addQueryParams(url);\n    return url.toString();\n  }\n\n  async getGatekeeperRecordWithPayload(walletAddress) {\n    return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n      method: 'GET',\n      headers: this.headers\n    }).then(async response => ({\n      state: types_1.GatekeeperAPIStatus[types_1.GatekeeperAPIStatus[response.status]],\n      payload: await response.json()\n    }));\n  }\n\n  async getGatekeeperStatus(walletAddress) {\n    return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n      method: 'HEAD',\n      headers: this.headers\n    }).then(_ref2 => {\n      let {\n        status\n      } = _ref2;\n      return status;\n    });\n  }\n\n  async requestGatewayTokenFromGatekeeper(_ref3) {\n    let {\n      wallet,\n      payload,\n      proof,\n      ownerSigns\n    } = _ref3;\n    // produce a signature that proves ownership of a wallet\n    logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), {\n      proof\n    })); // We only pass the wallet public key as part of the request if\n    // it was not passed as part of the presentation.\n\n    const body = Object.assign(Object.assign({}, payload), {\n      proof,\n      address: wallet.publicKey,\n      ownerSigns\n    });\n    logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', body);\n    const url = new URL(this.baseUrl);\n    this.addQueryParams(url);\n    return this.fetchWithRetry(url.toString(), {\n      method: 'POST',\n      headers: Object.assign(Object.assign({}, this.headers), {\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(body)\n    }).then(async resp => {\n      const {\n        status\n      } = resp;\n      const result = await resp.json();\n      return Object.assign(Object.assign({}, result), {\n        status\n      });\n    });\n  }\n  /**\n   * Tries to refresh a token.\n   * If it fails with a 5xx, handleFetchError will retry a number of times.\n   */\n\n\n  async refreshToken(_ref4) {\n    let {\n      wallet,\n      payload,\n      proof,\n      ownerSigns\n    } = _ref4;\n    logger_1.default.debug('refreshToken...', {\n      payload\n    });\n    logger_1.default.debug('Attempting to refresh the Gateway token');\n    const body = Object.assign(Object.assign({}, payload), {\n      proof,\n      request: 'refresh',\n      ownerSigns\n    });\n    return this.fetchWithRetry(this.urlForWallet(wallet.publicKey), {\n      method: 'PATCH',\n      headers: Object.assign(Object.assign({}, this.headers), {\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(body)\n    }).then(async resp => {\n      const {\n        status\n      } = resp;\n      const result = await resp.json();\n      return Object.assign(Object.assign({}, result), {\n        status\n      });\n    });\n  }\n\n}\n\nexports.default = GatekeeperClient;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetch_retry_ts_1","require","types_1","logger_1","config_1","testRetryMultipler","parseFloat","process","env","TEST_RETRY_MULTIPLIER","GatekeeperClient","constructor","gatekeeperClientConfig","baseUrl","stage","queryParams","headers","fetchImplementation","fetch","defaultRetryParams","retries","numRetries","getDefaultApiNumRetries","retryOn","attempt","error","response","status","retryDelay","fetchWithRetry","default","addQueryParams","url","entries","forEach","key","searchParams","append","urlForWallet","walletAddress","URL","toString","getGatekeeperRecordWithPayload","method","then","state","GatekeeperAPIStatus","payload","json","getGatekeeperStatus","requestGatewayTokenFromGatekeeper","wallet","proof","ownerSigns","debug","assign","body","address","publicKey","JSON","stringify","resp","result","refreshToken","request"],"sources":["C:/Users/Guerraz Yohan/Desktop/metaplex/js/packages/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/utils/gatekeeperClient.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst config_1 = require(\"../config\");\nconst testRetryMultipler = () => parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\nclass GatekeeperClient {\n    constructor(gatekeeperClientConfig) {\n        this.baseUrl = gatekeeperClientConfig.baseUrl;\n        this.stage = gatekeeperClientConfig.stage;\n        this.queryParams = gatekeeperClientConfig.queryParams;\n        this.headers = gatekeeperClientConfig.headers;\n        this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch;\n        // By default retry on every 5xx or other Error (e.g. network failure):\n        this.defaultRetryParams = {\n            retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n            retryOn: (attempt, retries, error, response) => attempt < retries && (!!error || !response || response.status >= 500),\n            retryDelay: (attempt) => 2 ** attempt * 1000 * testRetryMultipler(),\n        };\n        this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n    }\n    addQueryParams(url) {\n        if (!this.queryParams)\n            return;\n        Object.entries(this.queryParams).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n    }\n    urlForWallet(walletAddress) {\n        const url = new URL(`${this.baseUrl}/${walletAddress}`);\n        this.addQueryParams(url);\n        return url.toString();\n    }\n    async getGatekeeperRecordWithPayload(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'GET',\n            headers: this.headers,\n        }).then(async (response) => ({\n            state: types_1.GatekeeperAPIStatus[types_1.GatekeeperAPIStatus[response.status]],\n            payload: await response.json(),\n        }));\n    }\n    async getGatekeeperStatus(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'HEAD',\n            headers: this.headers,\n        }).then(({ status }) => status);\n    }\n    async requestGatewayTokenFromGatekeeper({ wallet, payload, proof, ownerSigns, }) {\n        // produce a signature that proves ownership of a wallet\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), { proof }));\n        // We only pass the wallet public key as part of the request if\n        // it was not passed as part of the presentation.\n        const body = Object.assign(Object.assign({}, payload), { proof, address: wallet.publicKey, ownerSigns });\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', body);\n        const url = new URL(this.baseUrl);\n        this.addQueryParams(url);\n        return this.fetchWithRetry(url.toString(), {\n            method: 'POST',\n            headers: Object.assign(Object.assign({}, this.headers), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(body),\n        }).then(async (resp) => {\n            const { status } = resp;\n            const result = (await resp.json());\n            return Object.assign(Object.assign({}, result), { status });\n        });\n    }\n    /**\n     * Tries to refresh a token.\n     * If it fails with a 5xx, handleFetchError will retry a number of times.\n     */\n    async refreshToken({ wallet, payload, proof, ownerSigns, }) {\n        logger_1.default.debug('refreshToken...', { payload });\n        logger_1.default.debug('Attempting to refresh the Gateway token');\n        const body = Object.assign(Object.assign({}, payload), { proof, request: 'refresh', ownerSigns });\n        return this.fetchWithRetry(this.urlForWallet(wallet.publicKey), {\n            method: 'PATCH',\n            headers: Object.assign(Object.assign({}, this.headers), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(body),\n        }).then(async (resp) => {\n            const { status } = resp;\n            const result = (await resp.json());\n            return Object.assign(Object.assign({}, result), { status });\n        });\n    }\n}\nexports.default = GatekeeperClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}