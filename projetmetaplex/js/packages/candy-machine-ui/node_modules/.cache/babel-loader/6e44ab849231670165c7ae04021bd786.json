{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n  static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n    const simulate = async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      let resp = undefined;\n\n      try {\n        resp = await provider.simulate(tx, ctx.signers, ctx.options);\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n\n      if (resp.value.err) {\n        throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n      }\n\n      const logs = resp.value.logs;\n\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n\n      const events = [];\n\n      if (idl.events) {\n        let parser = new EventParser(programId, coder);\n        parser.parseLogs(logs, event => {\n          events.push(event);\n        });\n      }\n\n      return {\n        events,\n        raw: logs\n      };\n    };\n\n    return simulate;\n  }\n\n}","map":{"version":3,"mappings":"AAOA,SAASA,eAAT,QAAgC,YAAhC;AAEA,SAASC,WAAT,QAAmC,UAAnC;AAGA,SAASC,YAAT,QAA6B,aAA7B;AAEA,eAAc,MAAOC,eAAP,CAAsB;EACf,OAALC,KAAK,CACjBC,KADiB,EAEjBC,IAFiB,EAGjBC,SAHiB,EAIjBC,QAJiB,EAKjBC,KALiB,EAMjBC,SANiB,EAOjBC,GAPiB,EAOT;IAER,MAAMC,QAAQ,GAAG,kBAAoD;MAAA,kCAA1CC,IAA0C;QAA1CA,IAA0C;MAAA;;MACnE,MAAMC,EAAE,GAAGR,IAAI,CAAC,GAAGO,IAAJ,CAAf;MACA,MAAM,GAAGE,GAAH,IAAUf,eAAe,CAACK,KAAD,EAAQ,CAAC,GAAGQ,IAAJ,CAAR,CAA/B;MACA,IAAIG,IAAI,GAEQC,SAFhB;;MAGA,IAAI;QACFD,IAAI,GAAG,MAAMR,QAAQ,CAACI,QAAT,CAAkBE,EAAlB,EAAsBC,GAAG,CAACG,OAA1B,EAAmCH,GAAG,CAACI,OAAvC,CAAb;MACD,CAFD,CAEE,OAAOC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,GAAjC;QACA,IAAIG,aAAa,GAAGrB,YAAY,CAACsB,KAAb,CAAmBJ,GAAnB,EAAwBb,SAAxB,CAApB;;QACA,IAAIgB,aAAa,KAAK,IAAtB,EAA4B;UAC1B,MAAMH,GAAN;QACD;;QACD,MAAMG,aAAN;MACD;;MACD,IAAIP,IAAI,KAAKC,SAAb,EAAwB;QACtB,MAAM,IAAIQ,KAAJ,CAAU,gCAAV,CAAN;MACD;;MACD,IAAIT,IAAI,CAACU,KAAL,CAAWN,GAAf,EAAoB;QAClB,MAAM,IAAIK,KAAJ,CAAU,mBAAmBT,IAAI,CAACU,KAAL,CAAWN,GAAX,CAAeO,QAAf,EAAyB,EAAtD,CAAN;MACD;;MACD,MAAMC,IAAI,GAAGZ,IAAI,CAACU,KAAL,CAAWE,IAAxB;;MACA,IAAI,CAACA,IAAL,EAAW;QACT,MAAM,IAAIH,KAAJ,CAAU,0BAAV,CAAN;MACD;;MAED,MAAMI,MAAM,GAAY,EAAxB;;MACA,IAAIlB,GAAG,CAACkB,MAAR,EAAgB;QACd,IAAIC,MAAM,GAAG,IAAI7B,WAAJ,CAAgBS,SAAhB,EAA2BD,KAA3B,CAAb;QACAqB,MAAM,CAACC,SAAP,CAAiBH,IAAjB,EAAwBI,KAAD,IAAU;UAC/BH,MAAM,CAACI,IAAP,CAAYD,KAAZ;QACD,CAFD;MAGD;;MACD,OAAO;QAAEH,MAAF;QAAUK,GAAG,EAAEN;MAAf,CAAP;IACD,CAnCD;;IAqCA,OAAOhB,QAAP;EACD;;AAhDiC","names":["splitArgsAndCtx","EventParser","ProgramError","SimulateFactory","build","idlIx","txFn","idlErrors","provider","coder","programId","idl","simulate","args","tx","ctx","resp","undefined","signers","options","err","console","log","translatedErr","parse","Error","value","toString","logs","events","parser","parseLogs","event","push","raw"],"sourceRoot":"","sources":["../../../../src/program/namespace/simulate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}