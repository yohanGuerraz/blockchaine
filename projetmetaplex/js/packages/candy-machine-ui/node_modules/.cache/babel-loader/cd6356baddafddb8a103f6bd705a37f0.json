{"ast":null,"code":"import assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { chunks } from \"../utils/common\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\nexport async function invoke(programId, accounts, data, provider) {\n  programId = translateAddress(programId);\n\n  if (!provider) {\n    provider = getProvider();\n  }\n\n  const tx = new Transaction();\n  tx.add(new TransactionInstruction({\n    programId,\n    keys: accounts !== null && accounts !== void 0 ? accounts : [],\n    data\n  }));\n  return await provider.send(tx);\n}\nconst GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nexport async function getMultipleAccounts(connection, publicKeys) {\n  if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    return await getMultipleAccountsCore(connection, publicKeys);\n  } else {\n    const batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all(batches.map(batch => getMultipleAccountsCore(connection, batch)));\n    return results.flat();\n  }\n}\n\nasync function getMultipleAccountsCore(connection, publicKeys) {\n  const args = [publicKeys.map(k => k.toBase58()), {\n    commitment: \"recent\"\n  }]; // @ts-ignore\n\n  const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\n\n  if (res.error) {\n    throw new Error(\"failed to get info about accounts \" + publicKeys.map(k => k.toBase58()).join(\", \") + \": \" + res.error.message);\n  }\n\n  assert(typeof res.result !== \"undefined\");\n  const accounts = [];\n\n  for (const account of res.result.value) {\n    let value = null;\n\n    if (account === null) {\n      accounts.push(null);\n      continue;\n    }\n\n    if (res.result.value) {\n      const {\n        executable,\n        owner,\n        lamports,\n        data\n      } = account;\n      assert(data[1] === \"base64\");\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], \"base64\")\n      };\n    }\n\n    if (value === null) {\n      throw new Error(\"Invalid response\");\n    }\n\n    accounts.push(value);\n  }\n\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n\n    return {\n      publicKey: publicKeys[idx],\n      account\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAIEC,SAJF,EAMEC,WANF,EAOEC,sBAPF,QAQO,iBARP;AASA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAAkBC,gBAAlB,QAA0C,mBAA1C;AACA,SAAmBC,WAAnB,QAAsC,aAAtC;AAEA;;;;;AAIA,OAAO,eAAeC,MAAf,CACLC,SADK,EAELC,QAFK,EAGLC,IAHK,EAILC,QAJK,EAIc;EAEnBH,SAAS,GAAGH,gBAAgB,CAACG,SAAD,CAA5B;;EACA,IAAI,CAACG,QAAL,EAAe;IACbA,QAAQ,GAAGL,WAAW,EAAtB;EACD;;EAED,MAAMM,EAAE,GAAG,IAAIV,WAAJ,EAAX;EACAU,EAAE,CAACC,GAAH,CACE,IAAIV,sBAAJ,CAA2B;IACzBK,SADyB;IAEzBM,IAAI,EAAEL,QAAQ,SAAR,YAAQ,WAAR,cAAY,EAFO;IAGzBC;EAHyB,CAA3B,CADF;EAQA,OAAO,MAAMC,QAAQ,CAACI,IAAT,CAAcH,EAAd,CAAb;AACD;AAED,MAAMI,2BAA2B,GAAW,EAA5C;AAEA,OAAO,eAAeC,mBAAf,CACLC,UADK,EAELC,UAFK,EAEkB;EAIvB,IAAIA,UAAU,CAACC,MAAX,IAAqBJ,2BAAzB,EAAsD;IACpD,OAAO,MAAMK,uBAAuB,CAACH,UAAD,EAAaC,UAAb,CAApC;EACD,CAFD,MAEO;IACL,MAAMG,OAAO,GAAGlB,MAAM,CAACe,UAAD,EAAaH,2BAAb,CAAtB;IACA,MAAMO,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAEpBH,OAAO,CAACI,GAAR,CAAaC,KAAD,IAAWN,uBAAuB,CAACH,UAAD,EAAaS,KAAb,CAA9C,CAFoB,CAAtB;IAGA,OAAOJ,OAAO,CAACK,IAAR,EAAP;EACD;AACF;;AAED,eAAeP,uBAAf,CACEH,UADF,EAEEC,UAFF,EAEyB;EAIvB,MAAMU,IAAI,GAAG,CAACV,UAAU,CAACO,GAAX,CAAgBI,CAAD,IAAOA,CAAC,CAACC,QAAF,EAAtB,CAAD,EAAsC;IAAEC,UAAU,EAAE;EAAd,CAAtC,CAAb,CAJuB,CAKvB;;EACA,MAAMC,GAAG,GAAG,MAAMf,UAAU,CAACgB,WAAX,CAAuB,qBAAvB,EAA8CL,IAA9C,CAAlB;;EACA,IAAII,GAAG,CAACE,KAAR,EAAe;IACb,MAAM,IAAIC,KAAJ,CACJ,uCACEjB,UAAU,CAACO,GAAX,CAAgBI,CAAD,IAAOA,CAAC,CAACC,QAAF,EAAtB,EAAoCM,IAApC,CAAyC,IAAzC,CADF,GAEE,IAFF,GAGEJ,GAAG,CAACE,KAAJ,CAAUG,OAJR,CAAN;EAMD;;EACDtC,MAAM,CAAC,OAAOiC,GAAG,CAACM,MAAX,KAAsB,WAAvB,CAAN;EACA,MAAM9B,QAAQ,GAKT,EALL;;EAMA,KAAK,MAAM+B,OAAX,IAAsBP,GAAG,CAACM,MAAJ,CAAWE,KAAjC,EAAwC;IACtC,IAAIA,KAAK,GAKE,IALX;;IAMA,IAAID,OAAO,KAAK,IAAhB,EAAsB;MACpB/B,QAAQ,CAACiC,IAAT,CAAc,IAAd;MACA;IACD;;IACD,IAAIT,GAAG,CAACM,MAAJ,CAAWE,KAAf,EAAsB;MACpB,MAAM;QAAEE,UAAF;QAAcC,KAAd;QAAqBC,QAArB;QAA+BnC;MAA/B,IAAwC8B,OAA9C;MACAxC,MAAM,CAACU,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAb,CAAN;MACA+B,KAAK,GAAG;QACNE,UADM;QAENC,KAAK,EAAE,IAAI3C,SAAJ,CAAc2C,KAAd,CAFD;QAGNC,QAHM;QAINnC,IAAI,EAAEoC,MAAM,CAACC,IAAP,CAAYrC,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB;MAJA,CAAR;IAMD;;IACD,IAAI+B,KAAK,KAAK,IAAd,EAAoB;MAClB,MAAM,IAAIL,KAAJ,CAAU,kBAAV,CAAN;IACD;;IACD3B,QAAQ,CAACiC,IAAT,CAAcD,KAAd;EACD;;EACD,OAAOhC,QAAQ,CAACiB,GAAT,CAAa,CAACc,OAAD,EAAUQ,GAAV,KAAiB;IACnC,IAAIR,OAAO,KAAK,IAAhB,EAAsB;MACpB,OAAO,IAAP;IACD;;IACD,OAAO;MACLS,SAAS,EAAE9B,UAAU,CAAC6B,GAAD,CADhB;MAELR;IAFK,CAAP;EAID,CARM,CAAP;AASD","names":["assert","PublicKey","Transaction","TransactionInstruction","chunks","translateAddress","getProvider","invoke","programId","accounts","data","provider","tx","add","keys","send","GET_MULTIPLE_ACCOUNTS_LIMIT","getMultipleAccounts","connection","publicKeys","length","getMultipleAccountsCore","batches","results","Promise","all","map","batch","flat","args","k","toBase58","commitment","res","_rpcRequest","error","Error","join","message","result","account","value","push","executable","owner","lamports","Buffer","from","idx","publicKey"],"sourceRoot":"","sources":["../../../src/utils/rpc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}