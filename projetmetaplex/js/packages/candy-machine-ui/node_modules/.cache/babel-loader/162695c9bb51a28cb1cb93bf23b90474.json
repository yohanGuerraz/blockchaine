{"ast":null,"code":"import { SystemInstruction, clusterApiUrl, Transaction, SystemProgram, Connection } from '@solana/web3.js';\nimport { encode } from 'bs58';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function (obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function (skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function () {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function (exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function (type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function (record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function (finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function (tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n});\n\nvar defaultSigner = function defaultSigner(keypair) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(transaction) {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transaction.sign(keypair);\n              return _context.abrupt(\"return\", transaction);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar isKeypair = function isKeypair(k) {\n  return k.constructor.name === 'Keypair';\n};\n\nvar pubkeyOf = function pubkeyOf(k) {\n  return isKeypair(k) ? k.publicKey : k;\n};\n\nvar DEFAULT_CONFIG = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true\n}; // get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\n\nvar getClusterUrl = function getClusterUrl(config) {\n  if (config.supportedClusterUrls && config.supportedClusterUrls[config.cluster]) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n\n  return clusterApiUrl(config.cluster);\n};\n\nvar makeTransaction = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(connection, fromPubkey, toPubkey, amount) {\n    var instruction, _yield$connection$get, blockhash;\n\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            instruction = SystemProgram.transfer({\n              fromPubkey: fromPubkey,\n              lamports: amount,\n              toPubkey: toPubkey\n            });\n            _context2.next = 3;\n            return connection.getRecentBlockhash();\n\n          case 3:\n            _yield$connection$get = _context2.sent;\n            blockhash = _yield$connection$get.blockhash;\n            return _context2.abrupt(\"return\", new Transaction({\n              recentBlockhash: blockhash,\n              feePayer: fromPubkey\n            }).add(instruction));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function makeTransaction(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar findBlock = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(connection, blockhash) {\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", connection.getFeeCalculatorForBlockhash(blockhash, 'confirmed').then(function (result) {\n              if (!result.value) throw new Error('Block was not found'); // if we were interested in the age of the block,\n              // we could check the value of result.context.slot here and use getBlock() to look it up\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function findBlock(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar checkRecentBlock = /*#__PURE__*/function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(connection, transaction) {\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (transaction.recentBlockhash) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new Error('Transaction has no recent blockhash!');\n\n          case 2:\n            _context4.next = 4;\n            return findBlock(connection, transaction.recentBlockhash);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function checkRecentBlock(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar findTransaction = /*#__PURE__*/function () {\n  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(connection, transaction) {\n    var txSig;\n    return runtime_1.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (transaction.signature) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new Error('Transaction has no signature');\n\n          case 2:\n            txSig = encode(transaction.signature);\n            return _context5.abrupt(\"return\", connection.getTransaction(txSig));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function findTransaction(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar checkTransactionNotBroadcast = /*#__PURE__*/function () {\n  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(connection, transaction) {\n    return runtime_1.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", findTransaction(connection, transaction).then(function (result) {\n              if (result) throw new Error('Transaction was broadcast!');\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function checkTransactionNotBroadcast(_x12, _x13) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar checkTransactionParameters = function checkTransactionParameters(transaction) {\n  if (transaction.instructions.length !== 1) throw new Error('Incorrect instruction count. The transaction must contain only one Transfer instruction');\n  var _transaction$instruct = transaction.instructions,\n      instruction = _transaction$instruct[0];\n  var transferParams;\n\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error('Invalid instruction. The transaction must contain a Transfer instruction');\n  }\n\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey)) throw new Error('The transaction must be self-to-self');\n  if (transferParams.lamports !== 0) throw new Error('The transaction must have zero value');\n};\n\nvar checkSignatures = function checkSignatures(transaction, publicKey) {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n\n  var signatureForExpectedKey = transaction.signatures.find(function (signaturePubkeyPair) {\n    return signaturePubkeyPair.publicKey.equals(publicKey);\n  });\n\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\n\nvar prove = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key, signer, config) {\n    var sign, connection, publicKey, transaction, signedTransaction;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n\n            if (!(isKeypair(key) && signer)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Provide a keypair or a signer, not both');\n\n          case 3:\n            if (!(!isKeypair(key) && !signer)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Provide either a keypair or a signer');\n\n          case 5:\n            sign = signer || defaultSigner(key);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            publicKey = pubkeyOf(key);\n            _context.next = 10;\n            return makeTransaction(connection, publicKey, publicKey, 0);\n\n          case 10:\n            transaction = _context.sent;\n            _context.next = 13;\n            return sign(transaction);\n\n          case 13:\n            signedTransaction = _context.sent;\n            return _context.abrupt(\"return\", signedTransaction.serialize());\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function prove(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar verifyStatic = function verifyStatic(evidence, publicKey) {\n  var transaction = Transaction.from(evidence);\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\n\nvar verify = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(evidence, publicKey, config) {\n    var transaction, connection, checkTransactionNotBroadcastPromise, checkBlockPromise;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n\n            verifyStatic(evidence, publicKey);\n            transaction = Transaction.from(evidence);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            checkTransactionNotBroadcastPromise = checkTransactionNotBroadcast(connection, transaction);\n            checkBlockPromise = config.recentBlockCheck ? checkRecentBlock(connection, transaction) : Promise.resolve();\n            _context2.next = 8;\n            return Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function verify(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport { DEFAULT_CONFIG, prove, verify, verifyStatic };","map":{"version":3,"mappings":"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","names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","type","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","async","Promise","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","info","resultName","nextLoc","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","defaultSigner","keypair","transaction","sign","isKeypair","k","pubkeyOf","publicKey","DEFAULT_CONFIG","cluster","commitment","supportedClusterUrls","recentBlockCheck","getClusterUrl","config","clusterApiUrl","makeTransaction","connection","fromPubkey","toPubkey","amount","instruction","SystemProgram","transfer","lamports","_context2","getRecentBlockhash","_yield$connection$get","blockhash","Transaction","recentBlockhash","feePayer","add","findBlock","getFeeCalculatorForBlockhash","checkRecentBlock","_context4","findTransaction","signature","_context5","txSig","encode","getTransaction","checkTransactionNotBroadcast","checkTransactionParameters","instructions","transferParams","SystemInstruction","decodeTransfer","console","log","equals","checkSignatures","verifySignatures","signatureForExpectedKey","signatures","find","signaturePubkeyPair","toBase58","prove","signer","_context","Connection","signedTransaction","serialize","verifyStatic","evidence","from","verify","checkTransactionNotBroadcastPromise","checkBlockPromise","all"],"sources":["../node_modules/regenerator-runtime/runtime.js","../src/utilities.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemInstruction,\n  SystemProgram,\n  Transaction,\n  TransactionResponse,\n} from '@solana/web3.js';\nimport { encode } from 'bs58';\n\nexport type SignCallback = (transaction: Transaction) => Promise<Transaction>;\nexport const defaultSigner = (keypair: Keypair): SignCallback => async (\n  transaction: Transaction\n) => {\n  transaction.sign(keypair);\n  return transaction;\n};\n\ntype KeyMaterial = Keypair | PublicKey;\nexport const isKeypair = (k: KeyMaterial): k is Keypair =>\n  k.constructor.name === 'Keypair';\nexport const pubkeyOf = (k: KeyMaterial): PublicKey =>\n  isKeypair(k) ? k.publicKey : k;\n\nexport type ClusterUrlMap = Record<string, string>;\n\nexport type Config = {\n  // the cluster that should be used when generating and verifying proofs\n  cluster: string;\n  // when checking that a proof transaction has not been transmitted, the commitment\n  // to be used, i.e. the degree to which the transaction is finalised by the network\n  commitment: Commitment;\n  // if the cluster is not a standard solana public cluster, this map provides\n  // the cluster URL to connect to. Use this when the proof may contain a cluster that is\n  // not recognised by solana's clusterApiUrl function\n  supportedClusterUrls?: ClusterUrlMap;\n  // If true, check that the transaction includes a recent blockhash.\n  // Disable if nodes are having difficulty synchronising,\n  // warning - this makes replay attacks easier as proofs remain valid longer\n  recentBlockCheck: boolean;\n  /// If set, use this connection rather than creating a new one - ignores cluster, commitment, supportedClusterUrls\n  connection?: Connection;\n};\n\nexport const DEFAULT_CONFIG: Config = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true,\n};\n\n// get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\nexport const getClusterUrl = (config: Config) => {\n  if (\n    config.supportedClusterUrls &&\n    config.supportedClusterUrls[config.cluster]\n  ) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n  return clusterApiUrl(config.cluster as Cluster);\n};\n\nexport const makeTransaction = async (\n  connection: Connection,\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  amount: number\n): Promise<Transaction> => {\n  const instruction = SystemProgram.transfer({\n    fromPubkey,\n    lamports: amount,\n    toPubkey,\n  });\n\n  const { blockhash } = await connection.getRecentBlockhash();\n  return new Transaction({\n    recentBlockhash: blockhash,\n    feePayer: fromPubkey,\n  }).add(instruction);\n};\n\nconst findBlock = async (\n  connection: Connection,\n  blockhash: string\n): Promise<void> =>\n  connection\n    .getFeeCalculatorForBlockhash(blockhash, 'confirmed')\n    .then(result => {\n      if (!result.value) throw new Error('Block was not found');\n      // if we were interested in the age of the block,\n      // we could check the value of result.context.slot here and use getBlock() to look it up\n    });\n\nexport const checkRecentBlock = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> => {\n  if (!transaction.recentBlockhash)\n    throw new Error('Transaction has no recent blockhash!');\n  await findBlock(connection, transaction.recentBlockhash);\n};\n\nconst findTransaction = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<TransactionResponse | null> => {\n  if (!transaction.signature) {\n    throw new Error('Transaction has no signature');\n  }\n  const txSig = encode(transaction.signature);\n  return connection.getTransaction(txSig);\n};\n\nexport const checkTransactionNotBroadcast = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> =>\n  findTransaction(connection, transaction).then(result => {\n    if (result) throw new Error('Transaction was broadcast!');\n  });\n\nexport const checkTransactionParameters = (transaction: Transaction) => {\n  if (transaction.instructions.length !== 1)\n    throw new Error(\n      'Incorrect instruction count. The transaction must contain only one Transfer instruction'\n    );\n\n  const [instruction] = transaction.instructions;\n\n  let transferParams;\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error(\n      'Invalid instruction. The transaction must contain a Transfer instruction'\n    );\n  }\n\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey))\n    throw new Error('The transaction must be self-to-self');\n  if (transferParams.lamports !== 0)\n    throw new Error('The transaction must have zero value');\n};\n\nexport const checkSignatures = (\n  transaction: Transaction,\n  publicKey: PublicKey\n) => {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n  const signatureForExpectedKey = transaction.signatures.find(\n    signaturePubkeyPair => signaturePubkeyPair.publicKey.equals(publicKey)\n  );\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\n","import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  checkRecentBlock,\n  checkSignatures,\n  checkTransactionNotBroadcast,\n  checkTransactionParameters,\n  Config,\n  DEFAULT_CONFIG,\n  defaultSigner,\n  getClusterUrl,\n  isKeypair,\n  makeTransaction,\n  pubkeyOf,\n  SignCallback,\n} from './utilities';\n\nexport { SignCallback, Config, DEFAULT_CONFIG } from './utilities';\n\nexport const prove = async (\n  key: PublicKey | Keypair,\n  signer?: SignCallback,\n  config: Config = DEFAULT_CONFIG\n): Promise<Buffer> => {\n  if (isKeypair(key) && signer)\n    throw new Error('Provide a keypair or a signer, not both');\n  if (!isKeypair(key) && !signer)\n    throw new Error('Provide either a keypair or a signer');\n  const sign = signer || defaultSigner(key as Keypair);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const publicKey = pubkeyOf(key);\n\n  const transaction = await makeTransaction(\n    connection,\n    publicKey,\n    publicKey,\n    0\n  );\n  const signedTransaction = await sign(transaction);\n  return signedTransaction.serialize();\n};\n\nexport const verifyStatic = (evidence: Buffer, publicKey: PublicKey): void => {\n  const transaction = Transaction.from(evidence);\n\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\n\nexport const verify = async (\n  evidence: Buffer,\n  publicKey: PublicKey,\n  config: Config = DEFAULT_CONFIG\n): Promise<void> => {\n  verifyStatic(evidence, publicKey);\n\n  const transaction = Transaction.from(evidence);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const checkTransactionNotBroadcastPromise = checkTransactionNotBroadcast(\n    connection,\n    transaction\n  );\n  const checkBlockPromise = config.recentBlockCheck\n    ? checkRecentBlock(connection, transaction)\n    : Promise.resolve();\n\n  await Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n};\n"]},"metadata":{},"sourceType":"module"}